/**
 * Copyright 2018-2019, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as React from 'react';
import { WithOptimizelyProps } from './withOptimizely';
import { VariableValuesObject } from './client';
export declare type ChildrenRenderFunction = (variableValues: VariableValuesObject) => React.ReactNode;
declare type ChildRenderFunction = (variation: string | null) => React.ReactNode;
export interface ExperimentProps extends WithOptimizelyProps {
    experiment: string;
    autoUpdate?: boolean;
    timeout?: number;
    children: React.ReactNode | ChildRenderFunction;
}
export interface ExperimentState {
    canRender: boolean;
    variation: string | null;
}
export declare class Experiment extends React.Component<ExperimentProps, ExperimentState> {
    private optimizelyNotificationId?;
    private unregisterUserListener;
    private autoUpdate;
    constructor(props: ExperimentProps);
    componentDidMount(): void;
    setupAutoUpdateListeners(): void;
    componentWillUnmount(): void;
    render(): {} | null | undefined;
}
export declare const OptimizelyExperiment: React.ForwardRefExoticComponent<Pick<ExperimentProps, "children" | "experiment" | "autoUpdate" | "timeout"> & React.RefAttributes<unknown>>;
export {};
