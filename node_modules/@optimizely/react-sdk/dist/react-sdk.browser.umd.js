(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('crypto'), require('http'), require('https'), require('url')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'crypto', 'http', 'https', 'url'], factory) :
  (global = global || self, factory(global.optimizelyReactSdk = {}, global.React, global.crypto, global.http, global.https, global.url));
}(this, function (exports, React, crypto, http, https, url) { 'use strict';

  crypto = crypto && crypto.hasOwnProperty('default') ? crypto['default'] : crypto;
  http = http && http.hasOwnProperty('default') ? http['default'] : http;
  https = https && https.hasOwnProperty('default') ? https['default'] : https;
  url = url && url.hasOwnProperty('default') ? url['default'] : url;

  /**
   * Copyright 2018-2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var _a = React.createContext({
      optimizely: null,
      isServerSide: false,
      timeout: 0,
  }), Consumer = _a.Consumer, Provider = _a.Provider;
  var OptimizelyContextConsumer = Consumer;
  var OptimizelyContextProvider = Provider;

  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation. All rights reserved.
  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at http://www.apache.org/licenses/LICENSE-2.0

  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
  MERCHANTABLITY OR NON-INFRINGEMENT.

  See the Apache Version 2.0 License for specific language governing permissions
  and limitations under the License.
  ***************************************************************************** */
  /* global Reflect, Promise */

  var extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
          function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
      return extendStatics(d, b);
  };

  function __extends(d, b) {
      extendStatics(d, b);
      function __() { this.constructor = d; }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  var __assign = function() {
      __assign = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };

  function __rest(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  }

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var errorHandler = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   * @export
   * @class NoopErrorHandler
   * @implements {ErrorHandler}
   */
  var NoopErrorHandler = /** @class */ (function () {
      function NoopErrorHandler() {
      }
      /**
       * @param {Error} exception
       * @memberof NoopErrorHandler
       */
      NoopErrorHandler.prototype.handleError = function (exception) {
          // no-op
          return;
      };
      return NoopErrorHandler;
  }());
  exports.NoopErrorHandler = NoopErrorHandler;
  var globalErrorHandler = new NoopErrorHandler();
  /**
   * @export
   * @param {ErrorHandler} handler
   */
  function setErrorHandler(handler) {
      globalErrorHandler = handler;
  }
  exports.setErrorHandler = setErrorHandler;
  /**
   * @export
   * @returns {ErrorHandler}
   */
  function getErrorHandler() {
      return globalErrorHandler;
  }
  exports.getErrorHandler = getErrorHandler;
  /**
   * @export
   */
  function resetErrorHandler() {
      globalErrorHandler = new NoopErrorHandler();
  }
  exports.resetErrorHandler = resetErrorHandler;
  });

  unwrapExports(errorHandler);
  var errorHandler_1 = errorHandler.NoopErrorHandler;
  var errorHandler_2 = errorHandler.setErrorHandler;
  var errorHandler_3 = errorHandler.getErrorHandler;
  var errorHandler_4 = errorHandler.resetErrorHandler;

  var models = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var LogLevel;
  (function (LogLevel) {
      LogLevel[LogLevel["NOTSET"] = 0] = "NOTSET";
      LogLevel[LogLevel["DEBUG"] = 1] = "DEBUG";
      LogLevel[LogLevel["INFO"] = 2] = "INFO";
      LogLevel[LogLevel["WARNING"] = 3] = "WARNING";
      LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
  })(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
  });

  unwrapExports(models);
  var models_1 = models.LogLevel;

  // Unique ID creation requires a high quality random # generator.  In node.js
  // this is pretty straight-forward - we use the crypto API.



  var rng = function nodeRNG() {
    return crypto.randomBytes(16);
  };

  /**
   * Convert array of 16 byte values to UUID string format of the form:
   * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
   */
  var byteToHex = [];
  for (var i = 0; i < 256; ++i) {
    byteToHex[i] = (i + 0x100).toString(16).substr(1);
  }

  function bytesToUuid(buf, offset) {
    var i = offset || 0;
    var bth = byteToHex;
    // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
    return ([bth[buf[i++]], bth[buf[i++]], 
  	bth[buf[i++]], bth[buf[i++]], '-',
  	bth[buf[i++]], bth[buf[i++]], '-',
  	bth[buf[i++]], bth[buf[i++]], '-',
  	bth[buf[i++]], bth[buf[i++]], '-',
  	bth[buf[i++]], bth[buf[i++]],
  	bth[buf[i++]], bth[buf[i++]],
  	bth[buf[i++]], bth[buf[i++]]]).join('');
  }

  var bytesToUuid_1 = bytesToUuid;

  // **`v1()` - Generate time-based UUID**
  //
  // Inspired by https://github.com/LiosK/UUID.js
  // and http://docs.python.org/library/uuid.html

  var _nodeId;
  var _clockseq;

  // Previous uuid creation time
  var _lastMSecs = 0;
  var _lastNSecs = 0;

  // See https://github.com/broofa/node-uuid for API details
  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];

    options = options || {};
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

    // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189
    if (node == null || clockseq == null) {
      var seedBytes = rng();
      if (node == null) {
        // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
        node = _nodeId = [
          seedBytes[0] | 0x01,
          seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
        ];
      }
      if (clockseq == null) {
        // Per 4.2.2, randomize (14 bit) clockseq
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
      }
    }

    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

    // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

    // Time since last uuid creation (in msecs)
    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

    // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq === undefined) {
      clockseq = clockseq + 1 & 0x3fff;
    }

    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
      nsecs = 0;
    }

    // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) {
      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
    }

    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;

    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000;

    // `time_low`
    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff;

    // `time_mid`
    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff;

    // `time_high_and_version`
    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
    b[i++] = tmh >>> 16 & 0xff;

    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 0x80;

    // `clock_seq_low`
    b[i++] = clockseq & 0xff;

    // `node`
    for (var n = 0; n < 6; ++n) {
      b[i + n] = node[n];
    }

    return buf ? buf : bytesToUuid_1(b);
  }

  var v1_1 = v1;

  function v4(options, buf, offset) {
    var i = buf && offset || 0;

    if (typeof(options) == 'string') {
      buf = options === 'binary' ? new Array(16) : null;
      options = null;
    }
    options = options || {};

    var rnds = options.random || (options.rng || rng)();

    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = (rnds[6] & 0x0f) | 0x40;
    rnds[8] = (rnds[8] & 0x3f) | 0x80;

    // Copy bytes to buffer, if provided
    if (buf) {
      for (var ii = 0; ii < 16; ++ii) {
        buf[i + ii] = rnds[ii];
      }
    }

    return buf || bytesToUuid_1(rnds);
  }

  var v4_1 = v4;

  var uuid = v4_1;
  uuid.v1 = v1_1;
  uuid.v4 = v4_1;

  var uuid_1 = uuid;

  var lib = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  function getTimestamp() {
      return new Date().getTime();
  }
  exports.getTimestamp = getTimestamp;
  function generateUUID() {
      return uuid_1.v4();
  }
  exports.generateUUID = generateUUID;
  /**
   * Validates a value is a valid TypeScript enum
   *
   * @export
   * @param {object} enumToCheck
   * @param {*} value
   * @returns {boolean}
   */
  function isValidEnum(enumToCheck, value) {
      var found = false;
      var keys = Object.keys(enumToCheck);
      for (var index = 0; index < keys.length; index++) {
          if (value === enumToCheck[keys[index]]) {
              found = true;
              break;
          }
      }
      return found;
  }
  exports.isValidEnum = isValidEnum;
  function groupBy(arr, grouperFn) {
      var grouper = {};
      arr.forEach(function (item) {
          var key = grouperFn(item);
          grouper[key] = grouper[key] || [];
          grouper[key].push(item);
      });
      return objectValues(grouper);
  }
  exports.groupBy = groupBy;
  function objectValues(obj) {
      return Object.keys(obj).map(function (key) { return obj[key]; });
  }
  exports.objectValues = objectValues;
  function find(arr, cond) {
      var found;
      for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
          var item = arr_1[_i];
          if (cond(item)) {
              found = item;
              break;
          }
      }
      return found;
  }
  exports.find = find;
  function keyBy(arr, keyByFn) {
      var map = {};
      arr.forEach(function (item) {
          var key = keyByFn(item);
          map[key] = item;
      });
      return map;
  }
  exports.keyBy = keyBy;
  function sprintf(format) {
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
      }
      var i = 0;
      return format.replace(/%s/g, function () {
          var arg = args[i++];
          var type = typeof arg;
          if (type === 'function') {
              return arg();
          }
          else if (type === 'string') {
              return arg;
          }
          else {
              return String(arg);
          }
      });
  }
  exports.sprintf = sprintf;
  });

  unwrapExports(lib);
  var lib_1 = lib.getTimestamp;
  var lib_2 = lib.generateUUID;
  var lib_3 = lib.isValidEnum;
  var lib_4 = lib.groupBy;
  var lib_5 = lib.objectValues;
  var lib_6 = lib.find;
  var lib_7 = lib.keyBy;
  var lib_8 = lib.sprintf;

  var logger = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */



  var stringToLogLevel = {
      NOTSET: 0,
      DEBUG: 1,
      INFO: 2,
      WARNING: 3,
      ERROR: 4,
  };
  function coerceLogLevel(level) {
      if (typeof level !== 'string') {
          return level;
      }
      level = level.toUpperCase();
      if (level === 'WARN') {
          level = 'WARNING';
      }
      if (!stringToLogLevel[level]) {
          return level;
      }
      return stringToLogLevel[level];
  }
  var DefaultLogManager = /** @class */ (function () {
      function DefaultLogManager() {
          this.defaultLoggerFacade = new OptimizelyLogger();
          this.loggers = {};
      }
      DefaultLogManager.prototype.getLogger = function (name) {
          if (!name) {
              return this.defaultLoggerFacade;
          }
          if (!this.loggers[name]) {
              this.loggers[name] = new OptimizelyLogger({ messagePrefix: name });
          }
          return this.loggers[name];
      };
      return DefaultLogManager;
  }());
  var ConsoleLogHandler = /** @class */ (function () {
      /**
       * Creates an instance of ConsoleLogger.
       * @param {ConsoleLogHandlerConfig} config
       * @memberof ConsoleLogger
       */
      function ConsoleLogHandler(config) {
          if (config === void 0) { config = {}; }
          this.logLevel = models.LogLevel.NOTSET;
          if (config.logLevel !== undefined && lib.isValidEnum(models.LogLevel, config.logLevel)) {
              this.setLogLevel(config.logLevel);
          }
          this.logToConsole = config.logToConsole !== undefined ? !!config.logToConsole : true;
          this.prefix = config.prefix !== undefined ? config.prefix : '[OPTIMIZELY]';
      }
      /**
       * @param {LogLevel} level
       * @param {string} message
       * @memberof ConsoleLogger
       */
      ConsoleLogHandler.prototype.log = function (level, message) {
          if (!this.shouldLog(level) || !this.logToConsole) {
              return;
          }
          var logMessage = this.prefix + " - " + this.getLogLevelName(level) + " " + this.getTime() + " " + message;
          this.consoleLog(level, [logMessage]);
      };
      /**
       * @param {LogLevel} level
       * @memberof ConsoleLogger
       */
      ConsoleLogHandler.prototype.setLogLevel = function (level) {
          level = coerceLogLevel(level);
          if (!lib.isValidEnum(models.LogLevel, level) || level === undefined) {
              this.logLevel = models.LogLevel.ERROR;
          }
          else {
              this.logLevel = level;
          }
      };
      /**
       * @returns {string}
       * @memberof ConsoleLogger
       */
      ConsoleLogHandler.prototype.getTime = function () {
          return new Date().toISOString();
      };
      /**
       * @private
       * @param {LogLevel} targetLogLevel
       * @returns {boolean}
       * @memberof ConsoleLogger
       */
      ConsoleLogHandler.prototype.shouldLog = function (targetLogLevel) {
          return targetLogLevel >= this.logLevel;
      };
      /**
       * @private
       * @param {LogLevel} logLevel
       * @returns {string}
       * @memberof ConsoleLogger
       */
      ConsoleLogHandler.prototype.getLogLevelName = function (logLevel) {
          switch (logLevel) {
              case models.LogLevel.DEBUG:
                  return 'DEBUG';
              case models.LogLevel.INFO:
                  return 'INFO ';
              case models.LogLevel.WARNING:
                  return 'WARN ';
              case models.LogLevel.ERROR:
                  return 'ERROR';
              default:
                  return 'NOTSET';
          }
      };
      /**
       * @private
       * @param {LogLevel} logLevel
       * @param {string[]} logArguments
       * @memberof ConsoleLogger
       */
      ConsoleLogHandler.prototype.consoleLog = function (logLevel, logArguments) {
          switch (logLevel) {
              case models.LogLevel.DEBUG:
                  console.log.apply(console, logArguments);
                  break;
              case models.LogLevel.INFO:
                  console.info.apply(console, logArguments);
                  break;
              case models.LogLevel.WARNING:
                  console.warn.apply(console, logArguments);
                  break;
              case models.LogLevel.ERROR:
                  console.error.apply(console, logArguments);
                  break;
              default:
                  console.log.apply(console, logArguments);
          }
      };
      return ConsoleLogHandler;
  }());
  exports.ConsoleLogHandler = ConsoleLogHandler;
  var globalLogLevel = models.LogLevel.NOTSET;
  var globalLogHandler = null;
  var OptimizelyLogger = /** @class */ (function () {
      function OptimizelyLogger(opts) {
          if (opts === void 0) { opts = {}; }
          this.messagePrefix = '';
          if (opts.messagePrefix) {
              this.messagePrefix = opts.messagePrefix;
          }
      }
      /**
       * @param {(LogLevel | LogInputObject)} levelOrObj
       * @param {string} [message]
       * @memberof OptimizelyLogger
       */
      OptimizelyLogger.prototype.log = function (level, message) {
          this.internalLog(coerceLogLevel(level), {
              message: message,
              splat: [],
          });
      };
      OptimizelyLogger.prototype.info = function (message) {
          var splat = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              splat[_i - 1] = arguments[_i];
          }
          this.namedLog(models.LogLevel.INFO, message, splat);
      };
      OptimizelyLogger.prototype.debug = function (message) {
          var splat = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              splat[_i - 1] = arguments[_i];
          }
          this.namedLog(models.LogLevel.DEBUG, message, splat);
      };
      OptimizelyLogger.prototype.warn = function (message) {
          var splat = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              splat[_i - 1] = arguments[_i];
          }
          this.namedLog(models.LogLevel.WARNING, message, splat);
      };
      OptimizelyLogger.prototype.error = function (message) {
          var splat = [];
          for (var _i = 1; _i < arguments.length; _i++) {
              splat[_i - 1] = arguments[_i];
          }
          this.namedLog(models.LogLevel.ERROR, message, splat);
      };
      OptimizelyLogger.prototype.format = function (data) {
          return "" + (this.messagePrefix ? this.messagePrefix + ': ' : '') + lib.sprintf.apply(void 0, [data.message].concat(data.splat));
      };
      OptimizelyLogger.prototype.internalLog = function (level, data) {
          if (!globalLogHandler) {
              return;
          }
          if (level < globalLogLevel) {
              return;
          }
          globalLogHandler.log(level, this.format(data));
          if (data.error && data.error instanceof Error) {
              errorHandler.getErrorHandler().handleError(data.error);
          }
      };
      OptimizelyLogger.prototype.namedLog = function (level, message, splat) {
          var error;
          if (message instanceof Error) {
              error = message;
              message = error.message;
              this.internalLog(level, {
                  error: error,
                  message: message,
                  splat: splat,
              });
              return;
          }
          if (splat.length === 0) {
              this.internalLog(level, {
                  message: message,
                  splat: splat,
              });
              return;
          }
          var last = splat[splat.length - 1];
          if (last instanceof Error) {
              error = last;
              splat.splice(-1);
          }
          this.internalLog(level, { message: message, error: error, splat: splat });
      };
      return OptimizelyLogger;
  }());
  var globalLogManager = new DefaultLogManager();
  function getLogger(name) {
      return globalLogManager.getLogger(name);
  }
  exports.getLogger = getLogger;
  function setLogHandler(logger) {
      globalLogHandler = logger;
  }
  exports.setLogHandler = setLogHandler;
  function setLogLevel(level) {
      level = coerceLogLevel(level);
      if (!lib.isValidEnum(models.LogLevel, level) || level === undefined) {
          globalLogLevel = models.LogLevel.ERROR;
      }
      else {
          globalLogLevel = level;
      }
  }
  exports.setLogLevel = setLogLevel;
  function getLogLevel() {
      return globalLogLevel;
  }
  exports.getLogLevel = getLogLevel;
  /**
   * Resets all global logger state to it's original
   */
  function resetLogger() {
      globalLogManager = new DefaultLogManager();
      globalLogLevel = models.LogLevel.NOTSET;
  }
  exports.resetLogger = resetLogger;
  });

  unwrapExports(logger);
  var logger_1 = logger.ConsoleLogHandler;
  var logger_2 = logger.getLogger;
  var logger_3 = logger.setLogHandler;
  var logger_4 = logger.setLogLevel;
  var logger_5 = logger.getLogLevel;
  var logger_6 = logger.resetLogger;

  var lib$1 = createCommonjsModule(function (module, exports) {
  function __export(m) {
      for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  __export(errorHandler);
  __export(models);
  __export(logger);
  });

  unwrapExports(lib$1);
  var lib_1$1 = lib$1.getLogger;

  var reactIs_production_min = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports,"__esModule",{value:!0});
  var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?Symbol.for("react.memo"):
  60115,r=b?Symbol.for("react.lazy"):60116;function t(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case h:return a;default:return u}}case r:case q:case d:return u}}}function v(a){return t(a)===m}exports.typeOf=t;exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;
  exports.Fragment=e;exports.Lazy=r;exports.Memo=q;exports.Portal=d;exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||"object"===typeof a&&null!==a&&(a.$$typeof===r||a.$$typeof===q||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n)};exports.isAsyncMode=function(a){return v(a)||t(a)===l};exports.isConcurrentMode=v;exports.isContextConsumer=function(a){return t(a)===k};
  exports.isContextProvider=function(a){return t(a)===h};exports.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return t(a)===n};exports.isFragment=function(a){return t(a)===e};exports.isLazy=function(a){return t(a)===r};exports.isMemo=function(a){return t(a)===q};exports.isPortal=function(a){return t(a)===d};exports.isProfiler=function(a){return t(a)===g};exports.isStrictMode=function(a){return t(a)===f};
  exports.isSuspense=function(a){return t(a)===p};
  });

  unwrapExports(reactIs_production_min);
  var reactIs_production_min_1 = reactIs_production_min.typeOf;
  var reactIs_production_min_2 = reactIs_production_min.AsyncMode;
  var reactIs_production_min_3 = reactIs_production_min.ConcurrentMode;
  var reactIs_production_min_4 = reactIs_production_min.ContextConsumer;
  var reactIs_production_min_5 = reactIs_production_min.ContextProvider;
  var reactIs_production_min_6 = reactIs_production_min.Element;
  var reactIs_production_min_7 = reactIs_production_min.ForwardRef;
  var reactIs_production_min_8 = reactIs_production_min.Fragment;
  var reactIs_production_min_9 = reactIs_production_min.Lazy;
  var reactIs_production_min_10 = reactIs_production_min.Memo;
  var reactIs_production_min_11 = reactIs_production_min.Portal;
  var reactIs_production_min_12 = reactIs_production_min.Profiler;
  var reactIs_production_min_13 = reactIs_production_min.StrictMode;
  var reactIs_production_min_14 = reactIs_production_min.Suspense;
  var reactIs_production_min_15 = reactIs_production_min.isValidElementType;
  var reactIs_production_min_16 = reactIs_production_min.isAsyncMode;
  var reactIs_production_min_17 = reactIs_production_min.isConcurrentMode;
  var reactIs_production_min_18 = reactIs_production_min.isContextConsumer;
  var reactIs_production_min_19 = reactIs_production_min.isContextProvider;
  var reactIs_production_min_20 = reactIs_production_min.isElement;
  var reactIs_production_min_21 = reactIs_production_min.isForwardRef;
  var reactIs_production_min_22 = reactIs_production_min.isFragment;
  var reactIs_production_min_23 = reactIs_production_min.isLazy;
  var reactIs_production_min_24 = reactIs_production_min.isMemo;
  var reactIs_production_min_25 = reactIs_production_min.isPortal;
  var reactIs_production_min_26 = reactIs_production_min.isProfiler;
  var reactIs_production_min_27 = reactIs_production_min.isStrictMode;
  var reactIs_production_min_28 = reactIs_production_min.isSuspense;

  var reactIs_development = createCommonjsModule(function (module, exports) {



  {
    (function() {

  Object.defineProperty(exports, '__esModule', { value: true });

  // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
  // nor polyfill, then a plain number is used for performance.
  var hasSymbol = typeof Symbol === 'function' && Symbol.for;

  var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
  var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
  var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
  var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
  var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
  var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
  var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
  var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
  var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
  var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
  var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
  var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
  var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

  function isValidElementType(type) {
    return typeof type === 'string' || typeof type === 'function' ||
    // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
    type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
  }

  /**
   * Forked from fbjs/warning:
   * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
   *
   * Only change is we use console.warn instead of console.error,
   * and do nothing when 'console' is not supported.
   * This really simplifies the code.
   * ---
   * Similar to invariant but only logs a warning if the condition is not met.
   * This can be used to log issues in development environments in critical
   * paths. Removing the logging code for production environments will keep the
   * same logic and follow the same code paths.
   */

  var lowPriorityWarning = function () {};

  {
    var printWarning = function (format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.warn(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    lowPriorityWarning = function (condition, format) {
      if (format === undefined) {
        throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
      }
      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  }

  var lowPriorityWarning$1 = lowPriorityWarning;

  function typeOf(object) {
    if (typeof object === 'object' && object !== null) {
      var $$typeof = object.$$typeof;
      switch ($$typeof) {
        case REACT_ELEMENT_TYPE:
          var type = object.type;

          switch (type) {
            case REACT_ASYNC_MODE_TYPE:
            case REACT_CONCURRENT_MODE_TYPE:
            case REACT_FRAGMENT_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_SUSPENSE_TYPE:
              return type;
            default:
              var $$typeofType = type && type.$$typeof;

              switch ($$typeofType) {
                case REACT_CONTEXT_TYPE:
                case REACT_FORWARD_REF_TYPE:
                case REACT_PROVIDER_TYPE:
                  return $$typeofType;
                default:
                  return $$typeof;
              }
          }
        case REACT_LAZY_TYPE:
        case REACT_MEMO_TYPE:
        case REACT_PORTAL_TYPE:
          return $$typeof;
      }
    }

    return undefined;
  }

  // AsyncMode is deprecated along with isAsyncMode
  var AsyncMode = REACT_ASYNC_MODE_TYPE;
  var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
  var ContextConsumer = REACT_CONTEXT_TYPE;
  var ContextProvider = REACT_PROVIDER_TYPE;
  var Element = REACT_ELEMENT_TYPE;
  var ForwardRef = REACT_FORWARD_REF_TYPE;
  var Fragment = REACT_FRAGMENT_TYPE;
  var Lazy = REACT_LAZY_TYPE;
  var Memo = REACT_MEMO_TYPE;
  var Portal = REACT_PORTAL_TYPE;
  var Profiler = REACT_PROFILER_TYPE;
  var StrictMode = REACT_STRICT_MODE_TYPE;
  var Suspense = REACT_SUSPENSE_TYPE;

  var hasWarnedAboutDeprecatedIsAsyncMode = false;

  // AsyncMode should be deprecated
  function isAsyncMode(object) {
    {
      if (!hasWarnedAboutDeprecatedIsAsyncMode) {
        hasWarnedAboutDeprecatedIsAsyncMode = true;
        lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
      }
    }
    return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
  }
  function isConcurrentMode(object) {
    return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
  }
  function isContextConsumer(object) {
    return typeOf(object) === REACT_CONTEXT_TYPE;
  }
  function isContextProvider(object) {
    return typeOf(object) === REACT_PROVIDER_TYPE;
  }
  function isElement(object) {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  }
  function isForwardRef(object) {
    return typeOf(object) === REACT_FORWARD_REF_TYPE;
  }
  function isFragment(object) {
    return typeOf(object) === REACT_FRAGMENT_TYPE;
  }
  function isLazy(object) {
    return typeOf(object) === REACT_LAZY_TYPE;
  }
  function isMemo(object) {
    return typeOf(object) === REACT_MEMO_TYPE;
  }
  function isPortal(object) {
    return typeOf(object) === REACT_PORTAL_TYPE;
  }
  function isProfiler(object) {
    return typeOf(object) === REACT_PROFILER_TYPE;
  }
  function isStrictMode(object) {
    return typeOf(object) === REACT_STRICT_MODE_TYPE;
  }
  function isSuspense(object) {
    return typeOf(object) === REACT_SUSPENSE_TYPE;
  }

  exports.typeOf = typeOf;
  exports.AsyncMode = AsyncMode;
  exports.ConcurrentMode = ConcurrentMode;
  exports.ContextConsumer = ContextConsumer;
  exports.ContextProvider = ContextProvider;
  exports.Element = Element;
  exports.ForwardRef = ForwardRef;
  exports.Fragment = Fragment;
  exports.Lazy = Lazy;
  exports.Memo = Memo;
  exports.Portal = Portal;
  exports.Profiler = Profiler;
  exports.StrictMode = StrictMode;
  exports.Suspense = Suspense;
  exports.isValidElementType = isValidElementType;
  exports.isAsyncMode = isAsyncMode;
  exports.isConcurrentMode = isConcurrentMode;
  exports.isContextConsumer = isContextConsumer;
  exports.isContextProvider = isContextProvider;
  exports.isElement = isElement;
  exports.isForwardRef = isForwardRef;
  exports.isFragment = isFragment;
  exports.isLazy = isLazy;
  exports.isMemo = isMemo;
  exports.isPortal = isPortal;
  exports.isProfiler = isProfiler;
  exports.isStrictMode = isStrictMode;
  exports.isSuspense = isSuspense;
    })();
  }
  });

  unwrapExports(reactIs_development);
  var reactIs_development_1 = reactIs_development.typeOf;
  var reactIs_development_2 = reactIs_development.AsyncMode;
  var reactIs_development_3 = reactIs_development.ConcurrentMode;
  var reactIs_development_4 = reactIs_development.ContextConsumer;
  var reactIs_development_5 = reactIs_development.ContextProvider;
  var reactIs_development_6 = reactIs_development.Element;
  var reactIs_development_7 = reactIs_development.ForwardRef;
  var reactIs_development_8 = reactIs_development.Fragment;
  var reactIs_development_9 = reactIs_development.Lazy;
  var reactIs_development_10 = reactIs_development.Memo;
  var reactIs_development_11 = reactIs_development.Portal;
  var reactIs_development_12 = reactIs_development.Profiler;
  var reactIs_development_13 = reactIs_development.StrictMode;
  var reactIs_development_14 = reactIs_development.Suspense;
  var reactIs_development_15 = reactIs_development.isValidElementType;
  var reactIs_development_16 = reactIs_development.isAsyncMode;
  var reactIs_development_17 = reactIs_development.isConcurrentMode;
  var reactIs_development_18 = reactIs_development.isContextConsumer;
  var reactIs_development_19 = reactIs_development.isContextProvider;
  var reactIs_development_20 = reactIs_development.isElement;
  var reactIs_development_21 = reactIs_development.isForwardRef;
  var reactIs_development_22 = reactIs_development.isFragment;
  var reactIs_development_23 = reactIs_development.isLazy;
  var reactIs_development_24 = reactIs_development.isMemo;
  var reactIs_development_25 = reactIs_development.isPortal;
  var reactIs_development_26 = reactIs_development.isProfiler;
  var reactIs_development_27 = reactIs_development.isStrictMode;
  var reactIs_development_28 = reactIs_development.isSuspense;

  var reactIs = createCommonjsModule(function (module) {

  {
    module.exports = reactIs_development;
  }
  });

  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
  };

  var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
  };

  var FORWARD_REF_STATICS = {
      '$$typeof': true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
  };

  var MEMO_STATICS = {
      '$$typeof': true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
  };

  var TYPE_STATICS = {};
  TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;

  function getStatics(component) {
      if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
      }
      return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
  }

  var defineProperty = Object.defineProperty;
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectPrototype = Object.prototype;

  function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== 'string') {
          // don't hoist over string (html) components

          if (objectPrototype) {
              var inheritedComponent = getPrototypeOf(sourceComponent);
              if (inheritedComponent && inheritedComponent !== objectPrototype) {
                  hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
              }
          }

          var keys = getOwnPropertyNames(sourceComponent);

          if (getOwnPropertySymbols) {
              keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }

          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);

          for (var i = 0; i < keys.length; ++i) {
              var key = keys[i];
              if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
                  var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                  try {
                      // Avoid failures from read-only properties
                      defineProperty(targetComponent, key, descriptor);
                  } catch (e) {}
              }
          }

          return targetComponent;
      }

      return targetComponent;
  }

  var hoistNonReactStatics_cjs = hoistNonReactStatics;

  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  function areUsersEqual(user1, user2) {
      if (user1.id !== user2.id) {
          return false;
      }
      var user1keys = Object.keys(user1.attributes);
      var user2keys = Object.keys(user2.attributes);
      user1keys.sort();
      user2keys.sort();
      var areKeysLenEqual = user1keys.length === user2keys.length;
      if (!areKeysLenEqual) {
          return false;
      }
      for (var i = 0; i < user1keys.length; i++) {
          var key1 = user1keys[i];
          var key2 = user2keys[i];
          if (key1 !== key2) {
              return false;
          }
          if (user1.attributes[key1] !== user2.attributes[key2]) {
              return false;
          }
      }
      return true;
  }
  function hoistStaticsAndForwardRefs(Target, Source, displayName) {
      // Make sure to hoist statics and forward any refs through from Source to Target
      // From the React docs:
      //   https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over
      //   https://reactjs.org/docs/forwarding-refs.html#forwarding-refs-in-higher-order-components
      var forwardRef = function (props, ref) { return (React.createElement(Target, __assign({}, props, { forwardedRef: ref }))); };
      forwardRef.displayName = displayName + "(" + (Source.displayName || Source.name) + ")";
      return hoistNonReactStatics_cjs(React.forwardRef(forwardRef), Source);
  }

  var logger$1 = lib_1$1('<OptimizelyProvider>');
  var OptimizelyProvider = /** @class */ (function (_super) {
      __extends(OptimizelyProvider, _super);
      function OptimizelyProvider(props) {
          var _this = _super.call(this, props) || this;
          var optimizely = props.optimizely, userId = props.userId, userAttributes = props.userAttributes, user = props.user;
          // check if user id/attributes are provided as props and set them ReactSDKClient
          var finalUser = null;
          if (user) {
              if ('then' in user) {
                  user.then(function (user) {
                      optimizely.setUser(user);
                  });
              }
              else {
                  finalUser = {
                      id: user.id,
                      attributes: user.attributes || {},
                  };
              }
          }
          else if (userId) {
              finalUser = {
                  id: userId,
                  attributes: userAttributes || {},
              };
              // deprecation warning
              logger$1.warn('Passing userId and userAttributes as props is deprecated, please switch to using `user` prop');
          }
          if (finalUser) {
              optimizely.setUser(finalUser);
          }
          return _this;
      }
      OptimizelyProvider.prototype.componentDidUpdate = function (prevProps) {
          if (prevProps.isServerSide) {
              // dont react to updates on server
              return;
          }
          var optimizely = this.props.optimizely;
          if (this.props.user && 'id' in this.props.user) {
              if (!optimizely.user.id) {
                  // no user is set in optimizely, update
                  optimizely.setUser(this.props.user);
              }
              else if (
              // if the users aren't equal update
              !areUsersEqual({
                  id: optimizely.user.id,
                  attributes: optimizely.user.attributes,
              }, {
                  id: this.props.user.id,
                  // TODO see if we can use computeDerivedStateFromProps
                  attributes: this.props.user.attributes || {},
              })) {
                  optimizely.setUser(this.props.user);
              }
          }
      };
      OptimizelyProvider.prototype.render = function () {
          var _a = this.props, optimizely = _a.optimizely, children = _a.children, timeout = _a.timeout;
          var isServerSide = !!this.props.isServerSide;
          var value = {
              optimizely: optimizely,
              isServerSide: isServerSide,
              timeout: timeout,
          };
          return (React.createElement(OptimizelyContextProvider, { value: value }, children));
      };
      return OptimizelyProvider;
  }(React.Component));

  function withOptimizely(Component) {
      var WithOptimizely = /** @class */ (function (_super) {
          __extends(WithOptimizely, _super);
          function WithOptimizely() {
              return _super !== null && _super.apply(this, arguments) || this;
          }
          WithOptimizely.prototype.render = function () {
              var _a = this.props, forwardedRef = _a.forwardedRef, rest = __rest(_a, ["forwardedRef"]);
              // Note: Casting props to P is necessary because of this TypeScript issue:
              // https://github.com/microsoft/TypeScript/issues/28884
              return (React.createElement(OptimizelyContextConsumer, null, function (value) { return (React.createElement(Component, __assign({}, rest, { optimizelyReadyTimeout: value.timeout, optimizely: value.optimizely, isServerSide: value.isServerSide, ref: forwardedRef }))); }));
          };
          return WithOptimizely;
      }(React.Component));
      var withRefsForwarded = hoistStaticsAndForwardRefs(WithOptimizely, Component, 'withOptimizely');
      return withRefsForwarded;
  }

  var lib$2 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  function getTimestamp() {
      return new Date().getTime();
  }
  exports.getTimestamp = getTimestamp;
  function generateUUID() {
      return uuid_1.v4();
  }
  exports.generateUUID = generateUUID;
  /**
   * Validates a value is a valid TypeScript enum
   *
   * @export
   * @param {object} enumToCheck
   * @param {*} value
   * @returns {boolean}
   */
  function isValidEnum(enumToCheck, value) {
      var found = false;
      var keys = Object.keys(enumToCheck);
      for (var index = 0; index < keys.length; index++) {
          if (value === enumToCheck[keys[index]]) {
              found = true;
              break;
          }
      }
      return found;
  }
  exports.isValidEnum = isValidEnum;
  function groupBy(arr, grouperFn) {
      var grouper = {};
      arr.forEach(function (item) {
          var key = grouperFn(item);
          grouper[key] = grouper[key] || [];
          grouper[key].push(item);
      });
      return objectValues(grouper);
  }
  exports.groupBy = groupBy;
  function objectValues(obj) {
      return Object.keys(obj).map(function (key) { return obj[key]; });
  }
  exports.objectValues = objectValues;
  function objectEntries(obj) {
      return Object.keys(obj).map(function (key) { return [key, obj[key]]; });
  }
  exports.objectEntries = objectEntries;
  function find(arr, cond) {
      var found;
      for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
          var item = arr_1[_i];
          if (cond(item)) {
              found = item;
              break;
          }
      }
      return found;
  }
  exports.find = find;
  function keyBy(arr, keyByFn) {
      var map = {};
      arr.forEach(function (item) {
          var key = keyByFn(item);
          map[key] = item;
      });
      return map;
  }
  exports.keyBy = keyBy;
  function sprintf(format) {
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
      }
      var i = 0;
      return format.replace(/%s/g, function () {
          var arg = args[i++];
          var type = typeof arg;
          if (type === 'function') {
              return arg();
          }
          else if (type === 'string') {
              return arg;
          }
          else {
              return String(arg);
          }
      });
  }
  exports.sprintf = sprintf;
  /*
   * Notification types for use with NotificationCenter
   * Format is EVENT: <list of parameters to callback>
   *
   * SDK consumers can use these to register callbacks with the notification center.
   *
   *  @deprecated since 3.1.0
   *  ACTIVATE: An impression event will be sent to Optimizely
   *  Callbacks will receive an object argument with the following properties:
   *    - experiment {Object}
   *    - userId {string}
   *    - attributes {Object|undefined}
   *    - variation {Object}
   *    - logEvent {Object}
   *
   *  DECISION: A decision is made in the system. i.e. user activation,
   *  feature access or feature-variable value retrieval
   *  Callbacks will receive an object argument with the following properties:
   *    - type {string}
   *    - userId {string}
   *    - attributes {Object|undefined}
   *    - decisionInfo {Object|undefined}
   *
   *  LOG_EVENT: A batch of events, which could contain impressions and/or conversions,
   *  will be sent to Optimizely
   *  Callbacks will receive an object argument with the following properties:
   *    - url {string}
   *    - httpVerb {string}
   *    - params {Object}
   *
   *  OPTIMIZELY_CONFIG_UPDATE: This Optimizely instance has been updated with a new
   *  config
   *
   *  TRACK: A conversion event will be sent to Optimizely
   *  Callbacks will receive the an object argument with the following properties:
   *    - eventKey {string}
   *    - userId {string}
   *    - attributes {Object|undefined}
   *    - eventTags {Object|undefined}
   *    - logEvent {Object}
   *
   */
  var NOTIFICATION_TYPES;
  (function (NOTIFICATION_TYPES) {
      NOTIFICATION_TYPES["ACTIVATE"] = "ACTIVATE:experiment, user_id,attributes, variation, event";
      NOTIFICATION_TYPES["DECISION"] = "DECISION:type, userId, attributes, decisionInfo";
      NOTIFICATION_TYPES["LOG_EVENT"] = "LOG_EVENT:logEvent";
      NOTIFICATION_TYPES["OPTIMIZELY_CONFIG_UPDATE"] = "OPTIMIZELY_CONFIG_UPDATE";
      NOTIFICATION_TYPES["TRACK"] = "TRACK:event_key, user_id, attributes, event_tags, event";
  })(NOTIFICATION_TYPES = exports.NOTIFICATION_TYPES || (exports.NOTIFICATION_TYPES = {}));
  });

  unwrapExports(lib$2);
  var lib_1$2 = lib$2.getTimestamp;
  var lib_2$1 = lib$2.generateUUID;
  var lib_3$1 = lib$2.isValidEnum;
  var lib_4$1 = lib$2.groupBy;
  var lib_5$1 = lib$2.objectValues;
  var lib_6$1 = lib$2.objectEntries;
  var lib_7$1 = lib$2.find;
  var lib_8$1 = lib$2.keyBy;
  var lib_9 = lib$2.sprintf;
  var lib_10 = lib$2.NOTIFICATION_TYPES;

  var enums = createCommonjsModule(function (module, exports) {
  /****************************************************************************
   * Copyright 2016-2019, Optimizely, Inc. and contributors                   *
   *                                                                          *
   * Licensed under the Apache License, Version 2.0 (the "License");          *
   * you may not use this file except in compliance with the License.         *
   * You may obtain a copy of the License at                                  *
   *                                                                          *
   *    http://www.apache.org/licenses/LICENSE-2.0                            *
   *                                                                          *
   * Unless required by applicable law or agreed to in writing, software      *
   * distributed under the License is distributed on an "AS IS" BASIS,        *
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
   * See the License for the specific language governing permissions and      *
   * limitations under the License.                                           *
   ***************************************************************************/



  /**
   * Contains global enums used throughout the library
   */
  exports.LOG_LEVEL = {
    NOTSET: 0,
    DEBUG: 1,
    INFO: 2,
    WARNING: 3,
    ERROR: 4,
  };

  exports.ERROR_MESSAGES = {
    CONDITION_EVALUATOR_ERROR: '%s: Error evaluating audience condition of type %s: %s',
    DATAFILE_AND_SDK_KEY_MISSING: '%s: You must provide at least one of sdkKey or datafile. Cannot start Optimizely',
    EXPERIMENT_KEY_NOT_IN_DATAFILE: '%s: Experiment key %s is not in datafile.',
    FEATURE_NOT_IN_DATAFILE: '%s: Feature key %s is not in datafile.',
    IMPROPERLY_FORMATTED_EXPERIMENT: '%s: Experiment key %s is improperly formatted.',
    INVALID_ATTRIBUTES: '%s: Provided attributes are in an invalid format.',
    INVALID_BUCKETING_ID: '%s: Unable to generate hash for bucketing ID %s: %s',
    INVALID_DATAFILE: '%s: Datafile is invalid - property %s: %s',
    INVALID_DATAFILE_MALFORMED: '%s: Datafile is invalid because it is malformed.',
    INVALID_JSON: '%s: JSON object is not valid.',
    INVALID_ERROR_HANDLER: '%s: Provided "errorHandler" is in an invalid format.',
    INVALID_EVENT_DISPATCHER: '%s: Provided "eventDispatcher" is in an invalid format.',
    INVALID_EVENT_KEY: '%s: Event key %s is not in datafile.',
    INVALID_EVENT_TAGS: '%s: Provided event tags are in an invalid format.',
    INVALID_EXPERIMENT_KEY: '%s: Experiment key %s is not in datafile. It is either invalid, paused, or archived.',
    INVALID_EXPERIMENT_ID: '%s: Experiment ID %s is not in datafile.',
    INVALID_GROUP_ID: '%s: Group ID %s is not in datafile.',
    INVALID_LOGGER: '%s: Provided "logger" is in an invalid format.',
    INVALID_ROLLOUT_ID: '%s: Invalid rollout ID %s attached to feature %s',
    INVALID_USER_ID: '%s: Provided user ID is in an invalid format.',
    INVALID_USER_PROFILE_SERVICE: '%s: Provided user profile service instance is in an invalid format: %s.',
    JSON_SCHEMA_EXPECTED: '%s: JSON schema expected.',
    NO_DATAFILE_SPECIFIED: '%s: No datafile specified. Cannot start optimizely.',
    NO_JSON_PROVIDED: '%s: No JSON object to validate against schema.',
    NO_VARIATION_FOR_EXPERIMENT_KEY: '%s: No variation key %s defined in datafile for experiment %s.',
    UNDEFINED_ATTRIBUTE: '%s: Provided attribute: %s has an undefined value.',
    UNRECOGNIZED_ATTRIBUTE: '%s: Unrecognized attribute %s provided. Pruning before sending event to Optimizely.',
    UNABLE_TO_CAST_VALUE: '%s: Unable to cast value %s to type %s, returning null.',
    USER_NOT_IN_FORCED_VARIATION: '%s: User %s is not in the forced variation map. Cannot remove their forced variation.',
    USER_PROFILE_LOOKUP_ERROR: '%s: Error while looking up user profile for user ID "%s": %s.',
    USER_PROFILE_SAVE_ERROR: '%s: Error while saving user profile for user ID "%s": %s.',
    VARIABLE_KEY_NOT_IN_DATAFILE: '%s: Variable with key "%s" associated with feature with key "%s" is not in datafile.',
    VARIATION_ID_NOT_IN_DATAFILE: '%s: No variation ID %s defined in datafile for experiment %s.',
    VARIATION_ID_NOT_IN_DATAFILE_NO_EXPERIMENT: '%s: Variation ID %s is not in the datafile.',
    INVALID_INPUT_FORMAT: '%s: Provided %s is in an invalid format.',
    INVALID_DATAFILE_VERSION: '%s: This version of the JavaScript SDK does not support the given datafile version: %s',
    INVALID_VARIATION_KEY: '%s: Provided variation key is in an invalid format.',
  };

  exports.LOG_MESSAGES = {
    ACTIVATE_USER: '%s: Activating user %s in experiment %s.',
    DISPATCH_CONVERSION_EVENT: '%s: Dispatching conversion event to URL %s with params %s.',
    DISPATCH_IMPRESSION_EVENT: '%s: Dispatching impression event to URL %s with params %s.',
    DEPRECATED_EVENT_VALUE: '%s: Event value is deprecated in %s call.',
    EXPERIMENT_NOT_RUNNING: '%s: Experiment %s is not running.',
    FEATURE_ENABLED_FOR_USER: '%s: Feature %s is enabled for user %s.',
    FEATURE_NOT_ENABLED_FOR_USER: '%s: Feature %s is not enabled for user %s.',
    FEATURE_HAS_NO_EXPERIMENTS: '%s: Feature %s is not attached to any experiments.',
    FAILED_TO_PARSE_VALUE: '%s: Failed to parse event value "%s" from event tags.',
    FAILED_TO_PARSE_REVENUE: '%s: Failed to parse revenue value "%s" from event tags.',
    FORCED_BUCKETING_FAILED: '%s: Variation key %s is not in datafile. Not activating user %s.',
    INVALID_OBJECT: '%s: Optimizely object is not valid. Failing %s.',
    INVALID_CLIENT_ENGINE: '%s: Invalid client engine passed: %s. Defaulting to node-sdk.',
    INVALID_VARIATION_ID: '%s: Bucketed into an invalid variation ID. Returning null.',
    NOTIFICATION_LISTENER_EXCEPTION: '%s: Notification listener for (%s) threw exception: %s',
    NO_ROLLOUT_EXISTS: '%s: There is no rollout of feature %s.',
    NOT_ACTIVATING_USER: '%s: Not activating user %s for experiment %s.',
    NOT_TRACKING_USER: '%s: Not tracking user %s.',
    PARSED_REVENUE_VALUE: '%s: Parsed revenue value "%s" from event tags.',
    PARSED_NUMERIC_VALUE: '%s: Parsed event value "%s" from event tags.',
    RETURNING_STORED_VARIATION: '%s: Returning previously activated variation "%s" of experiment "%s" for user "%s" from user profile.',
    ROLLOUT_HAS_NO_EXPERIMENTS: '%s: Rollout of feature %s has no experiments',
    SAVED_VARIATION: '%s: Saved variation "%s" of experiment "%s" for user "%s".',
    SAVED_VARIATION_NOT_FOUND: '%s: User %s was previously bucketed into variation with ID %s for experiment %s, but no matching variation was found.',
    SHOULD_NOT_DISPATCH_ACTIVATE: '%s: Experiment %s is not in "Running" state. Not activating user.',
    SKIPPING_JSON_VALIDATION: '%s: Skipping JSON schema validation.',
    TRACK_EVENT: '%s: Tracking event %s for user %s.',
    USER_ASSIGNED_TO_VARIATION_BUCKET: '%s: Assigned variation bucket %s to user %s.',
    USER_ASSIGNED_TO_EXPERIMENT_BUCKET: '%s: Assigned experiment bucket %s to user %s.',
    USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP: '%s: User %s is in experiment %s of group %s.',
    USER_BUCKETED_INTO_TARGETING_RULE: '%s: User %s bucketed into targeting rule %s.',
    USER_IN_FEATURE_EXPERIMENT: '%s: User %s is in variation %s of experiment %s on the feature %s.',
    USER_IN_ROLLOUT: '%s: User %s is in rollout of feature %s.',
    USER_BUCKETED_INTO_EVERYONE_TARGETING_RULE: '%s: User %s bucketed into everyone targeting rule.',
    USER_NOT_BUCKETED_INTO_EVERYONE_TARGETING_RULE: '%s: User %s not bucketed into everyone targeting rule due to traffic allocation.',
    USER_NOT_BUCKETED_INTO_EXPERIMENT_IN_GROUP: '%s: User %s is not in experiment %s of group %s.',
    USER_NOT_BUCKETED_INTO_ANY_EXPERIMENT_IN_GROUP: '%s: User %s is not in any experiment of group %s.',
    USER_NOT_BUCKETED_INTO_TARGETING_RULE: '%s User %s not bucketed into targeting rule %s due to traffic allocation. Trying everyone rule.',
    USER_NOT_IN_FEATURE_EXPERIMENT: '%s: User %s is not in any experiment on the feature %s.',
    USER_NOT_IN_ROLLOUT: '%s: User %s is not in rollout of feature %s.',
    USER_FORCED_IN_VARIATION: '%s: User %s is forced in variation %s.',
    USER_MAPPED_TO_FORCED_VARIATION: '%s: Set variation %s for experiment %s and user %s in the forced variation map.',
    USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE: '%s: User %s does not meet conditions for targeting rule %s.',
    USER_MEETS_CONDITIONS_FOR_TARGETING_RULE: '%s: User %s meets conditions for targeting rule %s.',
    USER_HAS_VARIATION: '%s: User %s is in variation %s of experiment %s.',
    USER_HAS_FORCED_VARIATION: '%s: Variation %s is mapped to experiment %s and user %s in the forced variation map.',
    USER_HAS_NO_VARIATION: '%s: User %s is in no variation of experiment %s.',
    USER_HAS_NO_FORCED_VARIATION: '%s: User %s is not in the forced variation map.',
    USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT: '%s: No experiment %s mapped to user %s in the forced variation map.',
    USER_NOT_IN_ANY_EXPERIMENT: '%s: User %s is not in any experiment of group %s.',
    USER_NOT_IN_EXPERIMENT: '%s: User %s does not meet conditions to be in experiment %s.',
    USER_RECEIVED_DEFAULT_VARIABLE_VALUE: '%s: User "%s" is not in any variation or rollout rule. Returning default value for variable "%s" of feature flag "%s".',
    FEATURE_NOT_ENABLED_RETURN_DEFAULT_VARIABLE_VALUE: '%s: Feature "%s" is not enabled for user %s. Returning default value for variable "%s".',
    VARIABLE_NOT_USED_RETURN_DEFAULT_VARIABLE_VALUE: '%s: Variable "%s" is not used in variation "%s". Returning default value.',
    USER_RECEIVED_VARIABLE_VALUE: '%s: Value for variable "%s" of feature flag "%s" is %s for user "%s"',
    VALID_DATAFILE: '%s: Datafile is valid.',
    VALID_USER_PROFILE_SERVICE: '%s: Valid user profile service provided.',
    VARIATION_REMOVED_FOR_USER: '%s: Variation mapped to experiment %s has been removed for user %s.',
    VARIABLE_REQUESTED_WITH_WRONG_TYPE: '%s: Requested variable type "%s", but variable is of type "%s". Use correct API to retrieve value. Returning None.',
    VALID_BUCKETING_ID: '%s: BucketingId is valid: "%s"',
    BUCKETING_ID_NOT_STRING: '%s: BucketingID attribute is not a string. Defaulted to userId',
    EVALUATING_AUDIENCE: '%s: Starting to evaluate audience "%s" with conditions: %s.',
    EVALUATING_AUDIENCES_COMBINED: '%s: Evaluating audiences for experiment "%s": %s.',
    AUDIENCE_EVALUATION_RESULT: '%s: Audience "%s" evaluated to %s.',
    AUDIENCE_EVALUATION_RESULT_COMBINED: '%s: Audiences for experiment %s collectively evaluated to %s.',
    MISSING_ATTRIBUTE_VALUE: '%s: Audience condition %s evaluated to UNKNOWN because no value was passed for user attribute "%s".',
    UNEXPECTED_CONDITION_VALUE: '%s: Audience condition %s evaluated to UNKNOWN because the condition value is not supported.',
    UNEXPECTED_TYPE: '%s: Audience condition %s evaluated to UNKNOWN because a value of type "%s" was passed for user attribute "%s".',
    UNEXPECTED_TYPE_NULL: '%s: Audience condition %s evaluated to UNKNOWN because a null value was passed for user attribute "%s".',
    UNKNOWN_CONDITION_TYPE: '%s: Audience condition %s has an unknown condition type. You may need to upgrade to a newer release of the Optimizely SDK.',
    UNKNOWN_MATCH_TYPE: '%s: Audience condition %s uses an unknown match type. You may need to upgrade to a newer release of the Optimizely SDK.',
    UPDATED_OPTIMIZELY_CONFIG: '%s: Updated Optimizely config to revision %s (project id %s)',
    OUT_OF_BOUNDS: '%s: Audience condition %s evaluated to UNKNOWN because the number value for user attribute "%s" is not in the range [-2^53, +2^53].',
    UNABLE_TO_ATTACH_UNLOAD: '%s: unable to bind optimizely.close() to page unload event: "%s"',
  };

  exports.RESERVED_EVENT_KEYWORDS = {
    REVENUE: 'revenue',
    VALUE: 'value',
  };

  exports.CONTROL_ATTRIBUTES = {
    BOT_FILTERING: '$opt_bot_filtering',
    BUCKETING_ID: '$opt_bucketing_id',
    STICKY_BUCKETING_KEY: '$opt_experiment_bucket_map',
    USER_AGENT: '$opt_user_agent',
  };

  exports.JAVASCRIPT_CLIENT_ENGINE = 'javascript-sdk';
  exports.NODE_CLIENT_ENGINE = 'node-sdk';
  exports.REACT_CLIENT_ENGINE = 'react-sdk';
  exports.NODE_CLIENT_VERSION = '3.4.1';

  exports.VALID_CLIENT_ENGINES = [
    exports.NODE_CLIENT_ENGINE,
    exports.REACT_CLIENT_ENGINE,
    exports.JAVASCRIPT_CLIENT_ENGINE,
  ];

  exports.NOTIFICATION_TYPES = lib$2.NOTIFICATION_TYPES;

  exports.DECISION_NOTIFICATION_TYPES = {
    AB_TEST: 'ab-test',
    FEATURE: 'feature',
    FEATURE_TEST: 'feature-test',
    FEATURE_VARIABLE: 'feature-variable',
  };

  /*
   * Represents the source of a decision for feature management. When a feature
   * is accessed through isFeatureEnabled or getVariableValue APIs, the decision
   * source is used to decide whether to dispatch an impression event to
   * Optimizely.
   */
  exports.DECISION_SOURCES = {
    FEATURE_TEST: 'feature-test',
    ROLLOUT: 'rollout',
  };

  /*
   * Possible types of variables attached to features
   */
  exports.FEATURE_VARIABLE_TYPES = {
    BOOLEAN: 'boolean',
    DOUBLE: 'double',
    INTEGER: 'integer',
    STRING: 'string',
  };

  /*
   * Supported datafile versions
   */
  exports.DATAFILE_VERSIONS = {
    V2: '2',
    V3: '3',
    V4: '4',
  };
  });
  var enums_1 = enums.LOG_LEVEL;
  var enums_2 = enums.ERROR_MESSAGES;
  var enums_3 = enums.LOG_MESSAGES;
  var enums_4 = enums.RESERVED_EVENT_KEYWORDS;
  var enums_5 = enums.CONTROL_ATTRIBUTES;
  var enums_6 = enums.JAVASCRIPT_CLIENT_ENGINE;
  var enums_7 = enums.NODE_CLIENT_ENGINE;
  var enums_8 = enums.REACT_CLIENT_ENGINE;
  var enums_9 = enums.NODE_CLIENT_VERSION;
  var enums_10 = enums.VALID_CLIENT_ENGINES;
  var enums_11 = enums.NOTIFICATION_TYPES;
  var enums_12 = enums.DECISION_NOTIFICATION_TYPES;
  var enums_13 = enums.DECISION_SOURCES;
  var enums_14 = enums.FEATURE_VARIABLE_TYPES;
  var enums_15 = enums.DATAFILE_VERSIONS;

  /**
   * Copyright 2016, 2018, 2019 Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var sprintf = lib$2.sprintf;

  var ERROR_MESSAGES = enums.ERROR_MESSAGES;
  var MODULE_NAME = 'CONFIG_VALIDATOR';
  var DATAFILE_VERSIONS = enums.DATAFILE_VERSIONS;

  var SUPPORTED_VERSIONS = [
    DATAFILE_VERSIONS.V2,
    DATAFILE_VERSIONS.V3,
    DATAFILE_VERSIONS.V4
  ];

  /**
   * Provides utility methods for validating that the configuration options are valid
   */
  var config_validator = {
    /**
     * Validates the given config options
     * @param  {Object} config
     * @param  {Object} config.errorHandler
     * @param  {Object} config.eventDispatcher
     * @param  {Object} config.logger
     * @return {Boolean} True if the config options are valid
     * @throws If any of the config options are not valid
     */
    validate: function(config) {
      if (config.errorHandler && (typeof config.errorHandler.handleError !== 'function')) {
        throw new Error(sprintf(ERROR_MESSAGES.INVALID_ERROR_HANDLER, MODULE_NAME));
      }

      if (config.eventDispatcher && (typeof config.eventDispatcher.dispatchEvent !== 'function')) {
        throw new Error(sprintf(ERROR_MESSAGES.INVALID_EVENT_DISPATCHER, MODULE_NAME));
      }

      if (config.logger && (typeof config.logger.log !== 'function')) {
        throw new Error(sprintf(ERROR_MESSAGES.INVALID_LOGGER, MODULE_NAME));
      }

      return true;
    },

    /**
     * Validates the datafile
     * @param {string}  datafile
     * @return {Boolean} True if the datafile is valid
     * @throws If the datafile is not valid for any of the following reasons:
                  - The datafile string is undefined
                  - The datafile string cannot be parsed as a JSON object
                  - The datafile version is not supported
     */
    validateDatafile: function(datafile) {
      if (!datafile) {
        throw new Error(sprintf(ERROR_MESSAGES.NO_DATAFILE_SPECIFIED, MODULE_NAME));
      }

      if (typeof datafile === 'string' || datafile instanceof String) {
        // Attempt to parse the datafile string
        try {
          datafile = JSON.parse(datafile);
        } catch (ex) {
          throw new Error(sprintf(ERROR_MESSAGES.INVALID_DATAFILE_MALFORMED, MODULE_NAME));
        }
      }

      if (SUPPORTED_VERSIONS.indexOf(datafile.version) === -1) {
        throw new Error(sprintf(ERROR_MESSAGES.INVALID_DATAFILE_VERSION, MODULE_NAME, datafile.version));
      }

      return true;
    }
  };

  /**
   * Copyright 2016, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Default error handler implementation
   */
  var error_handler = {
    /**
     * Handle given exception
     * @param  {Object} exception An exception object
     */
    handleError: function() {
      // no-op
    }
  };

  /**
   * Copyright 2016-2018, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */




  var index_node = {
    /**
     * Dispatch an HTTP request to the given url and the specified options
     * @param {Object}  eventObj          Event object containing
     * @param {string}  eventObj.url      the url to make the request to
     * @param {Object}  eventObj.params   parameters to pass to the request (i.e. in the POST body)
     * @param {string}  eventObj.httpVerb the HTTP request method type. only POST is supported.
     * @param {function} callback         callback to execute
     * @return {ClientRequest|undefined}          ClientRequest object which made the request, or undefined if no request was made (error)
     */
    dispatchEvent: function(eventObj, callback) {
      // Non-POST requests not supported
      if (eventObj.httpVerb !== 'POST') {
        return;
      }

      var parsedUrl = url.parse(eventObj.url);

      var dataString = JSON.stringify(eventObj.params);

      var requestOptions = {
        host: parsedUrl.host,
        path: parsedUrl.path,
        method: 'POST',
        headers: {
          'content-type': 'application/json',
          'content-length': dataString.length.toString(),
        }
      };

      var requestCallback = function(response) {
        if (response && response.statusCode && response.statusCode >= 200 && response.statusCode < 400) {
          callback(response);
        }
      };

      var req = (parsedUrl.protocol === 'http:' ? http : https).request(requestOptions, requestCallback);
      // Add no-op error listener to prevent this from throwing
      req.on('error', function() {});
      req.write(dataString);
      req.end();
      return req;
    }
  };

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  var _freeGlobal = freeGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = _freeGlobal || freeSelf || Function('return this')();

  var _root = root;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsFinite = _root.isFinite;

  /**
   * Checks if `value` is a finite primitive number.
   *
   * **Note:** This method is based on
   * [`Number.isFinite`](https://mdn.io/Number/isFinite).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
   * @example
   *
   * _.isFinite(3);
   * // => true
   *
   * _.isFinite(Number.MIN_VALUE);
   * // => true
   *
   * _.isFinite(Infinity);
   * // => false
   *
   * _.isFinite('3');
   * // => false
   */
  function isFinite(value) {
    return typeof value == 'number' && nativeIsFinite(value);
  }

  var _isFinite = isFinite;

  /** Built-in value references. */
  var Symbol$1 = _root.Symbol;

  var _Symbol = Symbol$1;

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;

  /** Built-in value references. */
  var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }

  var _getRawTag = getRawTag;

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$1.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString$1.call(value);
  }

  var _objectToString = objectToString;

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag$1 && symToStringTag$1 in Object(value))
      ? _getRawTag(value)
      : _objectToString(value);
  }

  var _baseGetTag = baseGetTag;

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  var isObject_1 = isObject;

  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    if (!isObject_1(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = _baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  var isFunction_1 = isFunction;

  /** Used to detect overreaching core-js shims. */
  var coreJsData = _root['__core-js_shared__'];

  var _coreJsData = coreJsData;

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  var _isMasked = isMasked;

  /** Used for built-in method references. */
  var funcProto = Function.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  var _toSource = toSource;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for built-in method references. */
  var funcProto$1 = Function.prototype,
      objectProto$2 = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$1 = funcProto$1.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$1 = objectProto$2.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject_1(value) || _isMasked(value)) {
      return false;
    }
    var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
    return pattern.test(_toSource(value));
  }

  var _baseIsNative = baseIsNative;

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  var _getValue = getValue;

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = _getValue(object, key);
    return _baseIsNative(value) ? value : undefined;
  }

  var _getNative = getNative;

  var defineProperty$1 = (function() {
    try {
      var func = _getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }());

  var _defineProperty = defineProperty$1;

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && _defineProperty) {
      _defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  var _baseAssignValue = baseAssignValue;

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  var eq_1 = eq;

  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$2 = objectProto$3.hasOwnProperty;

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty$2.call(object, key) && eq_1(objValue, value)) ||
        (value === undefined && !(key in object))) {
      _baseAssignValue(object, key, value);
    }
  }

  var _assignValue = assignValue;

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = customizer
        ? customizer(object[key], source[key], key, object, source)
        : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        _baseAssignValue(object, key, newValue);
      } else {
        _assignValue(object, key, newValue);
      }
    }
    return object;
  }

  var _copyObject = copyObject;

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }

  var identity_1 = identity;

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  var _apply = apply;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */
  function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return _apply(func, this, otherArgs);
    };
  }

  var _overRest = overRest;

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant(value) {
    return function() {
      return value;
    };
  }

  var constant_1 = constant;

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var baseSetToString = !_defineProperty ? identity_1 : function(func, string) {
    return _defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant_1(string),
      'writable': true
    });
  };

  var _baseSetToString = baseSetToString;

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeNow = Date.now;

  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */
  function shortOut(func) {
    var count = 0,
        lastCalled = 0;

    return function() {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);

      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(undefined, arguments);
    };
  }

  var _shortOut = shortOut;

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var setToString = _shortOut(_baseSetToString);

  var _setToString = setToString;

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest(func, start) {
    return _setToString(_overRest(func, start, identity_1), func + '');
  }

  var _baseRest = baseRest;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  var isLength_1 = isLength;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength_1(value.length) && !isFunction_1(value);
  }

  var isArrayLike_1 = isArrayLike;

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER$1 : length;

    return !!length &&
      (type == 'number' ||
        (type != 'symbol' && reIsUint.test(value))) &&
          (value > -1 && value % 1 == 0 && value < length);
  }

  var _isIndex = isIndex;

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!isObject_1(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number'
          ? (isArrayLike_1(object) && _isIndex(index, object.length))
          : (type == 'string' && index in object)
        ) {
      return eq_1(object[index], value);
    }
    return false;
  }

  var _isIterateeCall = isIterateeCall;

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner(assigner) {
    return _baseRest(function(object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;

      customizer = (assigner.length > 3 && typeof customizer == 'function')
        ? (length--, customizer)
        : undefined;

      if (guard && _isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  var _createAssigner = createAssigner;

  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype;

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$4;

    return value === proto;
  }

  var _isPrototype = isPrototype;

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  var _baseTimes = baseTimes;

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  var isObjectLike_1 = isObjectLike;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]';

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike_1(value) && _baseGetTag(value) == argsTag;
  }

  var _baseIsArguments = baseIsArguments;

  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto$5.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$5.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
    return isObjectLike_1(value) && hasOwnProperty$3.call(value, 'callee') &&
      !propertyIsEnumerable.call(value, 'callee');
  };

  var isArguments_1 = isArguments;

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;

  var isArray_1 = isArray;

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  var stubFalse_1 = stubFalse;

  var isBuffer_1 = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports = exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? _root.Buffer : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse_1;

  module.exports = isBuffer;
  });

  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag$1 = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike_1(value) &&
      isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
  }

  var _baseIsTypedArray = baseIsTypedArray;

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  var _baseUnary = baseUnary;

  var _nodeUtil = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports = exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && _freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  module.exports = nodeUtil;
  });

  /* Node.js helper references. */
  var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

  var isTypedArray_1 = isTypedArray;

  /** Used for built-in method references. */
  var objectProto$6 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$4 = objectProto$6.hasOwnProperty;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray_1(value),
        isArg = !isArr && isArguments_1(value),
        isBuff = !isArr && !isArg && isBuffer_1(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray_1(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? _baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$4.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             _isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }

  var _arrayLikeKeys = arrayLikeKeys;

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  var _overArg = overArg;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = _overArg(Object.keys, Object);

  var _nativeKeys = nativeKeys;

  /** Used for built-in method references. */
  var objectProto$7 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$5 = objectProto$7.hasOwnProperty;

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!_isPrototype(object)) {
      return _nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$5.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  var _baseKeys = baseKeys;

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object) : _baseKeys(object);
  }

  var keys_1 = keys;

  /** Used for built-in method references. */
  var objectProto$8 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$6 = objectProto$8.hasOwnProperty;

  /**
   * Assigns own enumerable string keyed properties of source objects to the
   * destination object. Source objects are applied from left to right.
   * Subsequent sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object` and is loosely based on
   * [`Object.assign`](https://mdn.io/Object/assign).
   *
   * @static
   * @memberOf _
   * @since 0.10.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.assignIn
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * function Bar() {
   *   this.c = 3;
   * }
   *
   * Foo.prototype.b = 2;
   * Bar.prototype.d = 4;
   *
   * _.assign({ 'a': 0 }, new Foo, new Bar);
   * // => { 'a': 1, 'c': 3 }
   */
  var assign = _createAssigner(function(object, source) {
    if (_isPrototype(source) || isArrayLike_1(source)) {
      _copyObject(source, keys_1(source), object);
      return;
    }
    for (var key in source) {
      if (hasOwnProperty$6.call(source, key)) {
        _assignValue(object, key, source[key]);
      }
    }
  });

  var assign_1 = assign;

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }

  var _nativeKeysIn = nativeKeysIn;

  /** Used for built-in method references. */
  var objectProto$9 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$7 = objectProto$9.hasOwnProperty;

  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn(object) {
    if (!isObject_1(object)) {
      return _nativeKeysIn(object);
    }
    var isProto = _isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$7.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  var _baseKeysIn = baseKeysIn;

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn$1(object) {
    return isArrayLike_1(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
  }

  var keysIn_1 = keysIn$1;

  /**
   * This method is like `_.assign` except that it iterates over own and
   * inherited source properties.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @alias extend
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.assign
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * function Bar() {
   *   this.c = 3;
   * }
   *
   * Foo.prototype.b = 2;
   * Bar.prototype.d = 4;
   *
   * _.assignIn({ 'a': 0 }, new Foo, new Bar);
   * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
   */
  var assignIn = _createAssigner(function(object, source) {
    _copyObject(source, keysIn_1(source), object);
  });

  var assignIn_1 = assignIn;

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  var _listCacheClear = listCacheClear;

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq_1(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  var _assocIndexOf = assocIndexOf;

  /** Used for built-in method references. */
  var arrayProto = Array.prototype;

  /** Built-in value references. */
  var splice = arrayProto.splice;

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  var _listCacheDelete = listCacheDelete;

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  var _listCacheGet = listCacheGet;

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return _assocIndexOf(this.__data__, key) > -1;
  }

  var _listCacheHas = listCacheHas;

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = _assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  var _listCacheSet = listCacheSet;

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = _listCacheClear;
  ListCache.prototype['delete'] = _listCacheDelete;
  ListCache.prototype.get = _listCacheGet;
  ListCache.prototype.has = _listCacheHas;
  ListCache.prototype.set = _listCacheSet;

  var _ListCache = ListCache;

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new _ListCache;
    this.size = 0;
  }

  var _stackClear = stackClear;

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);

    this.size = data.size;
    return result;
  }

  var _stackDelete = stackDelete;

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  var _stackGet = stackGet;

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  var _stackHas = stackHas;

  /* Built-in method references that are verified to be native. */
  var Map = _getNative(_root, 'Map');

  var _Map = Map;

  /* Built-in method references that are verified to be native. */
  var nativeCreate = _getNative(Object, 'create');

  var _nativeCreate = nativeCreate;

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
    this.size = 0;
  }

  var _hashClear = hashClear;

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  var _hashDelete = hashDelete;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used for built-in method references. */
  var objectProto$a = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$8 = objectProto$a.hasOwnProperty;

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (_nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty$8.call(data, key) ? data[key] : undefined;
  }

  var _hashGet = hashGet;

  /** Used for built-in method references. */
  var objectProto$b = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$9 = objectProto$b.hasOwnProperty;

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$9.call(data, key);
  }

  var _hashHas = hashHas;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
    return this;
  }

  var _hashSet = hashSet;

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = _hashClear;
  Hash.prototype['delete'] = _hashDelete;
  Hash.prototype.get = _hashGet;
  Hash.prototype.has = _hashHas;
  Hash.prototype.set = _hashSet;

  var _Hash = Hash;

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new _Hash,
      'map': new (_Map || _ListCache),
      'string': new _Hash
    };
  }

  var _mapCacheClear = mapCacheClear;

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  var _isKeyable = isKeyable;

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return _isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  var _getMapData = getMapData;

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    var result = _getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  var _mapCacheDelete = mapCacheDelete;

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return _getMapData(this, key).get(key);
  }

  var _mapCacheGet = mapCacheGet;

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return _getMapData(this, key).has(key);
  }

  var _mapCacheHas = mapCacheHas;

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    var data = _getMapData(this, key),
        size = data.size;

    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  var _mapCacheSet = mapCacheSet;

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = _mapCacheClear;
  MapCache.prototype['delete'] = _mapCacheDelete;
  MapCache.prototype.get = _mapCacheGet;
  MapCache.prototype.has = _mapCacheHas;
  MapCache.prototype.set = _mapCacheSet;

  var _MapCache = MapCache;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof _ListCache) {
      var pairs = data.__data__;
      if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new _MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }

  var _stackSet = stackSet;

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    var data = this.__data__ = new _ListCache(entries);
    this.size = data.size;
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = _stackClear;
  Stack.prototype['delete'] = _stackDelete;
  Stack.prototype.get = _stackGet;
  Stack.prototype.has = _stackHas;
  Stack.prototype.set = _stackSet;

  var _Stack = Stack;

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  var _arrayEach = arrayEach;

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssign(object, source) {
    return object && _copyObject(source, keys_1(source), object);
  }

  var _baseAssign = baseAssign;

  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssignIn(object, source) {
    return object && _copyObject(source, keysIn_1(source), object);
  }

  var _baseAssignIn = baseAssignIn;

  var _cloneBuffer = createCommonjsModule(function (module, exports) {
  /** Detect free variable `exports`. */
  var freeExports = exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? _root.Buffer : undefined,
      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

  /**
   * Creates a clone of  `buffer`.
   *
   * @private
   * @param {Buffer} buffer The buffer to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Buffer} Returns the cloned buffer.
   */
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

    buffer.copy(result);
    return result;
  }

  module.exports = cloneBuffer;
  });

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;

    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  var _copyArray = copyArray;

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  var _arrayFilter = arrayFilter;

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  var stubArray_1 = stubArray;

  /** Used for built-in method references. */
  var objectProto$c = Object.prototype;

  /** Built-in value references. */
  var propertyIsEnumerable$1 = objectProto$c.propertyIsEnumerable;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols = !nativeGetSymbols ? stubArray_1 : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return _arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable$1.call(object, symbol);
    });
  };

  var _getSymbols = getSymbols;

  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbols(source, object) {
    return _copyObject(source, _getSymbols(source), object);
  }

  var _copySymbols = copySymbols;

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  var _arrayPush = arrayPush;

  /** Built-in value references. */
  var getPrototype = _overArg(Object.getPrototypeOf, Object);

  var _getPrototype = getPrototype;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbolsIn = !nativeGetSymbols$1 ? stubArray_1 : function(object) {
    var result = [];
    while (object) {
      _arrayPush(result, _getSymbols(object));
      object = _getPrototype(object);
    }
    return result;
  };

  var _getSymbolsIn = getSymbolsIn;

  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbolsIn(source, object) {
    return _copyObject(source, _getSymbolsIn(source), object);
  }

  var _copySymbolsIn = copySymbolsIn;

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray_1(object) ? result : _arrayPush(result, symbolsFunc(object));
  }

  var _baseGetAllKeys = baseGetAllKeys;

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return _baseGetAllKeys(object, keys_1, _getSymbols);
  }

  var _getAllKeys = getAllKeys;

  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeysIn(object) {
    return _baseGetAllKeys(object, keysIn_1, _getSymbolsIn);
  }

  var _getAllKeysIn = getAllKeysIn;

  /* Built-in method references that are verified to be native. */
  var DataView = _getNative(_root, 'DataView');

  var _DataView = DataView;

  /* Built-in method references that are verified to be native. */
  var Promise$1 = _getNative(_root, 'Promise');

  var _Promise = Promise$1;

  /* Built-in method references that are verified to be native. */
  var Set = _getNative(_root, 'Set');

  var _Set = Set;

  /* Built-in method references that are verified to be native. */
  var WeakMap = _getNative(_root, 'WeakMap');

  var _WeakMap = WeakMap;

  /** `Object#toString` result references. */
  var mapTag$1 = '[object Map]',
      objectTag$1 = '[object Object]',
      promiseTag = '[object Promise]',
      setTag$1 = '[object Set]',
      weakMapTag$1 = '[object WeakMap]';

  var dataViewTag$1 = '[object DataView]';

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = _toSource(_DataView),
      mapCtorString = _toSource(_Map),
      promiseCtorString = _toSource(_Promise),
      setCtorString = _toSource(_Set),
      weakMapCtorString = _toSource(_WeakMap);

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag = _baseGetTag;

  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$1) ||
      (_Map && getTag(new _Map) != mapTag$1) ||
      (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
      (_Set && getTag(new _Set) != setTag$1) ||
      (_WeakMap && getTag(new _WeakMap) != weakMapTag$1)) {
    getTag = function(value) {
      var result = _baseGetTag(value),
          Ctor = result == objectTag$1 ? value.constructor : undefined,
          ctorString = Ctor ? _toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString: return dataViewTag$1;
          case mapCtorString: return mapTag$1;
          case promiseCtorString: return promiseTag;
          case setCtorString: return setTag$1;
          case weakMapCtorString: return weakMapTag$1;
        }
      }
      return result;
    };
  }

  var _getTag = getTag;

  /** Used for built-in method references. */
  var objectProto$d = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$a = objectProto$d.hasOwnProperty;

  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray(array) {
    var length = array.length,
        result = new array.constructor(length);

    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty$a.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }

  var _initCloneArray = initCloneArray;

  /** Built-in value references. */
  var Uint8Array = _root.Uint8Array;

  var _Uint8Array = Uint8Array;

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
    return result;
  }

  var _cloneArrayBuffer = cloneArrayBuffer;

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  var _cloneDataView = cloneDataView;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  var _cloneRegExp = cloneRegExp;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }

  var _cloneSymbol = cloneSymbol;

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  var _cloneTypedArray = cloneTypedArray;

  /** `Object#toString` result references. */
  var boolTag$1 = '[object Boolean]',
      dateTag$1 = '[object Date]',
      mapTag$2 = '[object Map]',
      numberTag$1 = '[object Number]',
      regexpTag$1 = '[object RegExp]',
      setTag$2 = '[object Set]',
      stringTag$1 = '[object String]',
      symbolTag = '[object Symbol]';

  var arrayBufferTag$1 = '[object ArrayBuffer]',
      dataViewTag$2 = '[object DataView]',
      float32Tag$1 = '[object Float32Array]',
      float64Tag$1 = '[object Float64Array]',
      int8Tag$1 = '[object Int8Array]',
      int16Tag$1 = '[object Int16Array]',
      int32Tag$1 = '[object Int32Array]',
      uint8Tag$1 = '[object Uint8Array]',
      uint8ClampedTag$1 = '[object Uint8ClampedArray]',
      uint16Tag$1 = '[object Uint16Array]',
      uint32Tag$1 = '[object Uint32Array]';

  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag(object, tag, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag$1:
        return _cloneArrayBuffer(object);

      case boolTag$1:
      case dateTag$1:
        return new Ctor(+object);

      case dataViewTag$2:
        return _cloneDataView(object, isDeep);

      case float32Tag$1: case float64Tag$1:
      case int8Tag$1: case int16Tag$1: case int32Tag$1:
      case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
        return _cloneTypedArray(object, isDeep);

      case mapTag$2:
        return new Ctor;

      case numberTag$1:
      case stringTag$1:
        return new Ctor(object);

      case regexpTag$1:
        return _cloneRegExp(object);

      case setTag$2:
        return new Ctor;

      case symbolTag:
        return _cloneSymbol(object);
    }
  }

  var _initCloneByTag = initCloneByTag;

  /** Built-in value references. */
  var objectCreate = Object.create;

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate = (function() {
    function object() {}
    return function(proto) {
      if (!isObject_1(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object;
      object.prototype = undefined;
      return result;
    };
  }());

  var _baseCreate = baseCreate;

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject(object) {
    return (typeof object.constructor == 'function' && !_isPrototype(object))
      ? _baseCreate(_getPrototype(object))
      : {};
  }

  var _initCloneObject = initCloneObject;

  /** `Object#toString` result references. */
  var mapTag$3 = '[object Map]';

  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */
  function baseIsMap(value) {
    return isObjectLike_1(value) && _getTag(value) == mapTag$3;
  }

  var _baseIsMap = baseIsMap;

  /* Node.js helper references. */
  var nodeIsMap = _nodeUtil && _nodeUtil.isMap;

  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */
  var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;

  var isMap_1 = isMap;

  /** `Object#toString` result references. */
  var setTag$3 = '[object Set]';

  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */
  function baseIsSet(value) {
    return isObjectLike_1(value) && _getTag(value) == setTag$3;
  }

  var _baseIsSet = baseIsSet;

  /* Node.js helper references. */
  var nodeIsSet = _nodeUtil && _nodeUtil.isSet;

  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */
  var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;

  var isSet_1 = isSet;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** `Object#toString` result references. */
  var argsTag$2 = '[object Arguments]',
      arrayTag$1 = '[object Array]',
      boolTag$2 = '[object Boolean]',
      dateTag$2 = '[object Date]',
      errorTag$1 = '[object Error]',
      funcTag$2 = '[object Function]',
      genTag$1 = '[object GeneratorFunction]',
      mapTag$4 = '[object Map]',
      numberTag$2 = '[object Number]',
      objectTag$2 = '[object Object]',
      regexpTag$2 = '[object RegExp]',
      setTag$4 = '[object Set]',
      stringTag$2 = '[object String]',
      symbolTag$1 = '[object Symbol]',
      weakMapTag$2 = '[object WeakMap]';

  var arrayBufferTag$2 = '[object ArrayBuffer]',
      dataViewTag$3 = '[object DataView]',
      float32Tag$2 = '[object Float32Array]',
      float64Tag$2 = '[object Float64Array]',
      int8Tag$2 = '[object Int8Array]',
      int16Tag$2 = '[object Int16Array]',
      int32Tag$2 = '[object Int32Array]',
      uint8Tag$2 = '[object Uint8Array]',
      uint8ClampedTag$2 = '[object Uint8ClampedArray]',
      uint16Tag$2 = '[object Uint16Array]',
      uint32Tag$2 = '[object Uint32Array]';

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag$2] = cloneableTags[arrayTag$1] =
  cloneableTags[arrayBufferTag$2] = cloneableTags[dataViewTag$3] =
  cloneableTags[boolTag$2] = cloneableTags[dateTag$2] =
  cloneableTags[float32Tag$2] = cloneableTags[float64Tag$2] =
  cloneableTags[int8Tag$2] = cloneableTags[int16Tag$2] =
  cloneableTags[int32Tag$2] = cloneableTags[mapTag$4] =
  cloneableTags[numberTag$2] = cloneableTags[objectTag$2] =
  cloneableTags[regexpTag$2] = cloneableTags[setTag$4] =
  cloneableTags[stringTag$2] = cloneableTags[symbolTag$1] =
  cloneableTags[uint8Tag$2] = cloneableTags[uint8ClampedTag$2] =
  cloneableTags[uint16Tag$2] = cloneableTags[uint32Tag$2] = true;
  cloneableTags[errorTag$1] = cloneableTags[funcTag$2] =
  cloneableTags[weakMapTag$2] = false;

  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone(value, bitmask, customizer, key, object, stack) {
    var result,
        isDeep = bitmask & CLONE_DEEP_FLAG,
        isFlat = bitmask & CLONE_FLAT_FLAG,
        isFull = bitmask & CLONE_SYMBOLS_FLAG;

    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== undefined) {
      return result;
    }
    if (!isObject_1(value)) {
      return value;
    }
    var isArr = isArray_1(value);
    if (isArr) {
      result = _initCloneArray(value);
      if (!isDeep) {
        return _copyArray(value, result);
      }
    } else {
      var tag = _getTag(value),
          isFunc = tag == funcTag$2 || tag == genTag$1;

      if (isBuffer_1(value)) {
        return _cloneBuffer(value, isDeep);
      }
      if (tag == objectTag$2 || tag == argsTag$2 || (isFunc && !object)) {
        result = (isFlat || isFunc) ? {} : _initCloneObject(value);
        if (!isDeep) {
          return isFlat
            ? _copySymbolsIn(value, _baseAssignIn(result, value))
            : _copySymbols(value, _baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = _initCloneByTag(value, tag, isDeep);
      }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new _Stack);
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);

    if (isSet_1(value)) {
      value.forEach(function(subValue) {
        result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
      });

      return result;
    }

    if (isMap_1(value)) {
      value.forEach(function(subValue, key) {
        result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });

      return result;
    }

    var keysFunc = isFull
      ? (isFlat ? _getAllKeysIn : _getAllKeys)
      : (isFlat ? keysIn : keys_1);

    var props = isArr ? undefined : keysFunc(value);
    _arrayEach(props || value, function(subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }
      // Recursively populate clone (susceptible to call stack limits).
      _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  var _baseClone = baseClone;

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$1 = 1,
      CLONE_SYMBOLS_FLAG$1 = 4;

  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */
  function cloneDeep(value) {
    return _baseClone(value, CLONE_DEEP_FLAG$1 | CLONE_SYMBOLS_FLAG$1);
  }

  var cloneDeep_1 = cloneDeep;

  /** `Object#toString` result references. */
  var mapTag$5 = '[object Map]',
      setTag$5 = '[object Set]';

  /** Used for built-in method references. */
  var objectProto$e = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$b = objectProto$e.hasOwnProperty;

  /**
   * Checks if `value` is an empty object, collection, map, or set.
   *
   * Objects are considered empty if they have no own enumerable string keyed
   * properties.
   *
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or
   * jQuery-like collections are considered empty if they have a `length` of `0`.
   * Similarly, maps and sets are considered empty if they have a `size` of `0`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */
  function isEmpty(value) {
    if (value == null) {
      return true;
    }
    if (isArrayLike_1(value) &&
        (isArray_1(value) || typeof value == 'string' || typeof value.splice == 'function' ||
          isBuffer_1(value) || isTypedArray_1(value) || isArguments_1(value))) {
      return !value.length;
    }
    var tag = _getTag(value);
    if (tag == mapTag$5 || tag == setTag$5) {
      return !value.size;
    }
    if (_isPrototype(value)) {
      return !_baseKeys(value).length;
    }
    for (var key in value) {
      if (hasOwnProperty$b.call(value, key)) {
        return false;
      }
    }
    return true;
  }

  var isEmpty_1 = isEmpty;

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  var _arrayAggregator = arrayAggregator;

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  var _createBaseFor = createBaseFor;

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = _createBaseFor();

  var _baseFor = baseFor;

  /**
   * The base implementation of `_.forOwn` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwn(object, iteratee) {
    return object && _baseFor(object, iteratee, keys_1);
  }

  var _baseForOwn = baseForOwn;

  /**
   * Creates a `baseEach` or `baseEachRight` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike_1(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length,
          index = fromRight ? length : -1,
          iterable = Object(collection);

      while ((fromRight ? index-- : ++index < length)) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }

  var _createBaseEach = createBaseEach;

  /**
   * The base implementation of `_.forEach` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   */
  var baseEach = _createBaseEach(_baseForOwn);

  var _baseEach = baseEach;

  /**
   * Aggregates elements of `collection` on `accumulator` with keys transformed
   * by `iteratee` and values set by `setter`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function baseAggregator(collection, setter, iteratee, accumulator) {
    _baseEach(collection, function(value, key, collection) {
      setter(accumulator, value, iteratee(value), collection);
    });
    return accumulator;
  }

  var _baseAggregator = baseAggregator;

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED$2);
    return this;
  }

  var _setCacheAdd = setCacheAdd;

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  var _setCacheHas = setCacheHas;

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new _MapCache;
    while (++index < length) {
      this.add(values[index]);
    }
  }

  // Add methods to `SetCache`.
  SetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;
  SetCache.prototype.has = _setCacheHas;

  var _SetCache = SetCache;

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  var _arraySome = arraySome;

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  var _cacheHas = cacheHas;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(array);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var index = -1,
        result = true,
        seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new _SetCache : undefined;

    stack.set(array, other);
    stack.set(other, array);

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, arrValue, index, other, array, stack)
          : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!_arraySome(other, function(othValue, othIndex) {
              if (!_cacheHas(seen, othIndex) &&
                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
          result = false;
          break;
        }
      } else if (!(
            arrValue === othValue ||
              equalFunc(arrValue, othValue, bitmask, customizer, stack)
          )) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  var _equalArrays = equalArrays;

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  var _mapToArray = mapToArray;

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  var _setToArray = setToArray;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$1 = 1,
      COMPARE_UNORDERED_FLAG$1 = 2;

  /** `Object#toString` result references. */
  var boolTag$3 = '[object Boolean]',
      dateTag$3 = '[object Date]',
      errorTag$2 = '[object Error]',
      mapTag$6 = '[object Map]',
      numberTag$3 = '[object Number]',
      regexpTag$3 = '[object RegExp]',
      setTag$6 = '[object Set]',
      stringTag$3 = '[object String]',
      symbolTag$2 = '[object Symbol]';

  var arrayBufferTag$3 = '[object ArrayBuffer]',
      dataViewTag$4 = '[object DataView]';

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$1 = _Symbol ? _Symbol.prototype : undefined,
      symbolValueOf$1 = symbolProto$1 ? symbolProto$1.valueOf : undefined;

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag$4:
        if ((object.byteLength != other.byteLength) ||
            (object.byteOffset != other.byteOffset)) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag$3:
        if ((object.byteLength != other.byteLength) ||
            !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {
          return false;
        }
        return true;

      case boolTag$3:
      case dateTag$3:
      case numberTag$3:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq_1(+object, +other);

      case errorTag$2:
        return object.name == other.name && object.message == other.message;

      case regexpTag$3:
      case stringTag$3:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == (other + '');

      case mapTag$6:
        var convert = _mapToArray;

      case setTag$6:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
        convert || (convert = _setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG$1;

        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other);
        var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag$2:
        if (symbolValueOf$1) {
          return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);
        }
    }
    return false;
  }

  var _equalByTag = equalByTag;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$2 = 1;

  /** Used for built-in method references. */
  var objectProto$f = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$c = objectProto$f.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
        objProps = _getAllKeys(object),
        objLength = objProps.length,
        othProps = _getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty$c.call(other, key))) {
        return false;
      }
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(object);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);

    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, objValue, key, other, object, stack)
          : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined
            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
            : compared
          )) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  var _equalObjects = equalObjects;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$3 = 1;

  /** `Object#toString` result references. */
  var argsTag$3 = '[object Arguments]',
      arrayTag$2 = '[object Array]',
      objectTag$3 = '[object Object]';

  /** Used for built-in method references. */
  var objectProto$g = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$d = objectProto$g.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray_1(object),
        othIsArr = isArray_1(other),
        objTag = objIsArr ? arrayTag$2 : _getTag(object),
        othTag = othIsArr ? arrayTag$2 : _getTag(other);

    objTag = objTag == argsTag$3 ? objectTag$3 : objTag;
    othTag = othTag == argsTag$3 ? objectTag$3 : othTag;

    var objIsObj = objTag == objectTag$3,
        othIsObj = othTag == objectTag$3,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer_1(object)) {
      if (!isBuffer_1(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new _Stack);
      return (objIsArr || isTypedArray_1(object))
        ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack)
        : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
      var objIsWrapped = objIsObj && hasOwnProperty$d.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty$d.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;

        stack || (stack = new _Stack);
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new _Stack);
    return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  var _baseIsEqualDeep = baseIsEqualDeep;

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObjectLike_1(value) && !isObjectLike_1(other))) {
      return value !== value && other !== other;
    }
    return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  var _baseIsEqual = baseIsEqual;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$4 = 1,
      COMPARE_UNORDERED_FLAG$2 = 2;

  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */
  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if ((noCustomizer && data[2])
            ? data[1] !== object[data[0]]
            : !(data[0] in object)
          ) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new _Stack;
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === undefined
              ? _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$4 | COMPARE_UNORDERED_FLAG$2, customizer, stack)
              : result
            )) {
          return false;
        }
      }
    }
    return true;
  }

  var _baseIsMatch = baseIsMatch;

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */
  function isStrictComparable(value) {
    return value === value && !isObject_1(value);
  }

  var _isStrictComparable = isStrictComparable;

  /**
   * Gets the property names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */
  function getMatchData(object) {
    var result = keys_1(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];

      result[length] = [key, value, _isStrictComparable(value)];
    }
    return result;
  }

  var _getMatchData = getMatchData;

  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function matchesStrictComparable(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue &&
        (srcValue !== undefined || (key in Object(object)));
    };
  }

  var _matchesStrictComparable = matchesStrictComparable;

  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatches(source) {
    var matchData = _getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return _matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source || _baseIsMatch(object, source, matchData);
    };
  }

  var _baseMatches = baseMatches;

  /** `Object#toString` result references. */
  var symbolTag$3 = '[object Symbol]';

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike_1(value) && _baseGetTag(value) == symbolTag$3);
  }

  var isSymbol_1 = isSymbol;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    if (isArray_1(value)) {
      return false;
    }
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' ||
        value == null || isSymbol_1(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
      (object != null && value in Object(object));
  }

  var _isKey = isKey;

  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize(func, resolver) {
    if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize.Cache || _MapCache);
    return memoized;
  }

  // Expose `MapCache`.
  memoize.Cache = _MapCache;

  var memoize_1 = memoize;

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */
  function memoizeCapped(func) {
    var result = memoize_1(func, function(key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });

    var cache = result.cache;
    return result;
  }

  var _memoizeCapped = memoizeCapped;

  /** Used to match property names within property paths. */
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath = _memoizeCapped(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */) {
      result.push('');
    }
    string.replace(rePropName, function(match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
    });
    return result;
  });

  var _stringToPath = stringToPath;

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  var _arrayMap = arrayMap;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$2 = _Symbol ? _Symbol.prototype : undefined,
      symbolToString = symbolProto$2 ? symbolProto$2.toString : undefined;

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isArray_1(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return _arrayMap(value, baseToString) + '';
    }
    if (isSymbol_1(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }

  var _baseToString = baseToString;

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString(value) {
    return value == null ? '' : _baseToString(value);
  }

  var toString_1 = toString;

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath(value, object) {
    if (isArray_1(value)) {
      return value;
    }
    return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
  }

  var _castPath = castPath;

  /** Used as references for various `Number` constants. */
  var INFINITY$1 = 1 / 0;

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey(value) {
    if (typeof value == 'string' || isSymbol_1(value)) {
      return value;
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
  }

  var _toKey = toKey;

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet(object, path) {
    path = _castPath(path, object);

    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[_toKey(path[index++])];
    }
    return (index && index == length) ? object : undefined;
  }

  var _baseGet = baseGet;

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get(object, path, defaultValue) {
    var result = object == null ? undefined : _baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  var get_1 = get;

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  var _baseHasIn = baseHasIn;

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */
  function hasPath(object, path, hasFunc) {
    path = _castPath(path, object);

    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = _toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object == null ? 0 : object.length;
    return !!length && isLength_1(length) && _isIndex(key, length) &&
      (isArray_1(object) || isArguments_1(object));
  }

  var _hasPath = hasPath;

  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */
  function hasIn(object, path) {
    return object != null && _hasPath(object, path, _baseHasIn);
  }

  var hasIn_1 = hasIn;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$5 = 1,
      COMPARE_UNORDERED_FLAG$3 = 2;

  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatchesProperty(path, srcValue) {
    if (_isKey(path) && _isStrictComparable(srcValue)) {
      return _matchesStrictComparable(_toKey(path), srcValue);
    }
    return function(object) {
      var objValue = get_1(object, path);
      return (objValue === undefined && objValue === srcValue)
        ? hasIn_1(object, path)
        : _baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$5 | COMPARE_UNORDERED_FLAG$3);
    };
  }

  var _baseMatchesProperty = baseMatchesProperty;

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  var _baseProperty = baseProperty;

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyDeep(path) {
    return function(object) {
      return _baseGet(object, path);
    };
  }

  var _basePropertyDeep = basePropertyDeep;

  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */
  function property(path) {
    return _isKey(path) ? _baseProperty(_toKey(path)) : _basePropertyDeep(path);
  }

  var property_1 = property;

  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */
  function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value;
    }
    if (value == null) {
      return identity_1;
    }
    if (typeof value == 'object') {
      return isArray_1(value)
        ? _baseMatchesProperty(value[0], value[1])
        : _baseMatches(value);
    }
    return property_1(value);
  }

  var _baseIteratee = baseIteratee;

  /**
   * Creates a function like `_.groupBy`.
   *
   * @private
   * @param {Function} setter The function to set accumulator values.
   * @param {Function} [initializer] The accumulator object initializer.
   * @returns {Function} Returns the new aggregator function.
   */
  function createAggregator(setter, initializer) {
    return function(collection, iteratee) {
      var func = isArray_1(collection) ? _arrayAggregator : _baseAggregator,
          accumulator = initializer ? initializer() : {};

      return func(collection, setter, _baseIteratee(iteratee), accumulator);
    };
  }

  var _createAggregator = createAggregator;

  /**
   * Creates an object composed of keys generated from the results of running
   * each element of `collection` thru `iteratee`. The corresponding value of
   * each key is the last element responsible for generating the key. The
   * iteratee is invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
   * @returns {Object} Returns the composed aggregate object.
   * @example
   *
   * var array = [
   *   { 'dir': 'left', 'code': 97 },
   *   { 'dir': 'right', 'code': 100 }
   * ];
   *
   * _.keyBy(array, function(o) {
   *   return String.fromCharCode(o.code);
   * });
   * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
   *
   * _.keyBy(array, 'dir');
   * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
   */
  var keyBy = _createAggregator(function(result, value, key) {
    _baseAssignValue(result, key, value);
  });

  var keyBy_1 = keyBy;

  /**
   * The base implementation of `_.filter` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function baseFilter(collection, predicate) {
    var result = [];
    _baseEach(collection, function(value, index, collection) {
      if (predicate(value, index, collection)) {
        result.push(value);
      }
    });
    return result;
  }

  var _baseFilter = baseFilter;

  /**
   * Iterates over elements of `collection`, returning an array of all elements
   * `predicate` returns truthy for. The predicate is invoked with three
   * arguments: (value, index|key, collection).
   *
   * **Note:** Unlike `_.remove`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   * @see _.reject
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': true },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * _.filter(users, function(o) { return !o.active; });
   * // => objects for ['fred']
   *
   * // The `_.matches` iteratee shorthand.
   * _.filter(users, { 'age': 36, 'active': true });
   * // => objects for ['barney']
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.filter(users, ['active', false]);
   * // => objects for ['fred']
   *
   * // The `_.property` iteratee shorthand.
   * _.filter(users, 'active');
   * // => objects for ['barney']
   */
  function filter(collection, predicate) {
    var func = isArray_1(collection) ? _arrayFilter : _baseFilter;
    return func(collection, _baseIteratee(predicate));
  }

  var filter_1 = filter;

  /**
   * Casts `value` to `identity` if it's not a function.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Function} Returns cast function.
   */
  function castFunction(value) {
    return typeof value == 'function' ? value : identity_1;
  }

  var _castFunction = castFunction;

  /**
   * Iterates over elements of `collection` and invokes `iteratee` for each element.
   * The iteratee is invoked with three arguments: (value, index|key, collection).
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * **Note:** As with other "Collections" methods, objects with a "length"
   * property are iterated like arrays. To avoid this behavior use `_.forIn`
   * or `_.forOwn` for object iteration.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @alias each
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   * @see _.forEachRight
   * @example
   *
   * _.forEach([1, 2], function(value) {
   *   console.log(value);
   * });
   * // => Logs `1` then `2`.
   *
   * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
   *   console.log(key);
   * });
   * // => Logs 'a' then 'b' (iteration order is not guaranteed).
   */
  function forEach(collection, iteratee) {
    var func = isArray_1(collection) ? _arrayEach : _baseEach;
    return func(collection, _castFunction(iteratee));
  }

  var forEach_1 = forEach;

  /**
   * Iterates over own enumerable string keyed properties of an object and
   * invokes `iteratee` for each property. The iteratee is invoked with three
   * arguments: (value, key, object). Iteratee functions may exit iteration
   * early by explicitly returning `false`.
   *
   * @static
   * @memberOf _
   * @since 0.3.0
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Object} Returns `object`.
   * @see _.forOwnRight
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.forOwn(new Foo, function(value, key) {
   *   console.log(key);
   * });
   * // => Logs 'a' then 'b' (iteration order is not guaranteed).
   */
  function forOwn(object, iteratee) {
    return object && _baseForOwn(object, _castFunction(iteratee));
  }

  var forOwn_1 = forOwn;

  /**
   * The base implementation of `_.map` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function baseMap(collection, iteratee) {
    var index = -1,
        result = isArrayLike_1(collection) ? Array(collection.length) : [];

    _baseEach(collection, function(value, key, collection) {
      result[++index] = iteratee(value, key, collection);
    });
    return result;
  }

  var _baseMap = baseMap;

  /**
   * Creates an array of values by running each element in `collection` thru
   * `iteratee`. The iteratee is invoked with three arguments:
   * (value, index|key, collection).
   *
   * Many lodash methods are guarded to work as iteratees for methods like
   * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
   *
   * The guarded methods are:
   * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
   * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
   * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
   * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * _.map([4, 8], square);
   * // => [16, 64]
   *
   * _.map({ 'a': 4, 'b': 8 }, square);
   * // => [16, 64] (iteration order is not guaranteed)
   *
   * var users = [
   *   { 'user': 'barney' },
   *   { 'user': 'fred' }
   * ];
   *
   * // The `_.property` iteratee shorthand.
   * _.map(users, 'user');
   * // => ['barney', 'fred']
   */
  function map(collection, iteratee) {
    var func = isArray_1(collection) ? _arrayMap : _baseMap;
    return func(collection, _baseIteratee(iteratee));
  }

  var map_1 = map;

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return _arrayMap(props, function(key) {
      return object[key];
    });
  }

  var _baseValues = baseValues;

  /**
   * Creates an array of the own enumerable string keyed property values of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property values.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.values(new Foo);
   * // => [1, 2] (iteration order is not guaranteed)
   *
   * _.values('hi');
   * // => ['h', 'i']
   */
  function values(object) {
    return object == null ? [] : _baseValues(object, keys_1(object));
  }

  var values_1 = values;

  /** `Object#toString` result references. */
  var numberTag$4 = '[object Number]';

  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
   * classified as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a number, else `false`.
   * @example
   *
   * _.isNumber(3);
   * // => true
   *
   * _.isNumber(Number.MIN_VALUE);
   * // => true
   *
   * _.isNumber(Infinity);
   * // => true
   *
   * _.isNumber('3');
   * // => false
   */
  function isNumber(value) {
    return typeof value == 'number' ||
      (isObjectLike_1(value) && _baseGetTag(value) == numberTag$4);
  }

  var isNumber_1 = isNumber;

  /**
   * Copyright 2017, 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */


  var MAX_NUMBER_LIMIT = Math.pow(2, 53);

  var fns = {
    assign: assign_1,
    assignIn: assignIn_1,
    cloneDeep: cloneDeep_1,
    currentTimestamp: function() {
      return Math.round(new Date().getTime());
    },
    isArray: isArray_1,
    isEmpty: isEmpty_1,
    isFinite: function(number) {
      return _isFinite(number) && Math.abs(number) <= MAX_NUMBER_LIMIT;
    },
    keyBy: keyBy_1,
    filter: filter_1,
    forEach: forEach_1,
    forOwn: forOwn_1,
    map: map_1,
    uuid: function() {
      return uuid_1.v4();
    },
    values: values_1,
    isNumber: isNumber_1,
  };

  var validate = createCommonjsModule(function (module) {
  /**
   * JSONSchema Validator - Validates JavaScript objects using JSON Schemas
   *	(http://www.json.com/json-schema-proposal/)
   *
   * Copyright (c) 2007 Kris Zyp SitePen (www.sitepen.com)
   * Licensed under the MIT (MIT-LICENSE.txt) license.
  To use the validator call the validate function with an instance object and an optional schema object.
  If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
  that schema will be used to validate and the schema parameter is not necessary (if both exist,
  both validations will occur).
  The validate method will return an array of validation errors. If there are no errors, then an
  empty list will be returned. A validation error will have two properties:
  "property" which indicates which property had the error
  "message" which indicates what the error was
   */
  (function (root, factory) {
      if (module.exports) {
          // Node. Does not work with strict CommonJS, but
          // only CommonJS-like environments that support module.exports,
          // like Node.
          module.exports = factory();
      } else {
          // Browser globals
          root.jsonSchema = factory();
      }
  }(commonjsGlobal, function () {// setup primitive classes to be JSON Schema types
  var exports = validate;
  exports.Integer = {type:"integer"};
  var primitiveConstructors = {
  	String: String,
  	Boolean: Boolean,
  	Number: Number,
  	Object: Object,
  	Array: Array,
  	Date: Date
  };
  exports.validate = validate;
  function validate(/*Any*/instance,/*Object*/schema) {
  		// Summary:
  		//  	To use the validator call JSONSchema.validate with an instance object and an optional schema object.
  		// 		If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
  		// 		that schema will be used to validate and the schema parameter is not necessary (if both exist,
  		// 		both validations will occur).
  		// 		The validate method will return an object with two properties:
  		// 			valid: A boolean indicating if the instance is valid by the schema
  		// 			errors: An array of validation errors. If there are no errors, then an
  		// 					empty list will be returned. A validation error will have two properties:
  		// 						property: which indicates which property had the error
  		// 						message: which indicates what the error was
  		//
  		return validate(instance, schema, {changing: false});//, coerce: false, existingOnly: false});
  	}exports.checkPropertyChange = function(/*Any*/value,/*Object*/schema, /*String*/property) {
  		// Summary:
  		// 		The checkPropertyChange method will check to see if an value can legally be in property with the given schema
  		// 		This is slightly different than the validate method in that it will fail if the schema is readonly and it will
  		// 		not check for self-validation, it is assumed that the passed in value is already internally valid.
  		// 		The checkPropertyChange method will return the same object type as validate, see JSONSchema.validate for
  		// 		information.
  		//
  		return validate(value, schema, {changing: property || "property"});
  	};
  var validate = exports._validate = function(/*Any*/instance,/*Object*/schema,/*Object*/options) {

  	if (!options) options = {};
  	var _changing = options.changing;

  	function getType(schema){
  		return schema.type || (primitiveConstructors[schema.name] == schema && schema.name.toLowerCase());
  	}
  	var errors = [];
  	// validate a value against a property definition
  	function checkProp(value, schema, path,i){

  		var l;
  		path += path ? typeof i == 'number' ? '[' + i + ']' : typeof i == 'undefined' ? '' : '.' + i : i;
  		function addError(message){
  			errors.push({property:path,message:message});
  		}

  		if((typeof schema != 'object' || schema instanceof Array) && (path || typeof schema != 'function') && !(schema && getType(schema))){
  			if(typeof schema == 'function'){
  				if(!(value instanceof schema)){
  					addError("is not an instance of the class/constructor " + schema.name);
  				}
  			}else if(schema){
  				addError("Invalid schema/property definition " + schema);
  			}
  			return null;
  		}
  		if(_changing && schema.readonly){
  			addError("is a readonly field, it can not be changed");
  		}
  		if(schema['extends']){ // if it extends another schema, it must pass that schema as well
  			checkProp(value,schema['extends'],path,i);
  		}
  		// validate a value against a type definition
  		function checkType(type,value){
  			if(type){
  				if(typeof type == 'string' && type != 'any' &&
  						(type == 'null' ? value !== null : typeof value != type) &&
  						!(value instanceof Array && type == 'array') &&
  						!(value instanceof Date && type == 'date') &&
  						!(type == 'integer' && value%1===0)){
  					return [{property:path,message:(typeof value) + " value found, but a " + type + " is required"}];
  				}
  				if(type instanceof Array){
  					var unionErrors=[];
  					for(var j = 0; j < type.length; j++){ // a union type
  						if(!(unionErrors=checkType(type[j],value)).length){
  							break;
  						}
  					}
  					if(unionErrors.length){
  						return unionErrors;
  					}
  				}else if(typeof type == 'object'){
  					var priorErrors = errors;
  					errors = [];
  					checkProp(value,type,path);
  					var theseErrors = errors;
  					errors = priorErrors;
  					return theseErrors;
  				}
  			}
  			return [];
  		}
  		if(value === undefined){
  			if(schema.required){
  				addError("is missing and it is required");
  			}
  		}else{
  			errors = errors.concat(checkType(getType(schema),value));
  			if(schema.disallow && !checkType(schema.disallow,value).length){
  				addError(" disallowed value was matched");
  			}
  			if(value !== null){
  				if(value instanceof Array){
  					if(schema.items){
  						var itemsIsArray = schema.items instanceof Array;
  						var propDef = schema.items;
  						for (i = 0, l = value.length; i < l; i += 1) {
  							if (itemsIsArray)
  								propDef = schema.items[i];
  							if (options.coerce)
  								value[i] = options.coerce(value[i], propDef);
  							errors.concat(checkProp(value[i],propDef,path,i));
  						}
  					}
  					if(schema.minItems && value.length < schema.minItems){
  						addError("There must be a minimum of " + schema.minItems + " in the array");
  					}
  					if(schema.maxItems && value.length > schema.maxItems){
  						addError("There must be a maximum of " + schema.maxItems + " in the array");
  					}
  				}else if(schema.properties || schema.additionalProperties){
  					errors.concat(checkObj(value, schema.properties, path, schema.additionalProperties));
  				}
  				if(schema.pattern && typeof value == 'string' && !value.match(schema.pattern)){
  					addError("does not match the regex pattern " + schema.pattern);
  				}
  				if(schema.maxLength && typeof value == 'string' && value.length > schema.maxLength){
  					addError("may only be " + schema.maxLength + " characters long");
  				}
  				if(schema.minLength && typeof value == 'string' && value.length < schema.minLength){
  					addError("must be at least " + schema.minLength + " characters long");
  				}
  				if(typeof schema.minimum !== undefined && typeof value == typeof schema.minimum &&
  						schema.minimum > value){
  					addError("must have a minimum value of " + schema.minimum);
  				}
  				if(typeof schema.maximum !== undefined && typeof value == typeof schema.maximum &&
  						schema.maximum < value){
  					addError("must have a maximum value of " + schema.maximum);
  				}
  				if(schema['enum']){
  					var enumer = schema['enum'];
  					l = enumer.length;
  					var found;
  					for(var j = 0; j < l; j++){
  						if(enumer[j]===value){
  							found=1;
  							break;
  						}
  					}
  					if(!found){
  						addError("does not have a value in the enumeration " + enumer.join(", "));
  					}
  				}
  				if(typeof schema.maxDecimal == 'number' &&
  					(value.toString().match(new RegExp("\\.[0-9]{" + (schema.maxDecimal + 1) + ",}")))){
  					addError("may only have " + schema.maxDecimal + " digits of decimal places");
  				}
  			}
  		}
  		return null;
  	}
  	// validate an object against a schema
  	function checkObj(instance,objTypeDef,path,additionalProp){

  		if(typeof objTypeDef =='object'){
  			if(typeof instance != 'object' || instance instanceof Array){
  				errors.push({property:path,message:"an object is required"});
  			}
  			
  			for(var i in objTypeDef){ 
  				if(objTypeDef.hasOwnProperty(i)){
  					var value = instance[i];
  					// skip _not_ specified properties
  					if (value === undefined && options.existingOnly) continue;
  					var propDef = objTypeDef[i];
  					// set default
  					if(value === undefined && propDef["default"]){
  						value = instance[i] = propDef["default"];
  					}
  					if(options.coerce && i in instance){
  						value = instance[i] = options.coerce(value, propDef);
  					}
  					checkProp(value,propDef,path,i);
  				}
  			}
  		}
  		for(i in instance){
  			if(instance.hasOwnProperty(i) && !(i.charAt(0) == '_' && i.charAt(1) == '_') && objTypeDef && !objTypeDef[i] && additionalProp===false){
  				if (options.filter) {
  					delete instance[i];
  					continue;
  				} else {
  					errors.push({property:path,message:(typeof value) + "The property " + i +
  						" is not defined in the schema and the schema does not allow additional properties"});
  				}
  			}
  			var requires = objTypeDef && objTypeDef[i] && objTypeDef[i].requires;
  			if(requires && !(requires in instance)){
  				errors.push({property:path,message:"the presence of the property " + i + " requires that " + requires + " also be present"});
  			}
  			value = instance[i];
  			if(additionalProp && (!(objTypeDef && typeof objTypeDef == 'object') || !(i in objTypeDef))){
  				if(options.coerce){
  					value = instance[i] = options.coerce(value, additionalProp);
  				}
  				checkProp(value,additionalProp,path,i);
  			}
  			if(!_changing && value && value.$schema){
  				errors = errors.concat(checkProp(value,value.$schema,path,i));
  			}
  		}
  		return errors;
  	}
  	if(schema){
  		checkProp(instance,schema,'',_changing || '');
  	}
  	if(!_changing && instance && instance.$schema){
  		checkProp(instance,instance.$schema,'','');
  	}
  	return {valid:!errors.length,errors:errors};
  };
  exports.mustBeValid = function(result){
  	//	summary:
  	//		This checks to ensure that the result is valid and will throw an appropriate error message if it is not
  	// result: the result returned from checkPropertyChange or validate
  	if(!result.valid){
  		throw new TypeError(result.errors.map(function(error){return "for property " + error.property + ': ' + error.message;}).join(", \n"));
  	}
  };

  return exports;
  }));
  });

  /**
   * Copyright 2016-2017, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  var validate$1 = validate.validate;
  var sprintf$1 = lib$2.sprintf;

  var ERROR_MESSAGES$1 = enums.ERROR_MESSAGES;
  var MODULE_NAME$1 = 'JSON_SCHEMA_VALIDATOR';

  var json_schema_validator = {
    /**
     * Validate the given json object against the specified schema
     * @param  {Object} jsonSchema The json schema to validate against
     * @param  {Object} jsonObject The object to validate against the schema
     * @return {Boolean}           True if the given object is valid
     */
    validate: function(jsonSchema, jsonObject) {
      if (!jsonSchema) {
        throw new Error(sprintf$1(ERROR_MESSAGES$1.JSON_SCHEMA_EXPECTED, MODULE_NAME$1));
      }

      if (!jsonObject) {
        throw new Error(sprintf$1(ERROR_MESSAGES$1.NO_JSON_PROVIDED, MODULE_NAME$1));
      }

      var result = validate$1(jsonObject, jsonSchema);
      if (result.valid) {
        return true;
      } else {
        if (fns.isArray(result.errors)) {
          throw new Error(sprintf$1(ERROR_MESSAGES$1.INVALID_DATAFILE, MODULE_NAME$1, result.errors[0].property, result.errors[0].message));
        }
        throw new Error(sprintf$1(ERROR_MESSAGES$1.INVALID_JSON, MODULE_NAME$1));
      }
    }
  };

  /**
   * Copyright 2016-2017, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */


  function NoOpLogger() {}

  NoOpLogger.prototype.log = function() {};

  var logger$2 = {
    createLogger: function(opts) {
      return new lib$1.ConsoleLogHandler(opts);
    },

    createNoOpLogger: function() {
      return new NoOpLogger();
    },
  };

  /**
   * Copyright 2016, 2018-2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Provides utility method for validating that the attributes user has provided are valid
   */

  var sprintf$2 = lib$2.sprintf;



  var ERROR_MESSAGES$2 = enums.ERROR_MESSAGES;
  var MODULE_NAME$2 = 'ATTRIBUTES_VALIDATOR';

  var attributes_validator = {
    /**
     * Validates user's provided attributes
     * @param  {Object}  attributes
     * @return {boolean} True if the attributes are valid
     * @throws If the attributes are not valid
     */
    validate: function(attributes) {
      if (typeof attributes === 'object' && !Array.isArray(attributes) && attributes !== null) {
        forOwn_1(attributes, function(value, key) {
          if (typeof value === 'undefined') {
            throw new Error(sprintf$2(ERROR_MESSAGES$2.UNDEFINED_ATTRIBUTE, MODULE_NAME$2, key));
          }
        });
        return true;
      } else {
        throw new Error(sprintf$2(ERROR_MESSAGES$2.INVALID_ATTRIBUTES, MODULE_NAME$2));
      }
    },

    isAttributeValid: function(attributeKey, attributeValue) {
      return (typeof attributeKey === 'string') &&
      (typeof attributeValue === 'string' || typeof attributeValue === 'boolean' || (fns.isNumber(attributeValue) && fns.isFinite(attributeValue)));
    },
  };

  /****************************************************************************
   * Copyright 2018, Optimizely, Inc. and contributors                        *
   *                                                                          *
   * Licensed under the Apache License, Version 2.0 (the "License");          *
   * you may not use this file except in compliance with the License.         *
   * You may obtain a copy of the License at                                  *
   *                                                                          *
   *    http://www.apache.org/licenses/LICENSE-2.0                            *
   *                                                                          *
   * Unless required by applicable law or agreed to in writing, software      *
   * distributed under the License is distributed on an "AS IS" BASIS,        *
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
   * See the License for the specific language governing permissions and      *
   * limitations under the License.                                           *
   ***************************************************************************/

  var AND_CONDITION = 'and';
  var OR_CONDITION = 'or';
  var NOT_CONDITION = 'not';

  var DEFAULT_OPERATOR_TYPES = [AND_CONDITION, OR_CONDITION, NOT_CONDITION];

  /**
   * Top level method to evaluate conditions
   * @param  {Array|*}    conditions      Nested array of and/or conditions, or a single leaf
   *                                      condition value of any type
   *                                      Example: ['and', '0', ['or', '1', '2']]
   * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition
   *                                      values
   * @return {?Boolean}                   Result of evaluating the conditions using the operator
   *                                      rules and the leaf evaluator. A return value of null
   *                                      indicates that the conditions are invalid or unable to be
   *                                      evaluated
   */
  function evaluate(conditions, leafEvaluator) {
    if (Array.isArray(conditions)) {
      var firstOperator = conditions[0];
      var restOfConditions = conditions.slice(1);

      if (DEFAULT_OPERATOR_TYPES.indexOf(firstOperator) === -1) {
        // Operator to apply is not explicit - assume 'or'
        firstOperator = OR_CONDITION;
        restOfConditions = conditions;
      }

      switch (firstOperator) {
        case AND_CONDITION:
          return andEvaluator(restOfConditions, leafEvaluator);
        case NOT_CONDITION:
          return notEvaluator(restOfConditions, leafEvaluator);
        default: // firstOperator is OR_CONDITION
          return orEvaluator(restOfConditions, leafEvaluator);
      }
    }

    var leafCondition = conditions;
    return leafEvaluator(leafCondition);
  }

  /**
   * Evaluates an array of conditions as if the evaluator had been applied
   * to each entry and the results AND-ed together.
   * @param  {Array}      conditions      Array of conditions ex: [operand_1, operand_2]
   * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition values
   * @return {?Boolean}                   Result of evaluating the conditions. A return value of null
   *                                      indicates that the conditions are invalid or unable to be
   *                                      evaluated.
   */
  function andEvaluator(conditions, leafEvaluator) {
    var sawNullResult = false;
    for (var i = 0; i < conditions.length; i++) {
      var conditionResult = evaluate(conditions[i], leafEvaluator);
      if (conditionResult === false) {
        return false;
      }
      if (conditionResult === null) {
        sawNullResult = true;
      }
    }
    return sawNullResult ? null : true;
  }

  /**
   * Evaluates an array of conditions as if the evaluator had been applied
   * to a single entry and NOT was applied to the result.
   * @param  {Array}      conditions      Array of conditions ex: [operand_1]
   * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition values
   * @return {?Boolean}                   Result of evaluating the conditions. A return value of null
   *                                      indicates that the conditions are invalid or unable to be
   *                                      evaluated.
   */
  function notEvaluator(conditions, leafEvaluator) {
    if (conditions.length > 0) {
      var result = evaluate(conditions[0], leafEvaluator);
      return result === null ? null : !result;
    }
    return null;
  }

  /**
   * Evaluates an array of conditions as if the evaluator had been applied
   * to each entry and the results OR-ed together.
   * @param  {Array}      conditions      Array of conditions ex: [operand_1, operand_2]
   * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition values
   * @return {?Boolean}                   Result of evaluating the conditions. A return value of null
   *                                      indicates that the conditions are invalid or unable to be
   *                                      evaluated.
   */
  function orEvaluator(conditions, leafEvaluator) {
    var sawNullResult = false;
    for (var i = 0; i < conditions.length; i++) {
      var conditionResult = evaluate(conditions[i], leafEvaluator);
      if (conditionResult === true) {
        return true;
      }
      if (conditionResult === null) {
        sawNullResult = true;
      }
    }
    return sawNullResult ? null : false;
  }

  var condition_tree_evaluator = {
    evaluate: evaluate,
  };

  /****************************************************************************
   * Copyright 2018-2019, Optimizely, Inc. and contributors                        *
   *                                                                          *
   * Licensed under the Apache License, Version 2.0 (the "License");          *
   * you may not use this file except in compliance with the License.         *
   * You may obtain a copy of the License at                                  *
   *                                                                          *
   *    http://www.apache.org/licenses/LICENSE-2.0                            *
   *                                                                          *
   * Unless required by applicable law or agreed to in writing, software      *
   * distributed under the License is distributed on an "AS IS" BASIS,        *
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
   * See the License for the specific language governing permissions and      *
   * limitations under the License.                                           *
   ***************************************************************************/



  var sprintf$3 = lib$2.sprintf;

  var LOG_LEVEL = enums.LOG_LEVEL;
  var LOG_MESSAGES = enums.LOG_MESSAGES;
  var MODULE_NAME$3 = 'CUSTOM_ATTRIBUTE_CONDITION_EVALUATOR';

  var EXACT_MATCH_TYPE = 'exact';
  var EXISTS_MATCH_TYPE = 'exists';
  var GREATER_THAN_MATCH_TYPE = 'gt';
  var LESS_THAN_MATCH_TYPE = 'lt';
  var SUBSTRING_MATCH_TYPE = 'substring';

  var MATCH_TYPES = [
    EXACT_MATCH_TYPE,
    EXISTS_MATCH_TYPE,
    GREATER_THAN_MATCH_TYPE,
    LESS_THAN_MATCH_TYPE,
    SUBSTRING_MATCH_TYPE,
  ];

  var EVALUATORS_BY_MATCH_TYPE = {};
  EVALUATORS_BY_MATCH_TYPE[EXACT_MATCH_TYPE] = exactEvaluator;
  EVALUATORS_BY_MATCH_TYPE[EXISTS_MATCH_TYPE] = existsEvaluator;
  EVALUATORS_BY_MATCH_TYPE[GREATER_THAN_MATCH_TYPE] = greaterThanEvaluator;
  EVALUATORS_BY_MATCH_TYPE[LESS_THAN_MATCH_TYPE] = lessThanEvaluator;
  EVALUATORS_BY_MATCH_TYPE[SUBSTRING_MATCH_TYPE] = substringEvaluator;

  /**
   * Given a custom attribute audience condition and user attributes, evaluate the
   * condition against the attributes.
   * @param  {Object}     condition
   * @param  {Object}     userAttributes
   * @param  {Object}     logger
   * @return {?Boolean}   true/false if the given user attributes match/don't match the given condition,
   *                                      null if the given user attributes and condition can't be evaluated
   * TODO: Change to accept and object with named properties
   */
  function evaluate$1(condition, userAttributes, logger) {
    var conditionMatch = condition.match;
    if (typeof conditionMatch !== 'undefined' && MATCH_TYPES.indexOf(conditionMatch) === -1) {
      logger.log(LOG_LEVEL.WARNING, sprintf$3(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME$3, JSON.stringify(condition)));
      return null;
    }

    var attributeKey = condition.name;
    if (!userAttributes.hasOwnProperty(attributeKey) && conditionMatch != EXISTS_MATCH_TYPE) {
      logger.log(LOG_LEVEL.DEBUG, sprintf$3(LOG_MESSAGES.MISSING_ATTRIBUTE_VALUE, MODULE_NAME$3, JSON.stringify(condition), attributeKey));
      return null;
    }

    var evaluatorForMatch = EVALUATORS_BY_MATCH_TYPE[conditionMatch] || exactEvaluator;
    return evaluatorForMatch(condition, userAttributes, logger);
  }

  /**
   * Returns true if the value is valid for exact conditions. Valid values include
   * strings, booleans, and numbers that aren't NaN, -Infinity, or Infinity.
   * @param value
   * @returns {Boolean}
   */
  function isValueTypeValidForExactConditions(value) {
    return typeof value === 'string' || typeof value === 'boolean' ||
      fns.isNumber(value);
  }

  /**
   * Evaluate the given exact match condition for the given user attributes
   * @param   {Object}    condition
   * @param   {Object}    userAttributes
   * @param   {Object}    logger
   * @return  {?Boolean}  true if the user attribute value is equal (===) to the condition value,
   *                      false if the user attribute value is not equal (!==) to the condition value,
   *                      null if the condition value or user attribute value has an invalid type, or
   *                      if there is a mismatch between the user attribute type and the condition value
   *                      type
   */
  function exactEvaluator(condition, userAttributes, logger) {
    var conditionValue = condition.value;
    var conditionValueType = typeof conditionValue;
    var conditionName = condition.name;
    var userValue = userAttributes[conditionName];
    var userValueType = typeof userValue;

    if (!isValueTypeValidForExactConditions(conditionValue) || (fns.isNumber(conditionValue) && !fns.isFinite(conditionValue))) {
      logger.log(LOG_LEVEL.WARNING, sprintf$3(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME$3, JSON.stringify(condition)));
      return null;
    }

    if (userValue === null) {
      logger.log(LOG_LEVEL.DEBUG, sprintf$3(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME$3, JSON.stringify(condition), conditionName));
      return null;
    }

    if (!isValueTypeValidForExactConditions(userValue) || conditionValueType !== userValueType) {
      logger.log(LOG_LEVEL.WARNING, sprintf$3(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME$3, JSON.stringify(condition), userValueType, conditionName));
      return null;
    }

    if (fns.isNumber(userValue) && !fns.isFinite(userValue)) {
      logger.log(LOG_LEVEL.WARNING, sprintf$3(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME$3, JSON.stringify(condition), conditionName));
      return null;
    }

    return conditionValue === userValue;
  }

  /**
   * Evaluate the given exists match condition for the given user attributes
   * @param   {Object}  condition
   * @param   {Object}  userAttributes
   * @returns {Boolean} true if both:
   *                      1) the user attributes have a value for the given condition, and
   *                      2) the user attribute value is neither null nor undefined
   *                    Returns false otherwise
   */
  function existsEvaluator(condition, userAttributes) {
    var userValue = userAttributes[condition.name];
    return typeof userValue !== 'undefined' && userValue !== null;
  }

  /**
   * Evaluate the given greater than match condition for the given user attributes
   * @param   {Object}    condition
   * @param   {Object}    userAttributes
   * @param   {Object}    logger
   * @returns {?Boolean}  true if the user attribute value is greater than the condition value,
   *                      false if the user attribute value is less than or equal to the condition value,
   *                      null if the condition value isn't a number or the user attribute value
   *                      isn't a number
   */
  function greaterThanEvaluator(condition, userAttributes, logger) {
    var conditionName = condition.name;
    var userValue = userAttributes[conditionName];
    var userValueType = typeof userValue;
    var conditionValue = condition.value;

    if (!fns.isFinite(conditionValue)) {
      logger.log(LOG_LEVEL.WARNING, sprintf$3(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME$3, JSON.stringify(condition)));
      return null;
    }

    if (userValue === null) {
      logger.log(LOG_LEVEL.DEBUG, sprintf$3(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME$3, JSON.stringify(condition), conditionName));
      return null;
    }

    if (!fns.isNumber(userValue)) {
      logger.log(LOG_LEVEL.WARNING, sprintf$3(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME$3, JSON.stringify(condition), userValueType, conditionName));
      return null;
    }

    if (!fns.isFinite(userValue)) {
      logger.log(LOG_LEVEL.WARNING, sprintf$3(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME$3, JSON.stringify(condition), conditionName));
      return null;
    }

    return userValue > conditionValue;
  }

  /**
   * Evaluate the given less than match condition for the given user attributes
   * @param   {Object}    condition
   * @param   {Object}    userAttributes
   * @param   {Object}    logger
   * @returns {?Boolean}  true if the user attribute value is less than the condition value,
   *                      false if the user attribute value is greater than or equal to the condition value,
   *                      null if the condition value isn't a number or the user attribute value isn't a
   *                      number
   */
  function lessThanEvaluator(condition, userAttributes, logger) {
    var conditionName = condition.name;
    var userValue = userAttributes[condition.name];
    var userValueType = typeof userValue;
    var conditionValue = condition.value;

    if (!fns.isFinite(conditionValue)) {
      logger.log(LOG_LEVEL.WARNING, sprintf$3(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME$3, JSON.stringify(condition)));
      return null;
    }

    if (userValue === null) {
      logger.log(LOG_LEVEL.DEBUG, sprintf$3(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME$3, JSON.stringify(condition), conditionName));
      return null;
    }

    if (!fns.isNumber(userValue)) {
      logger.log(LOG_LEVEL.WARNING, sprintf$3(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME$3, JSON.stringify(condition), userValueType, conditionName));
      return null;
    }

    if (!fns.isFinite(userValue)) {
      logger.log(LOG_LEVEL.WARNING, sprintf$3(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME$3, JSON.stringify(condition), conditionName));
      return null;
    }

    return userValue < conditionValue;
  }

  /**
   * Evaluate the given substring match condition for the given user attributes
   * @param   {Object}    condition
   * @param   {Object}    userAttributes
   * @param   {Object}    logger
   * @returns {?Boolean}  true if the condition value is a substring of the user attribute value,
   *                      false if the condition value is not a substring of the user attribute value,
   *                      null if the condition value isn't a string or the user attribute value
   *                      isn't a string
   */
  function substringEvaluator(condition, userAttributes, logger) {
    var conditionName = condition.name;
    var userValue = userAttributes[condition.name];
    var userValueType = typeof userValue;
    var conditionValue = condition.value;

    if (typeof conditionValue !== 'string') {
      logger.log(LOG_LEVEL.WARNING, sprintf$3(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME$3, JSON.stringify(condition)));
      return null;
    }

    if (userValue === null) {
      logger.log(LOG_LEVEL.DEBUG, sprintf$3(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME$3, JSON.stringify(condition), conditionName));
      return null;
    }

    if (typeof userValue !== 'string') {
      logger.log(LOG_LEVEL.WARNING, sprintf$3(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME$3, JSON.stringify(condition), userValueType, conditionName));
      return null;
    }

    return userValue.indexOf(conditionValue) !== -1;
  }

  var custom_attribute_condition_evaluator = {
    evaluate: evaluate$1
  };

  /**
   * Copyright 2016, 2018-2019 Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */




  var sprintf$4 = lib$2.sprintf;

  var logger$3 = lib$1.getLogger();

  var ERROR_MESSAGES$3 = enums.ERROR_MESSAGES;
  var LOG_LEVEL$1 = enums.LOG_LEVEL;
  var LOG_MESSAGES$1 = enums.LOG_MESSAGES;
  var MODULE_NAME$4 = 'AUDIENCE_EVALUATOR';


  /**
   * Construct an instance of AudienceEvaluator with given options
   * @param {Object=} UNSTABLE_conditionEvaluators A map of condition evaluators provided by the consumer. This enables matching
   *                                                   condition types which are not supported natively by the SDK. Note that built in
   *                                                   Optimizely evaluators cannot be overridden.
   * @constructor
   */
  function AudienceEvaluator(UNSTABLE_conditionEvaluators) {
    this.typeToEvaluatorMap = fns.assignIn({}, UNSTABLE_conditionEvaluators, {
      'custom_attribute': custom_attribute_condition_evaluator
    });
  }

  /**
   * Determine if the given user attributes satisfy the given audience conditions
   * @param  {Array|String|null|undefined}  audienceConditions    Audience conditions to match the user attributes against - can be an array
   *                                                              of audience IDs, a nested array of conditions, or a single leaf condition.
   *                                                              Examples: ["5", "6"], ["and", ["or", "1", "2"], "3"], "1"
   * @param  {Object}                       audiencesById         Object providing access to full audience objects for audience IDs
   *                                                              contained in audienceConditions. Keys should be audience IDs, values
   *                                                              should be full audience objects with conditions properties
   * @param  {Object}                       [userAttributes]      User attributes which will be used in determining if audience conditions
   *                                                              are met. If not provided, defaults to an empty object
   * @return {Boolean}                                            true if the user attributes match the given audience conditions, false
   *                                                              otherwise
   */
  AudienceEvaluator.prototype.evaluate = function(audienceConditions, audiencesById, userAttributes) {
    // if there are no audiences, return true because that means ALL users are included in the experiment
    if (!audienceConditions || audienceConditions.length === 0) {
      return true;
    }

    if (!userAttributes) {
      userAttributes = {};
    }

    var evaluateAudience = function(audienceId) {
      var audience = audiencesById[audienceId];
      if (audience) {
        logger$3.log(LOG_LEVEL$1.DEBUG, sprintf$4(LOG_MESSAGES$1.EVALUATING_AUDIENCE, MODULE_NAME$4, audienceId, JSON.stringify(audience.conditions)));
        var result = condition_tree_evaluator.evaluate(audience.conditions, this.evaluateConditionWithUserAttributes.bind(this, userAttributes));
        var resultText = result === null ? 'UNKNOWN' : result.toString().toUpperCase();
        logger$3.log(LOG_LEVEL$1.INFO, sprintf$4(LOG_MESSAGES$1.AUDIENCE_EVALUATION_RESULT, MODULE_NAME$4, audienceId, resultText));
        return result;
      }

      return null;
    }.bind(this);

    return condition_tree_evaluator.evaluate(audienceConditions, evaluateAudience) || false;
  };

  /**
   * Wrapper around evaluator.evaluate that is passed to the conditionTreeEvaluator.
   * Evaluates the condition provided given the user attributes if an evaluator has been defined for the condition type.
   * @param  {Object} userAttributes     A map of user attributes.
   * @param  {Object} condition          A single condition object to evaluate.
   * @return {Boolean|null}              true if the condition is satisfied, null if a matcher is not found.
   */
  AudienceEvaluator.prototype.evaluateConditionWithUserAttributes = function(userAttributes, condition) {
    var evaluator = this.typeToEvaluatorMap[condition.type];
    if (!evaluator) {
      logger$3.log(LOG_LEVEL$1.WARNING, sprintf$4(LOG_MESSAGES$1.UNKNOWN_CONDITION_TYPE, MODULE_NAME$4, JSON.stringify(condition)));
      return null;
    }
    try {
      return evaluator.evaluate(condition, userAttributes, logger$3);
    } catch (err) {
      logger$3.log(LOG_LEVEL$1.ERROR, sprintf$4(ERROR_MESSAGES$3.CONDITION_EVALUATOR_ERROR, MODULE_NAME$4, condition.type, err.message));
    }
    return null;
  };

  var audience_evaluator = AudienceEvaluator;

  var murmurhash = createCommonjsModule(function (module) {
  (function(){

    /**
     * JS Implementation of MurmurHash2
     *
     * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
     * @see http://github.com/garycourt/murmurhash-js
     * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
     * @see http://sites.google.com/site/murmurhash/
     *
     * @param {string} str ASCII only
     * @param {number} seed Positive integer only
     * @return {number} 32-bit positive integer hash
     */
    function MurmurHashV2(str, seed) {
      var
        l = str.length,
        h = seed ^ l,
        i = 0,
        k;

      while (l >= 4) {
        k =
          ((str.charCodeAt(i) & 0xff)) |
          ((str.charCodeAt(++i) & 0xff) << 8) |
          ((str.charCodeAt(++i) & 0xff) << 16) |
          ((str.charCodeAt(++i) & 0xff) << 24);

        k = (((k & 0xffff) * 0x5bd1e995) + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16));
        k ^= k >>> 24;
        k = (((k & 0xffff) * 0x5bd1e995) + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16));

      h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16)) ^ k;

        l -= 4;
        ++i;
      }

      switch (l) {
      case 3: h ^= (str.charCodeAt(i + 2) & 0xff) << 16;
      case 2: h ^= (str.charCodeAt(i + 1) & 0xff) << 8;
      case 1: h ^= (str.charCodeAt(i) & 0xff);
              h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16));
      }

      h ^= h >>> 13;
      h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16));
      h ^= h >>> 15;

      return h >>> 0;
    }
    /**
     * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)
     *
     * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
     * @see http://github.com/garycourt/murmurhash-js
     * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
     * @see http://sites.google.com/site/murmurhash/
     *
     * @param {string} key ASCII only
     * @param {number} seed Positive integer only
     * @return {number} 32-bit positive integer hash
     */
    function MurmurHashV3(key, seed) {
      var remainder, bytes, h1, h1b, c1, c2, k1, i;

      remainder = key.length & 3; // key.length % 4
      bytes = key.length - remainder;
      h1 = seed;
      c1 = 0xcc9e2d51;
      c2 = 0x1b873593;
      i = 0;

      while (i < bytes) {
          k1 =
            ((key.charCodeAt(i) & 0xff)) |
            ((key.charCodeAt(++i) & 0xff) << 8) |
            ((key.charCodeAt(++i) & 0xff) << 16) |
            ((key.charCodeAt(++i) & 0xff) << 24);
        ++i;

        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

        h1 ^= k1;
            h1 = (h1 << 13) | (h1 >>> 19);
        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
      }

      k1 = 0;

      switch (remainder) {
        case 3: k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
        case 2: k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
        case 1: k1 ^= (key.charCodeAt(i) & 0xff);

        k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
        h1 ^= k1;
      }

      h1 ^= key.length;

      h1 ^= h1 >>> 16;
      h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
      h1 ^= h1 >>> 13;
      h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
      h1 ^= h1 >>> 16;

      return h1 >>> 0;
    }

    var murmur = MurmurHashV3;
    murmur.v2 = MurmurHashV2;
    murmur.v3 = MurmurHashV3;

    {
      module.exports = murmur;
    }
  }());
  });

  var bucketer = createCommonjsModule(function (module) {
  /**
   * Copyright 2016, 2019 Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Bucketer API for determining the variation id from the specified parameters
   */


  var sprintf = lib$2.sprintf;

  var ERROR_MESSAGES = enums.ERROR_MESSAGES;
  var HASH_SEED = 1;
  var LOG_LEVEL = enums.LOG_LEVEL;
  var LOG_MESSAGES = enums.LOG_MESSAGES;
  var MAX_HASH_VALUE = Math.pow(2, 32);
  var MAX_TRAFFIC_VALUE = 10000;
  var MODULE_NAME = 'BUCKETER';
  var RANDOM_POLICY = 'random';

  module.exports = {
    /**
     * Determines ID of variation to be shown for the given input params
     * @param  {Object}         bucketerParams
     * @param  {string}         bucketerParams.experimentId
     * @param  {string}         bucketerParams.experimentKey
     * @param  {string}         bucketerParams.userId
     * @param  {Object[]}       bucketerParams.trafficAllocationConfig
     * @param  {Array}          bucketerParams.experimentKeyMap
     * @param  {Object}         bucketerParams.groupIdMap
     * @param  {Object}         bucketerParams.variationIdMap
     * @param  {string}         bucketerParams.varationIdMap[].key
     * @param  {Object}         bucketerParams.logger
     * @param  {string}         bucketerParams.bucketingId
     * @return Variation ID that user has been bucketed into, null if user is not bucketed into any experiment
     */
    bucket: function(bucketerParams) {
      // Check if user is in a random group; if so, check if user is bucketed into a specific experiment
      var experiment = bucketerParams.experimentKeyMap[bucketerParams.experimentKey];
      var groupId = experiment['groupId'];
      if (groupId) {
        var group = bucketerParams.groupIdMap[groupId];
        if (!group) {
          throw new Error(sprintf(ERROR_MESSAGES.INVALID_GROUP_ID, MODULE_NAME, groupId));
        }
        if (group.policy === RANDOM_POLICY) {
          var bucketedExperimentId = module.exports.bucketUserIntoExperiment(group,
                                                                            bucketerParams.bucketingId,
                                                                            bucketerParams.userId,
                                                                            bucketerParams.logger);

          // Return if user is not bucketed into any experiment
          if (bucketedExperimentId === null) {
            var notbucketedInAnyExperimentLogMessage = sprintf(LOG_MESSAGES.USER_NOT_IN_ANY_EXPERIMENT, MODULE_NAME, bucketerParams.userId, groupId);
            bucketerParams.logger.log(LOG_LEVEL.INFO, notbucketedInAnyExperimentLogMessage);
            return null;
          }

          // Return if user is bucketed into a different experiment than the one specified
          if (bucketedExperimentId !== bucketerParams.experimentId) {
            var notBucketedIntoExperimentOfGroupLogMessage = sprintf(LOG_MESSAGES.USER_NOT_BUCKETED_INTO_EXPERIMENT_IN_GROUP, MODULE_NAME, bucketerParams.userId, bucketerParams.experimentKey, groupId);
            bucketerParams.logger.log(LOG_LEVEL.INFO, notBucketedIntoExperimentOfGroupLogMessage);
            return null;
          }

          // Continue bucketing if user is bucketed into specified experiment
          var bucketedIntoExperimentOfGroupLogMessage = sprintf(LOG_MESSAGES.USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP, MODULE_NAME, bucketerParams.userId, bucketerParams.experimentKey, groupId);
          bucketerParams.logger.log(LOG_LEVEL.INFO, bucketedIntoExperimentOfGroupLogMessage);
        }
      }
      var bucketingId = sprintf('%s%s', bucketerParams.bucketingId, bucketerParams.experimentId);
      var bucketValue = module.exports._generateBucketValue(bucketingId);

      var bucketedUserLogMessage = sprintf(LOG_MESSAGES.USER_ASSIGNED_TO_VARIATION_BUCKET, MODULE_NAME, bucketValue, bucketerParams.userId);
      bucketerParams.logger.log(LOG_LEVEL.DEBUG, bucketedUserLogMessage);

      var entityId = module.exports._findBucket(bucketValue, bucketerParams.trafficAllocationConfig);
      if (!entityId) {
        var userHasNoVariationLogMessage = sprintf(LOG_MESSAGES.USER_HAS_NO_VARIATION, MODULE_NAME, bucketerParams.userId, bucketerParams.experimentKey);
        bucketerParams.logger.log(LOG_LEVEL.DEBUG, userHasNoVariationLogMessage);
      } else if (!bucketerParams.variationIdMap.hasOwnProperty(entityId)) {
        var invalidVariationIdLogMessage = sprintf(LOG_MESSAGES.INVALID_VARIATION_ID, MODULE_NAME);
        bucketerParams.logger.log(LOG_LEVEL.WARNING, invalidVariationIdLogMessage);
        return null;
      } else {
        var variationKey = bucketerParams.variationIdMap[entityId].key;
        var userInVariationLogMessage = sprintf(LOG_MESSAGES.USER_HAS_VARIATION, MODULE_NAME, bucketerParams.userId, variationKey, bucketerParams.experimentKey);
        bucketerParams.logger.log(LOG_LEVEL.INFO, userInVariationLogMessage);
      }

      return entityId;
    },

    /**
     * Returns bucketed experiment ID to compare against experiment user is being called into
     * @param {Object} group        Group that experiment is in
     * @param {string} bucketingId  Bucketing ID
     * @param {string} userId       ID of user to be bucketed into experiment
     * @param {Object} logger       Logger implementation
     * @return {string} ID of experiment if user is bucketed into experiment within the group, null otherwise
     */
    bucketUserIntoExperiment: function(group, bucketingId, userId, logger) {
      var bucketingKey = sprintf('%s%s', bucketingId, group.id);
      var bucketValue = module.exports._generateBucketValue(bucketingKey);
      logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_ASSIGNED_TO_EXPERIMENT_BUCKET, MODULE_NAME, bucketValue, userId));
      var trafficAllocationConfig = group.trafficAllocation;
      var bucketedExperimentId = module.exports._findBucket(bucketValue, trafficAllocationConfig);
      return bucketedExperimentId;
    },

    /**
     * Returns entity ID associated with bucket value
     * @param  {string}   bucketValue
     * @param  {Object[]} trafficAllocationConfig
     * @param  {number}   trafficAllocationConfig[].endOfRange
     * @param  {number}   trafficAllocationConfig[].entityId
     * @return {string}   Entity ID for bucketing if bucket value is within traffic allocation boundaries, null otherwise
     */
    _findBucket: function(bucketValue, trafficAllocationConfig) {
      for (var i = 0; i < trafficAllocationConfig.length; i++) {
        if (bucketValue < trafficAllocationConfig[i].endOfRange) {
          return trafficAllocationConfig[i].entityId;
        }
      }
      return null;
    },

    /**
     * Helper function to generate bucket value in half-closed interval [0, MAX_TRAFFIC_VALUE)
     * @param  {string} bucketingKey String value for bucketing
     * @return {string} the generated bucket value
     * @throws If bucketing value is not a valid string
     */
    _generateBucketValue: function(bucketingKey) {
      try {
        // NOTE: the mmh library already does cast the hash value as an unsigned 32bit int
        // https://github.com/perezd/node-murmurhash/blob/master/murmurhash.js#L115
        var hashValue = murmurhash.v3(bucketingKey, HASH_SEED);
        var ratio = hashValue / MAX_HASH_VALUE;
        return parseInt(ratio * MAX_TRAFFIC_VALUE, 10);
      } catch (ex) {
        throw new Error(sprintf(ERROR_MESSAGES.INVALID_BUCKETING_ID, MODULE_NAME, bucketingKey, ex.message));
      }
    },
  };
  });
  var bucketer_1 = bucketer.bucket;
  var bucketer_2 = bucketer.bucketUserIntoExperiment;
  var bucketer_3 = bucketer._findBucket;
  var bucketer_4 = bucketer._generateBucketValue;

  /**
   * Copyright 2016-2017, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /*eslint-disable */
  /**
   * Project Config JSON Schema file used to validate the project json datafile
   */
  var project_config_schema = {
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
      "projectId": {
        "type": "string",
        "required": true
      },
      "accountId": {
        "type": "string",
        "required": true
      },
      "groups": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "required": true
            },
            "policy": {
              "type": "string",
              "required": true
            },
            "trafficAllocation": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "entityId": {
                    "type": "string",
                    "required": true
                  },
                  "endOfRange": {
                    "type": "integer",
                    "required": true
                  }
                }
              },
              "required": true
            },
            "experiments": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "required": true
                  },
                  "key": {
                    "type": "string",
                    "required": true
                  },
                  "status": {
                    "type": "string",
                    "required": true
                  },
                  "layerId": {
                    "type": "string",
                    "required": true
                  },
                  "variations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "required": true
                        },
                        "key": {
                          "type": "string",
                          "required": true
                        }
                      }
                    },
                    "required": true
                  },
                  "trafficAllocation": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "entityId": {
                          "type": "string",
                          "required": true
                        },
                        "endOfRange": {
                          "type": "integer",
                          "required": true
                        }
                      }
                    },
                    "required": true
                  },
                  "audienceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "required": true
                  },
                  "forcedVariations": {
                    "type": "object",
                    "required": true
                  }
                }
              },
              "required": true
            }
          }
        },
        "required": true
      },
      "experiments": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "required": true
            },
            "key": {
              "type": "string",
              "required": true
            },
            "status": {
              "type": "string",
              "required": true
            },
            "layerId": {
              "type": "string",
              "required": true
            },
            "variations": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "required": true
                  },
                  "key": {
                    "type": "string",
                    "required": true
                  }
                }
              },
              "required": true
            },
            "trafficAllocation": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "entityId": {
                    "type": "string",
                    "required": true
                  },
                  "endOfRange": {
                    "type": "integer",
                    "required": true
                  }
                }
              },
              "required": true
            },
            "audienceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "required": true
            },
            "forcedVariations": {
              "type": "object",
              "required": true
            }
          }
        },
        "required": true
      },
      "events": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "required": true
            },
            "experimentIds": {
              "type": "array",
              "items": {
                "type": "string",
                "required": true
              }
            },
            "id": {
              "type": "string",
              "required": true
            }
          }
        },
        "required": true
      },
      "audiences": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "required": true
            },
            "name": {
              "type": "string",
              "required": true
            },
            "conditions": {
              "type": "string",
              "required": true
            }
          }
        },
        "required": true
      },
      "attributes": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "required": true
            },
            "key": {
              "type": "string",
              "required": true
            },
          }
        },
        "required": true
      },
      "version": {
        "type": "string",
        "required": true
      },
      "revision": {
        "type": "string",
        "required": true
      },
    }
  };

  var project_config = createCommonjsModule(function (module) {
  /**
   * Copyright 2016-2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */


  var sprintf = lib$2.sprintf;



  var EXPERIMENT_RUNNING_STATUS = 'Running';
  var RESERVED_ATTRIBUTE_PREFIX = '$opt_';
  var MODULE_NAME = 'PROJECT_CONFIG';

  var ERROR_MESSAGES = enums.ERROR_MESSAGES;
  var LOG_MESSAGES = enums.LOG_MESSAGES;
  var LOG_LEVEL = enums.LOG_LEVEL;
  var FEATURE_VARIABLE_TYPES = enums.FEATURE_VARIABLE_TYPES;

  module.exports = {
    /**
     * Creates projectConfig object to be used for quick project property lookup
     * @param  {Object} datafile JSON datafile representing the project
     * @return {Object} Object representing project configuration
     */
    createProjectConfig: function(datafile) {
      var projectConfig = fns.cloneDeep(datafile);

      /*
       * Conditions of audiences in projectConfig.typedAudiences are not
       * expected to be string-encoded as they are here in projectConfig.audiences.
       */
      fns.forEach(projectConfig.audiences, function(audience) {
        audience.conditions = JSON.parse(audience.conditions);
      });
      projectConfig.audiencesById = fns.keyBy(projectConfig.audiences, 'id');
      fns.assign(projectConfig.audiencesById, fns.keyBy(projectConfig.typedAudiences, 'id'));

      projectConfig.attributeKeyMap = fns.keyBy(projectConfig.attributes, 'key');
      projectConfig.eventKeyMap = fns.keyBy(projectConfig.events, 'key');
      projectConfig.groupIdMap = fns.keyBy(projectConfig.groups, 'id');

      var experiments;
      fns.forEach(projectConfig.groupIdMap, function(group, Id) {
        experiments = fns.cloneDeep(group.experiments);
        fns.forEach(experiments, function(experiment) {
          projectConfig.experiments.push(fns.assignIn(experiment, {groupId: Id}));
        });
      });

      projectConfig.rolloutIdMap = fns.keyBy(projectConfig.rollouts || [], 'id');
      fns.forOwn(projectConfig.rolloutIdMap, function(rollout) {
        fns.forEach(rollout.experiments || [], function(experiment) {
          projectConfig.experiments.push(fns.cloneDeep(experiment));
          // Creates { <variationKey>: <variation> } map inside of the experiment
          experiment.variationKeyMap = fns.keyBy(experiment.variations, 'key');
        });
      });

      projectConfig.experimentKeyMap = fns.keyBy(projectConfig.experiments, 'key');
      projectConfig.experimentIdMap = fns.keyBy(projectConfig.experiments, 'id');

      projectConfig.variationIdMap = {};
      projectConfig.variationVariableUsageMap = {};
      fns.forEach(projectConfig.experiments, function(experiment) {
        // Creates { <variationKey>: <variation> } map inside of the experiment
        experiment.variationKeyMap = fns.keyBy(experiment.variations, 'key');

        // Creates { <variationId>: { key: <variationKey>, id: <variationId> } } mapping for quick lookup
        fns.assignIn(projectConfig.variationIdMap, fns.keyBy(experiment.variations, 'id'));

        fns.forOwn(experiment.variationKeyMap, function(variation) {
          if (variation.variables) {
            projectConfig.variationVariableUsageMap[variation.id] = fns.keyBy(variation.variables, 'id');
          }
        });
      });

      // Object containing experiment Ids that exist in any feature
      // for checking that experiment is a feature experiment or not.
      projectConfig.experimentFeatureMap = {};

      projectConfig.featureKeyMap = fns.keyBy(projectConfig.featureFlags || [], 'key');
      fns.forOwn(projectConfig.featureKeyMap, function(feature) {
        feature.variableKeyMap = fns.keyBy(feature.variables, 'key');
        fns.forEach(feature.experimentIds || [], function(experimentId) {
          // Add this experiment in experiment-feature map.
          if (projectConfig.experimentFeatureMap[experimentId]) {
            projectConfig.experimentFeatureMap[experimentId].push(feature.id);
          } else {
            projectConfig.experimentFeatureMap[experimentId] = [feature.id];
          }

          var experimentInFeature = projectConfig.experimentIdMap[experimentId];
          // Experiments in feature can only belong to one mutex group.
          if (experimentInFeature.groupId && !feature.groupId) {
            feature.groupId = experimentInFeature.groupId;
          }
        });
      });

      return projectConfig;
    },

    /**
     * Get experiment ID for the provided experiment key
     * @param  {Object} projectConfig Object representing project configuration
     * @param  {string} experimentKey Experiment key for which ID is to be determined
     * @return {string} Experiment ID corresponding to the provided experiment key
     * @throws If experiment key is not in datafile
     */
    getExperimentId: function(projectConfig, experimentKey) {
      var experiment = projectConfig.experimentKeyMap[experimentKey];
      if (fns.isEmpty(experiment)) {
        throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME, experimentKey));
      }
      return experiment.id;
    },

    /**
     * Get layer ID for the provided experiment key
     * @param  {Object} projectConfig Object representing project configuration
     * @param  {string} experimentId Experiment ID for which layer ID is to be determined
     * @return {string} Layer ID corresponding to the provided experiment key
     * @throws If experiment key is not in datafile
     */
    getLayerId: function(projectConfig, experimentId) {
      var experiment = projectConfig.experimentIdMap[experimentId];
      if (fns.isEmpty(experiment)) {
        throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_ID, MODULE_NAME, experimentId));
      }
      return experiment.layerId;
    },

    /**
     * Get attribute ID for the provided attribute key
     * @param  {Object}      projectConfig Object representing project configuration
     * @param  {string}      attributeKey  Attribute key for which ID is to be determined
     * @param  {Object}      logger
     * @return {string|null} Attribute ID corresponding to the provided attribute key. Attribute key if it is a reserved attribute.
     */
    getAttributeId: function(projectConfig, attributeKey, logger) {
      var attribute = projectConfig.attributeKeyMap[attributeKey];
      var hasReservedPrefix = attributeKey.indexOf(RESERVED_ATTRIBUTE_PREFIX) === 0;
      if (attribute) {
        if (hasReservedPrefix) {
          logger.log(LOG_LEVEL.WARN,
                     sprintf('Attribute %s unexpectedly has reserved prefix %s; using attribute ID instead of reserved attribute name.', attributeKey, RESERVED_ATTRIBUTE_PREFIX));
        }
        return attribute.id;
      } else if (hasReservedPrefix) {
        return attributeKey;
      }

      logger.log(LOG_LEVEL.DEBUG, sprintf(ERROR_MESSAGES.UNRECOGNIZED_ATTRIBUTE, MODULE_NAME, attributeKey));
      return null;
    },

    /**
     * Get event ID for the provided
     * @param  {Object}      projectConfig Object representing project configuration
     * @param  {string}      eventKey      Event key for which ID is to be determined
     * @return {string|null} Event ID corresponding to the provided event key
     */
    getEventId: function(projectConfig, eventKey) {
      var event = projectConfig.eventKeyMap[eventKey];
      if (event) {
        return event.id;
      }
      return null;
    },

    /**
     * Get experiment status for the provided experiment key
     * @param  {Object} projectConfig Object representing project configuration
     * @param  {string} experimentKey Experiment key for which status is to be determined
     * @return {string} Experiment status corresponding to the provided experiment key
     * @throws If experiment key is not in datafile
     */
    getExperimentStatus: function(projectConfig, experimentKey) {
      var experiment = projectConfig.experimentKeyMap[experimentKey];
      if (fns.isEmpty(experiment)) {
        throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME, experimentKey));
      }
      return experiment.status;
    },

    /**
     * Returns whether experiment has a status of 'Running'
     * @param  {Object}  projectConfig Object representing project configuration
     * @param  {string}  experimentKey Experiment key for which status is to be compared with 'Running'
     * @return {Boolean}               true if experiment status is set to 'Running', false otherwise
     */
    isActive: function(projectConfig, experimentKey) {
      return module.exports.getExperimentStatus(projectConfig, experimentKey) === EXPERIMENT_RUNNING_STATUS;
    },

    /**
     * Determine for given experiment if event is running, which determines whether should be dispatched or not
     */
    isRunning: function(projectConfig, experimentKey) {
      return module.exports.getExperimentStatus(projectConfig, experimentKey) === EXPERIMENT_RUNNING_STATUS;
    },

    /**
     * Get audience conditions for the experiment
     * @param  {Object}         projectConfig Object representing project configuration
     * @param  {string}         experimentKey Experiment key for which audience conditions are to be determined
     * @return {Array}          Audience conditions for the experiment - can be an array of audience IDs, or a
     *                          nested array of conditions
     *                          Examples: ["5", "6"], ["and", ["or", "1", "2"], "3"]
     * @throws If experiment key is not in datafile
     */
    getExperimentAudienceConditions: function(projectConfig, experimentKey) {
      var experiment = projectConfig.experimentKeyMap[experimentKey];
      if (fns.isEmpty(experiment)) {
        throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME, experimentKey));
      }

      return experiment.audienceConditions || experiment.audienceIds;
    },

    /**
     * Get variation key given experiment key and variation ID
     * @param  {Object} projectConfig Object representing project configuration
     * @param  {string} variationId   ID of the variation
     * @return {string} Variation key or null if the variation ID is not found
     */
    getVariationKeyFromId: function(projectConfig, variationId) {
      if (projectConfig.variationIdMap.hasOwnProperty(variationId)) {
        return projectConfig.variationIdMap[variationId].key;
      }
      return null;
    },

    /**
     * Get the variation ID given the experiment key and variation key
     * @param  {Object} projectConfig Object representing project configuration
     * @param  {string} experimentKey Key of the experiment the variation belongs to
     * @param  {string} variationKey  The variation key
     * @return {string} the variation ID
     */
    getVariationIdFromExperimentAndVariationKey: function(projectConfig, experimentKey, variationKey) {
      var experiment = projectConfig.experimentKeyMap[experimentKey];
      if (experiment.variationKeyMap.hasOwnProperty(variationKey)) {
        return experiment.variationKeyMap[variationKey].id;
      }
      return null;
    },

    /**
     * Get experiment from provided experiment key
     * @param  {Object} projectConfig  Object representing project configuration
     * @param  {string} experimentKey  Event key for which experiment IDs are to be retrieved
     * @return {Object} experiment
     * @throws If experiment key is not in datafile
     */
    getExperimentFromKey: function(projectConfig, experimentKey) {
      if (projectConfig.experimentKeyMap.hasOwnProperty(experimentKey)) {
        var experiment = projectConfig.experimentKeyMap[experimentKey];
        if (experiment) {
          return experiment;
        }
      }

      throw new Error(sprintf(ERROR_MESSAGES.EXPERIMENT_KEY_NOT_IN_DATAFILE, MODULE_NAME, experimentKey));
    },

    /**
     * Given an experiment key, returns the traffic allocation within that experiment
     * @param  {Object} projectConfig Object representing project configuration
     * @param  {string} experimentKey Key representing the experiment
     * @return {Array<Object>}        Traffic allocation for the experiment
     * @throws If experiment key is not in datafile
     */
    getTrafficAllocation: function(projectConfig, experimentKey) {
      var experiment = projectConfig.experimentKeyMap[experimentKey];
      if (fns.isEmpty(experiment)) {
        throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME, experimentKey));
      }
      return experiment.trafficAllocation;
    },

    /**
     * Get experiment from provided experiment id. Log an error if no experiment
     * exists in the project config with the given ID.
     * @param  {Object} projectConfig  Object representing project configuration
     * @param  {string} experimentId  ID of desired experiment object
     * @return {Object} Experiment object
     */
    getExperimentFromId: function(projectConfig, experimentId, logger) {
      if (projectConfig.experimentIdMap.hasOwnProperty(experimentId)) {
        var experiment = projectConfig.experimentIdMap[experimentId];
        if (experiment) {
          return experiment;
        }
      }

      logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_ID, MODULE_NAME, experimentId));
      return null;
    },

    /**
     * Get feature from provided feature key. Log an error if no feature exists in
     * the project config with the given key.
     * @param {Object} projectConfig
     * @param {string} featureKey
     * @param {Object} logger
     * @return {Object|null} Feature object, or null if no feature with the given
     * key exists
     */
    getFeatureFromKey: function(projectConfig, featureKey, logger) {
      if (projectConfig.featureKeyMap.hasOwnProperty(featureKey)) {
        var feature = projectConfig.featureKeyMap[featureKey];
        if (feature) {
          return feature;
        }
      }

      logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.FEATURE_NOT_IN_DATAFILE, MODULE_NAME, featureKey));
      return null;
    },

    /**
     * Get the variable with the given key associated with the feature with the
     * given key. If the feature key or the variable key are invalid, log an error
     * message.
     * @param {Object} projectConfig
     * @param {string} featureKey
     * @param {string} variableKey
     * @param {Object} logger
     * @return {Object|null} Variable object, or null one or both of the given
     * feature and variable keys are invalid
     */
    getVariableForFeature: function(projectConfig, featureKey, variableKey, logger) {
      var feature = projectConfig.featureKeyMap[featureKey];
      if (!feature) {
        logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.FEATURE_NOT_IN_DATAFILE, MODULE_NAME, featureKey));
        return null;
      }

      var variable = feature.variableKeyMap[variableKey];
      if (!variable) {
        logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.VARIABLE_KEY_NOT_IN_DATAFILE, MODULE_NAME, variableKey, featureKey));
        return null;
      }

      return variable;
    },

    /**
     * Get the value of the given variable for the given variation. If the given
     * variable has no value for the given variation, return null. Log an error message if the variation is invalid. If the
     * variable or variation are invalid, return null.
     * @param {Object} projectConfig
     * @param {Object} variable
     * @param {Object} variation
     * @param {Object} logger
     * @return {string|null} The value of the given variable for the given
     * variation, or null if the given variable has no value
     * for the given variation or if the variation or variable are invalid
     */
    getVariableValueForVariation: function(projectConfig, variable, variation, logger) {
      if (!variable || !variation) {
        return null;
      }

      if (!projectConfig.variationVariableUsageMap.hasOwnProperty(variation.id)) {
        logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.VARIATION_ID_NOT_IN_DATAFILE_NO_EXPERIMENT, MODULE_NAME, variation.id));
        return null;
      }

      var variableUsages = projectConfig.variationVariableUsageMap[variation.id];
      var variableUsage = variableUsages[variable.id];

      return variableUsage ? variableUsage.value : null;
    },

    /**
     * Given a variable value in string form, try to cast it to the argument type.
     * If the type cast succeeds, return the type casted value, otherwise log an
     * error and return null.
     * @param {string} variableValue  Variable value in string form
     * @param {string} variableType   Type of the variable whose value was passed
     *                                in the first argument. Must be one of
     *                                FEATURE_VARIABLE_TYPES in
     *                                lib/utils/enums/index.js. The return value's
     *                                type is determined by this argument (boolean
     *                                for BOOLEAN, number for INTEGER or DOUBLE,
     *                                and string for STRING).
     * @param {Object} logger         Logger instance
     * @returns {*}                   Variable value of the appropriate type, or
     *                                null if the type cast failed
     */
    getTypeCastValue: function(variableValue, variableType, logger) {
      var castValue;

      switch (variableType) {
        case FEATURE_VARIABLE_TYPES.BOOLEAN:
          if (variableValue !== 'true' && variableValue !== 'false') {
            logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME, variableValue, variableType));
            castValue = null;
          } else {
            castValue = variableValue === 'true';
          }
          break;

        case FEATURE_VARIABLE_TYPES.INTEGER:
          castValue = parseInt(variableValue, 10);
          if (isNaN(castValue)) {
            logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME, variableValue, variableType));
            castValue = null;
          }
          break;

        case FEATURE_VARIABLE_TYPES.DOUBLE:
          castValue = parseFloat(variableValue);
          if (isNaN(castValue)) {
            logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME, variableValue, variableType));
            castValue = null;
          }
          break;

        default: // type is STRING
          castValue = variableValue;
          break;
      }

      return castValue;
    },

    /**
     * Returns an object containing all audiences in the project config. Keys are audience IDs
     * and values are audience objects.
     * @param projectConfig
     * @returns {Object}
     */
    getAudiencesById: function(projectConfig) {
      return projectConfig.audiencesById;
    },

    /**
     * Returns true if an event with the given key exists in the datafile, and false otherwise
     * @param {Object} projectConfig
     * @param {string} eventKey
     * @returns {boolean}
     */
    eventWithKeyExists: function(projectConfig, eventKey) {
      return projectConfig.eventKeyMap.hasOwnProperty(eventKey);
    },

    /**
     *
     * @param {Object} projectConfig
     * @param {string} experimentId
     * @returns {boolean} Returns true if experiment belongs to
     * any feature, false otherwise.
     */
    isFeatureExperiment: function(projectConfig, experimentId) {
      return projectConfig.experimentFeatureMap.hasOwnProperty(experimentId);
    },

    /**
     * Try to create a project config object from the given datafile and
     * configuration properties.
     * If successful, return the project config object, otherwise throws an error
     * @param  {Object} config
     * @param  {Object} config.datafile
     * @param  {Object} config.jsonSchemaValidator
     * @param  {Object} config.logger
     * @param  {Object} config.skipJSONValidation
     * @return {Object} Project config object
     */
    tryCreatingProjectConfig: function(config) {
      config_validator.validateDatafile(config.datafile);
      if (config.skipJSONValidation === true) {
        config.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.SKIPPING_JSON_VALIDATION, MODULE_NAME));
      } else if (config.jsonSchemaValidator) {
        config.jsonSchemaValidator.validate(project_config_schema, config.datafile);
        config.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.VALID_DATAFILE, MODULE_NAME));
      }
      return module.exports.createProjectConfig(config.datafile);
    },
  };
  });
  var project_config_1 = project_config.createProjectConfig;
  var project_config_2 = project_config.getExperimentId;
  var project_config_3 = project_config.getLayerId;
  var project_config_4 = project_config.getAttributeId;
  var project_config_5 = project_config.getEventId;
  var project_config_6 = project_config.getExperimentStatus;
  var project_config_7 = project_config.isActive;
  var project_config_8 = project_config.isRunning;
  var project_config_9 = project_config.getExperimentAudienceConditions;
  var project_config_10 = project_config.getVariationKeyFromId;
  var project_config_11 = project_config.getVariationIdFromExperimentAndVariationKey;
  var project_config_12 = project_config.getExperimentFromKey;
  var project_config_13 = project_config.getTrafficAllocation;
  var project_config_14 = project_config.getExperimentFromId;
  var project_config_15 = project_config.getFeatureFromKey;
  var project_config_16 = project_config.getVariableForFeature;
  var project_config_17 = project_config.getVariableValueForVariation;
  var project_config_18 = project_config.getTypeCastValue;
  var project_config_19 = project_config.getAudiencesById;
  var project_config_20 = project_config.eventWithKeyExists;
  var project_config_21 = project_config.isFeatureExperiment;
  var project_config_22 = project_config.tryCreatingProjectConfig;

  /**
   * Copyright 2018, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  var string_value_validator = {
    /**
     * Validates provided value is a non-empty string
     * @param  {string}  input
     * @return {boolean} True for non-empty string, false otherwise
     */
    validate: function(input) {
        return typeof input === 'string' && input !== '';
    }
  };

  /****************************************************************************
   * Copyright 2017-2019, Optimizely, Inc. and contributors                   *
   *                                                                          *
   * Licensed under the Apache License, Version 2.0 (the "License");          *
   * you may not use this file except in compliance with the License.         *
   * You may obtain a copy of the License at                                  *
   *                                                                          *
   *    http://www.apache.org/licenses/LICENSE-2.0                            *
   *                                                                          *
   * Unless required by applicable law or agreed to in writing, software      *
   * distributed under the License is distributed on an "AS IS" BASIS,        *
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
   * See the License for the specific language governing permissions and      *
   * limitations under the License.                                           *
   ***************************************************************************/








  var sprintf$5 = lib$2.sprintf;

  var MODULE_NAME$5 = 'DECISION_SERVICE';
  var ERROR_MESSAGES$4 = enums.ERROR_MESSAGES;
  var LOG_LEVEL$2 = enums.LOG_LEVEL;
  var LOG_MESSAGES$2 = enums.LOG_MESSAGES;
  var DECISION_SOURCES = enums.DECISION_SOURCES;



  /**
   * Optimizely's decision service that determines which variation of an experiment the user will be allocated to.
   *
   * The decision service contains all logic around how a user decision is made. This includes all of the following (in order):
   *   1. Checking experiment status
   *   2. Checking forced bucketing
   *   3. Checking whitelisting
   *   4. Checking user profile service for past bucketing decisions (sticky bucketing)
   *   5. Checking audience targeting
   *   6. Using Murmurhash3 to bucket the user.
   *
   * @constructor
   * @param   {Object} options
   * @param   {Object} options.userProfileService An instance of the user profile service for sticky bucketing.
   * @param   {Object} options.logger An instance of a logger to log messages.
   * @returns {Object}
   */
  function DecisionService(options) {
    this.audienceEvaluator = new audience_evaluator(options.UNSTABLE_conditionEvaluators);
    this.forcedVariationMap = {};
    this.logger = options.logger;
    this.userProfileService = options.userProfileService || null;
  }

  /**
   * Gets variation where visitor will be bucketed.
   * @param  {Object}      configObj      The parsed project configuration object
   * @param  {string}      experimentKey
   * @param  {string}      userId
   * @param  {Object}      attributes
   * @return {string|null} the variation the user is bucketed into.
   */
  DecisionService.prototype.getVariation = function(configObj, experimentKey, userId, attributes) {
    // by default, the bucketing ID should be the user ID
    var bucketingId = this._getBucketingId(userId, attributes);

    if (!this.__checkIfExperimentIsActive(configObj, experimentKey)) {
      return null;
    }
    var experiment = configObj.experimentKeyMap[experimentKey];
    var forcedVariationKey = this.getForcedVariation(configObj, experimentKey, userId);
    if (forcedVariationKey) {
      return forcedVariationKey;
    }

    var variation = this.__getWhitelistedVariation(experiment, userId);
    if (variation) {
      return variation.key;
    }

    // check for sticky bucketing
    var experimentBucketMap = this.__resolveExperimentBucketMap(userId, attributes);
    variation = this.__getStoredVariation(configObj, experiment, userId, experimentBucketMap);
    if (variation) {
      this.logger.log(LOG_LEVEL$2.INFO, sprintf$5(LOG_MESSAGES$2.RETURNING_STORED_VARIATION, MODULE_NAME$5, variation.key, experimentKey, userId));
      return variation.key;
    }

    // Perform regular targeting and bucketing
    if (!this.__checkIfUserIsInAudience(configObj, experimentKey, userId, attributes)) {
      return null;
    }

    var bucketerParams = this.__buildBucketerParams(configObj, experimentKey, bucketingId, userId);
    var variationId = bucketer.bucket(bucketerParams);
    variation = configObj.variationIdMap[variationId];
    if (!variation) {
      return null;
    }

    // persist bucketing
    this.__saveUserProfile(experiment, variation, userId, experimentBucketMap);

    return variation.key;
  };

  /**
   * Merges attributes from attributes[STICKY_BUCKETING_KEY] and userProfileService
   * @param  {Object} attributes
   * @return {Object} finalized copy of experiment_bucket_map
   */
  DecisionService.prototype.__resolveExperimentBucketMap = function(userId, attributes) {
    attributes = attributes || {};
    var userProfile = this.__getUserProfile(userId) || {};
    var attributeExperimentBucketMap = attributes[enums.CONTROL_ATTRIBUTES.STICKY_BUCKETING_KEY];
    return fns.assignIn({}, userProfile.experiment_bucket_map, attributeExperimentBucketMap);
  };


  /**
   * Checks whether the experiment is running
   * @param  {Object}  configObj     The parsed project configuration object
   * @param  {string}  experimentKey Key of experiment being validated
   * @param  {string}  userId        ID of user
   * @return {boolean} True if experiment is running
   */
  DecisionService.prototype.__checkIfExperimentIsActive = function(configObj, experimentKey) {
    if (!project_config.isActive(configObj, experimentKey)) {
      var experimentNotRunningLogMessage = sprintf$5(LOG_MESSAGES$2.EXPERIMENT_NOT_RUNNING, MODULE_NAME$5, experimentKey);
      this.logger.log(LOG_LEVEL$2.INFO, experimentNotRunningLogMessage);
      return false;
    }

    return true;
  };

  /**
   * Checks if user is whitelisted into any variation and return that variation if so
   * @param  {Object} experiment
   * @param  {string} userId
   * @return {string|null} Forced variation if it exists for user ID, otherwise null
   */
  DecisionService.prototype.__getWhitelistedVariation = function(experiment, userId) {
    if (!fns.isEmpty(experiment.forcedVariations) && experiment.forcedVariations.hasOwnProperty(userId)) {
      var forcedVariationKey = experiment.forcedVariations[userId];
      if (experiment.variationKeyMap.hasOwnProperty(forcedVariationKey)) {
        var forcedBucketingSucceededMessageLog = sprintf$5(LOG_MESSAGES$2.USER_FORCED_IN_VARIATION, MODULE_NAME$5, userId, forcedVariationKey);
        this.logger.log(LOG_LEVEL$2.INFO, forcedBucketingSucceededMessageLog);
        return experiment.variationKeyMap[forcedVariationKey];
      } else {
        var forcedBucketingFailedMessageLog = sprintf$5(LOG_MESSAGES$2.FORCED_BUCKETING_FAILED, MODULE_NAME$5, forcedVariationKey, userId);
        this.logger.log(LOG_LEVEL$2.ERROR, forcedBucketingFailedMessageLog);
        return null;
      }
    }

    return null;
  };

  /**
   * Checks whether the user is included in experiment audience
   * @param  {Object}  configObj     The parsed project configuration object
   * @param  {string}  experimentKey Key of experiment being validated
   * @param  {string}  userId        ID of user
   * @param  {Object}  attributes    Optional parameter for user's attributes
   * @return {boolean} True if user meets audience conditions
   */
  DecisionService.prototype.__checkIfUserIsInAudience = function(configObj, experimentKey, userId, attributes) {
    var experimentAudienceConditions = project_config.getExperimentAudienceConditions(configObj, experimentKey);
    var audiencesById = project_config.getAudiencesById(configObj);
    this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.EVALUATING_AUDIENCES_COMBINED, MODULE_NAME$5, experimentKey, JSON.stringify(experimentAudienceConditions)));
    var result = this.audienceEvaluator.evaluate(experimentAudienceConditions, audiencesById, attributes);
    this.logger.log(LOG_LEVEL$2.INFO, sprintf$5(LOG_MESSAGES$2.AUDIENCE_EVALUATION_RESULT_COMBINED, MODULE_NAME$5, experimentKey, result.toString().toUpperCase()));

    if (!result) {
      var userDoesNotMeetConditionsLogMessage = sprintf$5(LOG_MESSAGES$2.USER_NOT_IN_EXPERIMENT, MODULE_NAME$5, userId, experimentKey);
      this.logger.log(LOG_LEVEL$2.INFO, userDoesNotMeetConditionsLogMessage);
      return false;
    }

    return true;
  };

  /**
   * Given an experiment key and user ID, returns params used in bucketer call
   * @param  configObj     The parsed project configuration object
   * @param  experimentKey Experiment key used for bucketer
   * @param  bucketingId   ID to bucket user into
   * @param  userId        ID of user to be bucketed
   * @return {Object}
   */
  DecisionService.prototype.__buildBucketerParams = function(configObj, experimentKey, bucketingId, userId) {
    var bucketerParams = {};
    bucketerParams.experimentKey = experimentKey;
    bucketerParams.experimentId = project_config.getExperimentId(configObj, experimentKey);
    bucketerParams.userId = userId;
    bucketerParams.trafficAllocationConfig = project_config.getTrafficAllocation(configObj, experimentKey);
    bucketerParams.experimentKeyMap = configObj.experimentKeyMap;
    bucketerParams.groupIdMap = configObj.groupIdMap;
    bucketerParams.variationIdMap = configObj.variationIdMap;
    bucketerParams.logger = this.logger;
    bucketerParams.bucketingId = bucketingId;
    return bucketerParams;
  };

  /**
   * Pull the stored variation out of the experimentBucketMap for an experiment/userId
   * @param  {Object} configObj           The parsed project configuration object
   * @param  {Object} experiment
   * @param  {String} userId
   * @param  {Object} experimentBucketMap mapping experiment => { variation_id: <variationId> }
   * @return {Object} the stored variation or null if the user profile does not have one for the given experiment
   */
  DecisionService.prototype.__getStoredVariation = function(configObj, experiment, userId, experimentBucketMap) {
    if (experimentBucketMap.hasOwnProperty(experiment.id)) {
      var decision = experimentBucketMap[experiment.id];
      var variationId = decision.variation_id;
      if (configObj.variationIdMap.hasOwnProperty(variationId)) {
        return configObj.variationIdMap[decision.variation_id];
      } else {
        this.logger.log(LOG_LEVEL$2.INFO, sprintf$5(LOG_MESSAGES$2.SAVED_VARIATION_NOT_FOUND, MODULE_NAME$5, userId, variationId, experiment.key));
      }
    }

    return null;
  };

  /**
   * Get the user profile with the given user ID
   * @param  {string} userId
   * @return {Object|undefined} the stored user profile or undefined if one isn't found
   */
  DecisionService.prototype.__getUserProfile = function(userId) {
    var userProfile = {
      user_id: userId,
      experiment_bucket_map: {},
    };

    if (!this.userProfileService) {
      return userProfile;
    }

    try {
      return this.userProfileService.lookup(userId);
    } catch (ex) {
      this.logger.log(LOG_LEVEL$2.ERROR, sprintf$5(ERROR_MESSAGES$4.USER_PROFILE_LOOKUP_ERROR, MODULE_NAME$5, userId, ex.message));
    }
  };

  /**
   * Saves the bucketing decision to the user profile
   * @param {Object} userProfile
   * @param {Object} experiment
   * @param {Object} variation
   * @param {Object} experimentBucketMap
   */
  DecisionService.prototype.__saveUserProfile = function(experiment, variation, userId, experimentBucketMap) {
    if (!this.userProfileService) {
      return;
    }

    try {
      var newBucketMap = fns.cloneDeep(experimentBucketMap);
      newBucketMap[experiment.id] = {
        variation_id: variation.id
      };

      this.userProfileService.save({
        user_id: userId,
        experiment_bucket_map: newBucketMap,
      });

      this.logger.log(LOG_LEVEL$2.INFO, sprintf$5(LOG_MESSAGES$2.SAVED_VARIATION, MODULE_NAME$5, variation.key, experiment.key, userId));
    } catch (ex) {
      this.logger.log(LOG_LEVEL$2.ERROR, sprintf$5(ERROR_MESSAGES$4.USER_PROFILE_SAVE_ERROR, MODULE_NAME$5, userId, ex.message));
    }
  };

  /**
   * Given a feature, user ID, and attributes, returns an object representing a
   * decision. If the user was bucketed into a variation for the given feature
   * and attributes, the returned decision object will have variation and
   * experiment properties (both objects), as well as a decisionSource property.
   * decisionSource indicates whether the decision was due to a rollout or an
   * experiment.
   * @param   {Object} configObj  The parsed project configuration object
   * @param   {Object} feature    A feature flag object from project configuration
   * @param   {String} userId     A string identifying the user, for bucketing
   * @param   {Object} attributes Optional user attributes
   * @return  {Object} An object with experiment, variation, and decisionSource
   * properties. If the user was not bucketed into a variation, the variation
   * property is null.
   */
  DecisionService.prototype.getVariationForFeature = function(configObj, feature, userId, attributes) {
    var experimentDecision = this._getVariationForFeatureExperiment(configObj, feature, userId, attributes);
    if (experimentDecision.variation !== null) {
      this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.USER_IN_FEATURE_EXPERIMENT, MODULE_NAME$5, userId, experimentDecision.variation.key, experimentDecision.experiment.key, feature.key));
      return experimentDecision;
    }

    this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.USER_NOT_IN_FEATURE_EXPERIMENT, MODULE_NAME$5, userId, feature.key));

    var rolloutDecision = this._getVariationForRollout(configObj, feature, userId, attributes);
    if (rolloutDecision.variation !== null) {
      this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.USER_IN_ROLLOUT, MODULE_NAME$5, userId, feature.key));
      return rolloutDecision;
    }

    this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.USER_NOT_IN_ROLLOUT, MODULE_NAME$5, userId, feature.key));
    return rolloutDecision;
  };

  DecisionService.prototype._getVariationForFeatureExperiment = function(configObj, feature, userId, attributes) {
    var experiment = null;
    var variationKey = null;

    if (feature.hasOwnProperty('groupId')) {
      var group = configObj.groupIdMap[feature.groupId];
      if (group) {
        experiment = this._getExperimentInGroup(configObj, group, userId);
        if (experiment && feature.experimentIds.indexOf(experiment.id) !== -1) {
          variationKey = this.getVariation(configObj, experiment.key, userId, attributes);
        }
      }
    } else if (feature.experimentIds.length > 0) {
      // If the feature does not have a group ID, then it can only be associated
      // with one experiment, so we look at the first experiment ID only
      experiment = project_config.getExperimentFromId(configObj, feature.experimentIds[0], this.logger);
      if (experiment) {
        variationKey = this.getVariation(configObj, experiment.key, userId, attributes);
      }
    } else {
      this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.FEATURE_HAS_NO_EXPERIMENTS, MODULE_NAME$5, feature.key));
    }

    var variation = null;
    if (variationKey !== null && experiment !== null) {
      variation = experiment.variationKeyMap[variationKey];
    }
    return {
      experiment: experiment,
      variation: variation,
      decisionSource: DECISION_SOURCES.FEATURE_TEST,
    };
  };

  DecisionService.prototype._getExperimentInGroup = function(configObj, group, userId) {
    var experimentId = bucketer.bucketUserIntoExperiment(group, userId, userId, this.logger);
    if (experimentId) {
      this.logger.log(LOG_LEVEL$2.INFO, sprintf$5(LOG_MESSAGES$2.USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP, MODULE_NAME$5, userId, experimentId, group.id));
      var experiment = project_config.getExperimentFromId(configObj, experimentId, this.logger);
      if (experiment) {
        return experiment;
      }
    }

    this.logger.log(LOG_LEVEL$2.INFO, sprintf$5(LOG_MESSAGES$2.USER_NOT_BUCKETED_INTO_ANY_EXPERIMENT_IN_GROUP, MODULE_NAME$5, userId, group.id));
    return null;
  };

  DecisionService.prototype._getVariationForRollout = function(configObj, feature, userId, attributes) {
    if (!feature.rolloutId) {
      this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.NO_ROLLOUT_EXISTS, MODULE_NAME$5, feature.key));
      return {
        experiment: null,
        variation: null,
        decisionSource: DECISION_SOURCES.ROLLOUT,
      };
    }

    var rollout = configObj.rolloutIdMap[feature.rolloutId];
    if (!rollout) {
      this.logger.log(LOG_LEVEL$2.ERROR, sprintf$5(ERROR_MESSAGES$4.INVALID_ROLLOUT_ID, MODULE_NAME$5, feature.rolloutId, feature.key));
      return {
        experiment: null,
        variation: null,
        decisionSource: DECISION_SOURCES.ROLLOUT,
      };
    }

    if (rollout.experiments.length === 0) {
      this.logger.log(LOG_LEVEL$2.ERROR, sprintf$5(LOG_MESSAGES$2.ROLLOUT_HAS_NO_EXPERIMENTS, MODULE_NAME$5, feature.rolloutId));
      return {
        experiment: null,
        variation: null,
        decisionSource: DECISION_SOURCES.ROLLOUT,
      };
    }

    var bucketingId = this._getBucketingId(userId, attributes);

    // The end index is length - 1 because the last experiment is assumed to be
    // "everyone else", which will be evaluated separately outside this loop
    var endIndex = rollout.experiments.length - 1;
    var index;
    var experiment;
    var bucketerParams;
    var variationId;
    var variation;
    for (index = 0; index < endIndex; index++) {
      experiment = configObj.experimentKeyMap[rollout.experiments[index].key];

      if (!this.__checkIfUserIsInAudience(configObj, experiment.key, userId, attributes)) {
        this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE, MODULE_NAME$5, userId, index + 1));
        continue;
      }

      this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.USER_MEETS_CONDITIONS_FOR_TARGETING_RULE, MODULE_NAME$5, userId, index + 1));
      bucketerParams = this.__buildBucketerParams(configObj, experiment.key, bucketingId, userId);
      variationId = bucketer.bucket(bucketerParams);
      variation = configObj.variationIdMap[variationId];
      if (variation) {
        this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.USER_BUCKETED_INTO_TARGETING_RULE, MODULE_NAME$5, userId, index + 1));
        return {
          experiment: experiment,
          variation: variation,
          decisionSource: DECISION_SOURCES.ROLLOUT,
        };
      } else {
        this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.USER_NOT_BUCKETED_INTO_TARGETING_RULE, MODULE_NAME$5, userId, index + 1));
        break;
      }
    }

    var everyoneElseExperiment = configObj.experimentKeyMap[rollout.experiments[endIndex].key];
    if (this.__checkIfUserIsInAudience(configObj, everyoneElseExperiment.key, userId, attributes)) {
      bucketerParams = this.__buildBucketerParams(configObj, everyoneElseExperiment.key, bucketingId, userId);
      variationId = bucketer.bucket(bucketerParams);
      variation = configObj.variationIdMap[variationId];
      if (variation) {
        this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.USER_BUCKETED_INTO_EVERYONE_TARGETING_RULE, MODULE_NAME$5, userId));
        return {
          experiment: everyoneElseExperiment,
          variation: variation,
          decisionSource: DECISION_SOURCES.ROLLOUT,
        };
      } else {
        this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.USER_NOT_BUCKETED_INTO_EVERYONE_TARGETING_RULE, MODULE_NAME$5, userId));
      }
    }

    return {
      experiment: null,
      variation: null,
      decisionSource: DECISION_SOURCES.ROLLOUT,
    };
  };

  /**
   * Get bucketing Id from user attributes.
   * @param {String} userId
   * @param {Object} attributes
   * @returns {String} Bucketing Id if it is a string type in attributes, user Id otherwise.
   */
  DecisionService.prototype._getBucketingId = function(userId, attributes) {
    var bucketingId = userId;

    // If the bucketing ID key is defined in attributes, than use that in place of the userID for the murmur hash key
    if ((attributes != null && typeof attributes === 'object') && attributes.hasOwnProperty(enums.CONTROL_ATTRIBUTES.BUCKETING_ID)) {
      if (typeof attributes[enums.CONTROL_ATTRIBUTES.BUCKETING_ID] === 'string') {
        bucketingId = attributes[enums.CONTROL_ATTRIBUTES.BUCKETING_ID];
        this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.VALID_BUCKETING_ID, MODULE_NAME$5, bucketingId));
      } else {
        this.logger.log(LOG_LEVEL$2.WARNING, sprintf$5(LOG_MESSAGES$2.BUCKETING_ID_NOT_STRING, MODULE_NAME$5));
      }
    }

    return bucketingId;
  };

  /**
   * Removes forced variation for given userId and experimentKey
   * @param  {string} userId         String representing the user id
   * @param  {number} experimentId   Number representing the experiment id
   * @param  {string} experimentKey  Key representing the experiment id
   * @throws If the user id is not valid or not in the forced variation map
   */
  DecisionService.prototype.removeForcedVariation = function(userId, experimentId, experimentKey) {
    if (!userId) {
      throw new Error(sprintf$5(ERROR_MESSAGES$4.INVALID_USER_ID, MODULE_NAME$5));
    }

    if (this.forcedVariationMap.hasOwnProperty(userId)) {
      delete this.forcedVariationMap[userId][experimentId];
      this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.VARIATION_REMOVED_FOR_USER, MODULE_NAME$5, experimentKey, userId));
    } else {
      throw new Error(sprintf$5(ERROR_MESSAGES$4.USER_NOT_IN_FORCED_VARIATION, MODULE_NAME$5, userId));
    }
  };

  /**
   * Sets forced variation for given userId and experimentKey
   * @param  {string} userId        String representing the user id
   * @param  {number} experimentId  Number representing the experiment id
   * @param  {number} variationId   Number representing the variation id
   * @throws If the user id is not valid
   */
  DecisionService.prototype.__setInForcedVariationMap = function(userId, experimentId, variationId) {
    if (this.forcedVariationMap.hasOwnProperty(userId)) {
      this.forcedVariationMap[userId][experimentId] = variationId;
    } else {
      this.forcedVariationMap[userId] = {};
      this.forcedVariationMap[userId][experimentId] = variationId;
    }

    this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.USER_MAPPED_TO_FORCED_VARIATION, MODULE_NAME$5, variationId, experimentId, userId));
  };

  /**
   * Gets the forced variation key for the given user and experiment.
   * @param  {Object} configObj        Object representing project configuration
   * @param  {string} experimentKey    Key for experiment.
   * @param  {string} userId           The user Id.
   * @return {string|null} Variation   The variation which the given user and experiment should be forced into.
   */
  DecisionService.prototype.getForcedVariation = function(configObj, experimentKey, userId) {
    var experimentToVariationMap = this.forcedVariationMap[userId];
    if (!experimentToVariationMap) {
      this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.USER_HAS_NO_FORCED_VARIATION, MODULE_NAME$5, userId));
      return null;
    }

    var experimentId;
    try {
      var experiment = project_config.getExperimentFromKey(configObj, experimentKey);
      if (experiment.hasOwnProperty('id')) {
        experimentId = experiment['id'];
      } else {
        // catching improperly formatted experiments
        this.logger.log(LOG_LEVEL$2.ERROR, sprintf$5(ERROR_MESSAGES$4.IMPROPERLY_FORMATTED_EXPERIMENT, MODULE_NAME$5, experimentKey));
        return null;
      }
    } catch (ex) {
      // catching experiment not in datafile
      this.logger.log(LOG_LEVEL$2.ERROR, ex.message);
      return null;
    }

    var variationId = experimentToVariationMap[experimentId];
    if (!variationId) {
      this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT, MODULE_NAME$5, experimentKey, userId));
      return null;
    }

    var variationKey = project_config.getVariationKeyFromId(configObj, variationId);
    if (variationKey) {
      this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.USER_HAS_FORCED_VARIATION, MODULE_NAME$5, variationKey, experimentKey, userId));
    } else {
      this.logger.log(LOG_LEVEL$2.DEBUG, sprintf$5(LOG_MESSAGES$2.USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT, MODULE_NAME$5, experimentKey, userId));
    }

    return variationKey;
  };

  /**
   * Sets the forced variation for a user in a given experiment
   * @param  {Object} configObj      Object representing project configuration
   * @param  {string} experimentKey  Key for experiment.
   * @param  {string} userId         The user Id.
   * @param  {string} variationKey   Key for variation. If null, then clear the existing experiment-to-variation mapping
   * @return {boolean}               A boolean value that indicates if the set completed successfully.
   */
  DecisionService.prototype.setForcedVariation = function(configObj, experimentKey, userId, variationKey) {
    if (variationKey != null && !string_value_validator.validate(variationKey)) {
      this.logger.log(LOG_LEVEL$2.ERROR, sprintf$5(ERROR_MESSAGES$4.INVALID_VARIATION_KEY, MODULE_NAME$5));
      return false;
    }

    var experimentId;
    try {
      var experiment = project_config.getExperimentFromKey(configObj, experimentKey);
      if (experiment.hasOwnProperty('id')) {
        experimentId = experiment['id'];
      } else {
        // catching improperly formatted experiments
        this.logger.log(LOG_LEVEL$2.ERROR, sprintf$5(ERROR_MESSAGES$4.IMPROPERLY_FORMATTED_EXPERIMENT, MODULE_NAME$5, experimentKey));
        return false;
      }
    } catch (ex) {
      // catching experiment not in datafile
      this.logger.log(LOG_LEVEL$2.ERROR, ex.message);
      return false;
    }

    if (variationKey == null) {
      try {
        this.removeForcedVariation(userId, experimentId, experimentKey, this.logger);
        return true;
      } catch (ex) {
        this.logger.log(LOG_LEVEL$2.ERROR, ex.message);
        return false;
      }
    }

    var variationId = project_config.getVariationIdFromExperimentAndVariationKey(configObj, experimentKey, variationKey);

    if (!variationId) {
      this.logger.log(LOG_LEVEL$2.ERROR, sprintf$5(ERROR_MESSAGES$4.NO_VARIATION_FOR_EXPERIMENT_KEY, MODULE_NAME$5, variationKey, experimentKey));
      return false;
    }

    try {
      this.__setInForcedVariationMap(userId, experimentId, variationId);
      return true;
    } catch (ex) {
      this.logger.log(LOG_LEVEL$2.ERROR, ex.message);
      return false;
    }
  };

  var decision_service = {
    /**
     * Creates an instance of the DecisionService.
     * @param  {Object} options               Configuration options
     * @param  {Object} options.userProfileService
     * @param  {Object} options.logger
     * @return {Object} An instance of the DecisionService
     */
    createDecisionService: function(options) {
      return new DecisionService(options);
    },
  };

  /**
   * Copyright 2017, 2019 Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Provides utility method for parsing event tag values
   */

  var sprintf$6 = lib$2.sprintf;

  var LOG_LEVEL$3 = enums.LOG_LEVEL;
  var LOG_MESSAGES$3 = enums.LOG_MESSAGES;
  var MODULE_NAME$6 = 'EVENT_TAG_UTILS';
  var REVENUE_EVENT_METRIC_NAME = enums.RESERVED_EVENT_KEYWORDS.REVENUE;
  var VALUE_EVENT_METRIC_NAME = enums.RESERVED_EVENT_KEYWORDS.VALUE;

  var event_tag_utils = {
    /**
     * Grab the revenue value from the event tags. "revenue" is a reserved keyword.
     * @param {Object} eventTags
     * @param {Object} logger
     * @return {Integer|null}
     */
    getRevenueValue: function(eventTags, logger) {
      if (eventTags && eventTags.hasOwnProperty(REVENUE_EVENT_METRIC_NAME)) {
        var rawValue = eventTags[REVENUE_EVENT_METRIC_NAME];
        var parsedRevenueValue = parseInt(rawValue, 10);
        if (isNaN(parsedRevenueValue)) {
          logger.log(LOG_LEVEL$3.INFO, sprintf$6(LOG_MESSAGES$3.FAILED_TO_PARSE_REVENUE, MODULE_NAME$6, rawValue));
          return null;
        }
        logger.log(LOG_LEVEL$3.INFO, sprintf$6(LOG_MESSAGES$3.PARSED_REVENUE_VALUE, MODULE_NAME$6, parsedRevenueValue));
        return parsedRevenueValue;
      }
      return null;
    },

    /**
     * Grab the event value from the event tags. "value" is a reserved keyword.
     * @param {Object} eventTags
     * @param {Object} logger
     * @return {Number|null}
     */
    getEventValue: function(eventTags, logger) {
      if (eventTags && eventTags.hasOwnProperty(VALUE_EVENT_METRIC_NAME)) {
        var rawValue = eventTags[VALUE_EVENT_METRIC_NAME];
        var parsedEventValue = parseFloat(rawValue);
        if (isNaN(parsedEventValue)) {
          logger.log(LOG_LEVEL$3.INFO, sprintf$6(LOG_MESSAGES$3.FAILED_TO_PARSE_VALUE, MODULE_NAME$6, rawValue));
          return null;
        }
        logger.log(LOG_LEVEL$3.INFO, sprintf$6(LOG_MESSAGES$3.PARSED_NUMERIC_VALUE, MODULE_NAME$6, parsedEventValue));
        return parsedEventValue;
      }
      return null;
    },
  };

  /**
   * Copyright 2016-2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */






  var ACTIVATE_EVENT_KEY = 'campaign_activated';
  var CUSTOM_ATTRIBUTE_FEATURE_TYPE = 'custom';
  var ENDPOINT = 'https://logx.optimizely.com/v1/events';
  var HTTP_VERB = 'POST';

  /**
   * Get params which are used same in both conversion and impression events
   * @param  {Object} options.attributes    Object representing user attributes and values which need to be recorded
   * @param  {string} options.clientEngine  The client we are using: node or javascript
   * @param  {string} options.clientVersion The version of the client
   * @param  {Object} options.configObj     Object representing project configuration, including datafile information and mappings for quick lookup
   * @param  {string} options.userId        ID for user
   * @param  {Object} options.Logger        logger
   * @return {Object}                       Common params with properties that are used in both conversion and impression events
   */
  function getCommonEventParams(options) {
    var attributes = options.attributes;
    var configObj = options.configObj;
    var anonymize_ip = configObj.anonymizeIP;
    var botFiltering = configObj.botFiltering;
    if (anonymize_ip === null || anonymize_ip === undefined) {
      anonymize_ip = false;
    }

    var visitor = {
      snapshots: [],
      visitor_id: options.userId,
      attributes: []
    };

    var commonParams = {
      account_id: configObj.accountId,
      project_id: configObj.projectId,
      visitors: [visitor],
      revision: configObj.revision,
      client_name: options.clientEngine,
      client_version: options.clientVersion,
      anonymize_ip: anonymize_ip,
      enrich_decisions: true,
    };

    // Omit attribute values that are not supported by the log endpoint.
    fns.forOwn(attributes, function(attributeValue, attributeKey) {
      if (attributes_validator.isAttributeValid(attributeKey, attributeValue)) {
        var attributeId = project_config.getAttributeId(options.configObj, attributeKey, options.logger);
        if (attributeId) {
          commonParams.visitors[0].attributes.push({
            entity_id: attributeId,
            key: attributeKey,
            type: CUSTOM_ATTRIBUTE_FEATURE_TYPE,
            value: attributes[attributeKey],
          });
        }
      }
    });

    if (typeof botFiltering === 'boolean') {
      commonParams.visitors[0].attributes.push({
        entity_id: enums.CONTROL_ATTRIBUTES.BOT_FILTERING,
        key: enums.CONTROL_ATTRIBUTES.BOT_FILTERING,
        type: CUSTOM_ATTRIBUTE_FEATURE_TYPE,
        value: botFiltering,
      });
    }
    return commonParams;
  }

  /**
   * Creates object of params specific to impression events
   * @param  {Object} configObj    Object representing project configuration
   * @param  {string} experimentId ID of experiment for which impression needs to be recorded
   * @param  {string} variationId  ID for variation which would be presented to user
   * @return {Object}              Impression event params
   */
  function getImpressionEventParams(configObj, experimentId, variationId) {
    var impressionEventParams = {
        decisions: [{
          campaign_id: project_config.getLayerId(configObj, experimentId),
          experiment_id: experimentId,
          variation_id: variationId,
        }],
        events: [{
          entity_id: project_config.getLayerId(configObj, experimentId),
          timestamp: fns.currentTimestamp(),
          key: ACTIVATE_EVENT_KEY,
          uuid: fns.uuid(),
        }]

      };
    return impressionEventParams;
  }

  /**
   * Creates object of params specific to conversion events
   * @param  {Object} configObj                 Object representing project configuration
   * @param  {string} eventKey                  Event key representing the event which needs to be recorded
   * @param  {Object} eventTags                 Values associated with the event.
   * @param  {Object} logger                    Logger object
   * @return {Object}                           Conversion event params
   */
  function getVisitorSnapshot(configObj, eventKey, eventTags, logger) {
    var snapshot = {
      events: []
    };

    var eventDict = {
      entity_id: project_config.getEventId(configObj, eventKey),
      timestamp: fns.currentTimestamp(),
      uuid: fns.uuid(),
      key: eventKey,
    };

    if (eventTags) {
      var revenue = event_tag_utils.getRevenueValue(eventTags, logger);
      if (revenue !== null) {
        eventDict[enums.RESERVED_EVENT_KEYWORDS.REVENUE] = revenue;
      }

      var eventValue = event_tag_utils.getEventValue(eventTags, logger);
      if (eventValue !== null) {
        eventDict[enums.RESERVED_EVENT_KEYWORDS.VALUE] = eventValue;
      }

      eventDict['tags'] = eventTags;
    }
    snapshot.events.push(eventDict);

    return snapshot;
  }

  var event_builder = {
    /**
     * Create impression event params to be sent to the logging endpoint
     * @param  {Object} options               Object containing values needed to build impression event
     * @param  {Object} options.attributes    Object representing user attributes and values which need to be recorded
     * @param  {string} options.clientEngine  The client we are using: node or javascript
     * @param  {string} options.clientVersion The version of the client
     * @param  {Object} options.configObj     Object representing project configuration, including datafile information and mappings for quick lookup
     * @param  {string} options.experimentId  Experiment for which impression needs to be recorded
     * @param  {string} options.userId        ID for user
     * @param  {string} options.variationId   ID for variation which would be presented to user
     * @return {Object}                       Params to be used in impression event logging endpoint call
     */
    getImpressionEvent: function(options) {
      var impressionEvent = {
        httpVerb: HTTP_VERB
      };

      var commonParams = getCommonEventParams(options);
      impressionEvent.url = ENDPOINT;

      var impressionEventParams = getImpressionEventParams(options.configObj, options.experimentId, options.variationId);
      // combine Event params into visitor obj
      commonParams.visitors[0].snapshots.push(impressionEventParams);

      impressionEvent.params = commonParams;

      return impressionEvent;
    },

    /**
     * Create conversion event params to be sent to the logging endpoint
     * @param  {Object} options                           Object containing values needed to build conversion event
     * @param  {Object} options.attributes                Object representing user attributes and values which need to be recorded
     * @param  {string} options.clientEngine              The client we are using: node or javascript
     * @param  {string} options.clientVersion             The version of the client
     * @param  {Object} options.configObj                 Object representing project configuration, including datafile information and mappings for quick lookup
     * @param  {string} options.eventKey                  Event key representing the event which needs to be recorded
     * @param  {Object} options.eventTags                 Object with event-specific tags
     * @param  {Object} options.logger                    Logger object
     * @param  {string} options.userId                    ID for user
     * @return {Object}                                   Params to be used in conversion event logging endpoint call
     */
    getConversionEvent: function(options) {
      var conversionEvent = {
        httpVerb: HTTP_VERB,
      };

      var commonParams = getCommonEventParams(options);
      conversionEvent.url = ENDPOINT;

      var snapshot = getVisitorSnapshot(options.configObj,
                                              options.eventKey,
                                              options.eventTags,
                                              options.logger);

      commonParams.visitors[0].snapshots = [snapshot];
      conversionEvent.params = commonParams;

      return conversionEvent;
    },
  };

  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */







  var logger$4 = lib$1.getLogger('EVENT_BUILDER');

  /**
   * Creates an ImpressionEvent object from decision data
   * @param {Object} config
   * @param {Object} config.configObj
   * @param {String} config.experimentKey
   * @param {String} config.variationKey
   * @param {String} config.userId
   * @param {Object} config.userAttributes
   * @param {String} config.clientEngine
   * @param {String} config.clientVersion
   * @return {Object} an ImpressionEvent object
   */
  var buildImpressionEvent = function buildImpressionEvent(config) {
    var configObj = config.configObj;
    var experimentKey = config.experimentKey;
    var variationKey = config.variationKey;
    var userId = config.userId;
    var userAttributes = config.userAttributes;
    var clientEngine = config.clientEngine;
    var clientVersion = config.clientVersion;

    var variationId = project_config.getVariationIdFromExperimentAndVariationKey(configObj, experimentKey, variationKey);
    var experimentId = project_config.getExperimentId(configObj, experimentKey);
    var layerId = project_config.getLayerId(configObj, experimentId);

    return {
      type: 'impression',
      timestamp: fns.currentTimestamp(),
      uuid: fns.uuid(),

      user: {
        id: userId,
        attributes: buildVisitorAttributes(configObj, userAttributes),
      },

      context: {
        accountId: configObj.accountId,
        projectId: configObj.projectId,
        revision: configObj.revision,
        clientName: clientEngine,
        clientVersion: clientVersion,
        anonymizeIP: configObj.anonymizeIP || false,
        botFiltering: configObj.botFiltering,
      },

      layer: {
        id: layerId,
      },

      experiment: {
        id: experimentId,
        key: experimentKey,
      },

      variation: {
        id: variationId,
        key: variationKey,
      },
    };
  };

  /**
   * Creates a ConversionEvent object from track
   * @param {Object} config
   * @param {Object} config.configObj
   * @param {String} config.eventKey
   * @param {Object|undefined} config.eventTags
   * @param {String} config.userId
   * @param {Object} config.userAttributes
   * @param {String} config.clientEngine
   * @param {String} config.clientVersion
   * @return {Object} a ConversionEvent object
   */
  var buildConversionEvent = function buildConversionEvent(config) {
    var configObj = config.configObj;
    var userId = config.userId;
    var userAttributes = config.userAttributes;
    var clientEngine = config.clientEngine;
    var clientVersion = config.clientVersion;

    var eventKey = config.eventKey;
    var eventTags = config.eventTags;
    var eventId = project_config.getEventId(configObj, eventKey);

    return {
      type: 'conversion',
      timestamp: fns.currentTimestamp(),
      uuid: fns.uuid(),

      user: {
        id: userId,
        attributes: buildVisitorAttributes(configObj, userAttributes),
      },

      context: {
        accountId: configObj.accountId,
        projectId: configObj.projectId,
        revision: configObj.revision,
        clientName: clientEngine,
        clientVersion: clientVersion,
        anonymizeIP: configObj.anonymizeIP || false,
        botFiltering: configObj.botFiltering,
      },

      event: {
        id: eventId,
        key: eventKey,
      },

      revenue: event_tag_utils.getRevenueValue(eventTags, logger$4),
      value: event_tag_utils.getEventValue(eventTags, logger$4),
      tags: eventTags,
    };
  };

  function buildVisitorAttributes(configObj, attributes) {
    var builtAttributes = [];
    // Omit attribute values that are not supported by the log endpoint.
    fns.forOwn(attributes, function(attributeValue, attributeKey) {
      if (attributes_validator.isAttributeValid(attributeKey, attributeValue)) {
        var attributeId = project_config.getAttributeId(configObj, attributeKey, logger$4);
        if (attributeId) {
          builtAttributes.push({
            entityId: attributeId,
            key: attributeKey,
            value: attributes[attributeKey],
          });
        }
      }
    });

    return builtAttributes;
  }

  var event_helpers = {
  	buildImpressionEvent: buildImpressionEvent,
  	buildConversionEvent: buildConversionEvent
  };

  var events = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  function areEventContextsEqual(eventA, eventB) {
      var contextA = eventA.context;
      var contextB = eventB.context;
      return (contextA.accountId === contextB.accountId &&
          contextA.projectId === contextB.projectId &&
          contextA.clientName === contextB.clientName &&
          contextA.clientVersion === contextB.clientVersion &&
          contextA.revision === contextB.revision &&
          contextA.anonymizeIP === contextB.anonymizeIP &&
          contextA.botFiltering === contextB.botFiltering);
  }
  exports.areEventContextsEqual = areEventContextsEqual;
  });

  unwrapExports(events);
  var events_1 = events.areEventContextsEqual;

  var eventQueue = createCommonjsModule(function (module, exports) {
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  Object.defineProperty(exports, "__esModule", { value: true });

  var logger = lib$1.getLogger('EventProcessor');
  var Timer = /** @class */ (function () {
      function Timer(_a) {
          var timeout = _a.timeout, callback = _a.callback;
          this.timeout = Math.max(timeout, 0);
          this.callback = callback;
      }
      Timer.prototype.start = function () {
          this.timeoutId = setTimeout(this.callback, this.timeout);
      };
      Timer.prototype.refresh = function () {
          this.stop();
          this.start();
      };
      Timer.prototype.stop = function () {
          if (this.timeoutId) {
              clearTimeout(this.timeoutId);
          }
      };
      return Timer;
  }());
  var SingleEventQueue = /** @class */ (function () {
      function SingleEventQueue(_a) {
          var sink = _a.sink;
          this.sink = sink;
      }
      SingleEventQueue.prototype.start = function () {
          // no-op
      };
      SingleEventQueue.prototype.stop = function () {
          // no-op
          return Promise.resolve();
      };
      SingleEventQueue.prototype.enqueue = function (event) {
          this.sink([event]);
      };
      return SingleEventQueue;
  }());
  exports.SingleEventQueue = SingleEventQueue;
  var DefaultEventQueue = /** @class */ (function () {
      function DefaultEventQueue(_a) {
          var flushInterval = _a.flushInterval, maxQueueSize = _a.maxQueueSize, sink = _a.sink, batchComparator = _a.batchComparator;
          this.buffer = [];
          this.maxQueueSize = Math.max(maxQueueSize, 1);
          this.sink = sink;
          this.batchComparator = batchComparator;
          this.timer = new Timer({
              callback: this.flush.bind(this),
              timeout: flushInterval,
          });
          this.started = false;
      }
      DefaultEventQueue.prototype.start = function () {
          this.started = true;
          // dont start the timer until the first event is enqueued
      };
      DefaultEventQueue.prototype.stop = function () {
          this.started = false;
          var result = this.sink(this.buffer);
          this.buffer = [];
          this.timer.stop();
          return result;
      };
      DefaultEventQueue.prototype.enqueue = function (event) {
          if (!this.started) {
              logger.warn('Queue is stopped, not accepting event');
              return;
          }
          // If new event cannot be included into the current batch, flush so it can
          // be in its own new batch.
          var bufferedEvent = this.buffer[0];
          if (bufferedEvent && !this.batchComparator(bufferedEvent, event)) {
              this.flush();
          }
          // start the timer when the first event is put in
          if (this.buffer.length === 0) {
              this.timer.refresh();
          }
          this.buffer.push(event);
          if (this.buffer.length >= this.maxQueueSize) {
              this.flush();
          }
      };
      DefaultEventQueue.prototype.flush = function () {
          this.sink(this.buffer);
          this.buffer = [];
          this.timer.stop();
      };
      return DefaultEventQueue;
  }());
  exports.DefaultEventQueue = DefaultEventQueue;
  });

  unwrapExports(eventQueue);
  var eventQueue_1 = eventQueue.SingleEventQueue;
  var eventQueue_2 = eventQueue.DefaultEventQueue;

  var lib$3 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  function getTimestamp() {
      return new Date().getTime();
  }
  exports.getTimestamp = getTimestamp;
  function generateUUID() {
      return uuid_1.v4();
  }
  exports.generateUUID = generateUUID;
  /**
   * Validates a value is a valid TypeScript enum
   *
   * @export
   * @param {object} enumToCheck
   * @param {*} value
   * @returns {boolean}
   */
  function isValidEnum(enumToCheck, value) {
      var found = false;
      var keys = Object.keys(enumToCheck);
      for (var index = 0; index < keys.length; index++) {
          if (value === enumToCheck[keys[index]]) {
              found = true;
              break;
          }
      }
      return found;
  }
  exports.isValidEnum = isValidEnum;
  function groupBy(arr, grouperFn) {
      var grouper = {};
      arr.forEach(function (item) {
          var key = grouperFn(item);
          grouper[key] = grouper[key] || [];
          grouper[key].push(item);
      });
      return objectValues(grouper);
  }
  exports.groupBy = groupBy;
  function objectValues(obj) {
      return Object.keys(obj).map(function (key) { return obj[key]; });
  }
  exports.objectValues = objectValues;
  function objectEntries(obj) {
      return Object.keys(obj).map(function (key) { return [key, obj[key]]; });
  }
  exports.objectEntries = objectEntries;
  function find(arr, cond) {
      var found;
      for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
          var item = arr_1[_i];
          if (cond(item)) {
              found = item;
              break;
          }
      }
      return found;
  }
  exports.find = find;
  function keyBy(arr, keyByFn) {
      var map = {};
      arr.forEach(function (item) {
          var key = keyByFn(item);
          map[key] = item;
      });
      return map;
  }
  exports.keyBy = keyBy;
  function sprintf(format) {
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
      }
      var i = 0;
      return format.replace(/%s/g, function () {
          var arg = args[i++];
          var type = typeof arg;
          if (type === 'function') {
              return arg();
          }
          else if (type === 'string') {
              return arg;
          }
          else {
              return String(arg);
          }
      });
  }
  exports.sprintf = sprintf;
  /*
   * Notification types for use with NotificationCenter
   * Format is EVENT: <list of parameters to callback>
   *
   * SDK consumers can use these to register callbacks with the notification center.
   *
   *  @deprecated since 3.1.0
   *  ACTIVATE: An impression event will be sent to Optimizely
   *  Callbacks will receive an object argument with the following properties:
   *    - experiment {Object}
   *    - userId {string}
   *    - attributes {Object|undefined}
   *    - variation {Object}
   *    - logEvent {Object}
   *
   *  DECISION: A decision is made in the system. i.e. user activation,
   *  feature access or feature-variable value retrieval
   *  Callbacks will receive an object argument with the following properties:
   *    - type {string}
   *    - userId {string}
   *    - attributes {Object|undefined}
   *    - decisionInfo {Object|undefined}
   *
   *  LOG_EVENT: A batch of events, which could contain impressions and/or conversions,
   *  will be sent to Optimizely
   *  Callbacks will receive an object argument with the following properties:
   *    - url {string}
   *    - httpVerb {string}
   *    - params {Object}
   *
   *  OPTIMIZELY_CONFIG_UPDATE: This Optimizely instance has been updated with a new
   *  config
   *
   *  TRACK: A conversion event will be sent to Optimizely
   *  Callbacks will receive the an object argument with the following properties:
   *    - eventKey {string}
   *    - userId {string}
   *    - attributes {Object|undefined}
   *    - eventTags {Object|undefined}
   *    - logEvent {Object}
   *
   */
  var NOTIFICATION_TYPES;
  (function (NOTIFICATION_TYPES) {
      NOTIFICATION_TYPES["ACTIVATE"] = "ACTIVATE:experiment, user_id,attributes, variation, event";
      NOTIFICATION_TYPES["DECISION"] = "DECISION:type, userId, attributes, decisionInfo";
      NOTIFICATION_TYPES["LOG_EVENT"] = "LOG_EVENT:logEvent";
      NOTIFICATION_TYPES["OPTIMIZELY_CONFIG_UPDATE"] = "OPTIMIZELY_CONFIG_UPDATE";
      NOTIFICATION_TYPES["TRACK"] = "TRACK:event_key, user_id, attributes, event_tags, event";
  })(NOTIFICATION_TYPES = exports.NOTIFICATION_TYPES || (exports.NOTIFICATION_TYPES = {}));
  });

  unwrapExports(lib$3);
  var lib_1$3 = lib$3.getTimestamp;
  var lib_2$2 = lib$3.generateUUID;
  var lib_3$2 = lib$3.isValidEnum;
  var lib_4$2 = lib$3.groupBy;
  var lib_5$2 = lib$3.objectValues;
  var lib_6$2 = lib$3.objectEntries;
  var lib_7$2 = lib$3.find;
  var lib_8$2 = lib$3.keyBy;
  var lib_9$1 = lib$3.sprintf;
  var lib_10$1 = lib$3.NOTIFICATION_TYPES;

  var eventProcessor = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });




  var logger = lib$1.getLogger('EventProcessor');
  var DEFAULT_FLUSH_INTERVAL = 30000; // Unit is ms - default flush interval is 30s
  var DEFAULT_MAX_QUEUE_SIZE = 10;
  var AbstractEventProcessor = /** @class */ (function () {
      function AbstractEventProcessor(_a) {
          var dispatcher = _a.dispatcher, _b = _a.flushInterval, flushInterval = _b === void 0 ? 30000 : _b, _c = _a.maxQueueSize, maxQueueSize = _c === void 0 ? 3000 : _c, notificationCenter = _a.notificationCenter;
          var _this = this;
          this.dispatcher = dispatcher;
          if (flushInterval <= 0) {
              logger.warn("Invalid flushInterval " + flushInterval + ", defaulting to " + DEFAULT_FLUSH_INTERVAL);
              flushInterval = DEFAULT_FLUSH_INTERVAL;
          }
          maxQueueSize = Math.floor(maxQueueSize);
          if (maxQueueSize < 1) {
              logger.warn("Invalid maxQueueSize " + maxQueueSize + ", defaulting to " + DEFAULT_MAX_QUEUE_SIZE);
              maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;
          }
          maxQueueSize = Math.max(1, maxQueueSize);
          if (maxQueueSize > 1) {
              this.queue = new eventQueue.DefaultEventQueue({
                  flushInterval: flushInterval,
                  maxQueueSize: maxQueueSize,
                  sink: function (buffer) { return _this.drainQueue(buffer); },
                  batchComparator: events.areEventContextsEqual,
              });
          }
          else {
              this.queue = new eventQueue.SingleEventQueue({
                  sink: function (buffer) { return _this.drainQueue(buffer); },
              });
          }
          this.notificationCenter = notificationCenter;
      }
      AbstractEventProcessor.prototype.drainQueue = function (buffer) {
          var _this = this;
          return new Promise(function (resolve) {
              logger.debug('draining queue with %s events', buffer.length);
              if (buffer.length === 0) {
                  resolve();
                  return;
              }
              var formattedEvent = _this.formatEvents(buffer);
              _this.dispatcher.dispatchEvent(formattedEvent, function () {
                  resolve();
              });
              if (_this.notificationCenter) {
                  _this.notificationCenter.sendNotifications(lib$3.NOTIFICATION_TYPES.LOG_EVENT, formattedEvent);
              }
          });
      };
      AbstractEventProcessor.prototype.process = function (event) {
          this.queue.enqueue(event);
      };
      AbstractEventProcessor.prototype.stop = function () {
          try {
              // swallow, an error stopping this queue should prevent this from stopping
              return this.queue.stop();
          }
          catch (e) {
              logger.error('Error stopping EventProcessor: "%s"', e.message, e);
          }
          return Promise.resolve();
      };
      AbstractEventProcessor.prototype.start = function () {
          this.queue.start();
      };
      return AbstractEventProcessor;
  }());
  exports.AbstractEventProcessor = AbstractEventProcessor;
  });

  unwrapExports(eventProcessor);
  var eventProcessor_1 = eventProcessor.AbstractEventProcessor;

  var pendingEventsStore = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */


  var logger = lib$1.getLogger('EventProcessor');
  var LocalStorageStore = /** @class */ (function () {
      function LocalStorageStore(_a) {
          var key = _a.key, _b = _a.maxValues, maxValues = _b === void 0 ? 1000 : _b;
          this.LS_KEY = key;
          this.maxValues = maxValues;
      }
      LocalStorageStore.prototype.get = function (key) {
          return this.getMap()[key] || null;
      };
      LocalStorageStore.prototype.set = function (key, value) {
          var map = this.getMap();
          map[key] = value;
          this.replace(map);
      };
      LocalStorageStore.prototype.remove = function (key) {
          var map = this.getMap();
          delete map[key];
          this.replace(map);
      };
      LocalStorageStore.prototype.values = function () {
          return lib$3.objectValues(this.getMap());
      };
      LocalStorageStore.prototype.clear = function () {
          this.replace({});
      };
      LocalStorageStore.prototype.replace = function (map) {
          try {
              localStorage.setItem(this.LS_KEY, JSON.stringify(map));
              this.clean();
          }
          catch (e) {
              logger.error(e);
          }
      };
      LocalStorageStore.prototype.clean = function () {
          var map = this.getMap();
          var keys = Object.keys(map);
          var toRemove = keys.length - this.maxValues;
          if (toRemove < 1) {
              return;
          }
          var entries = keys.map(function (key) { return ({
              key: key,
              value: map[key]
          }); });
          entries.sort(function (a, b) { return a.value.timestamp - b.value.timestamp; });
          for (var i = 0; i < toRemove; i++) {
              delete map[entries[i].key];
          }
          this.replace(map);
      };
      LocalStorageStore.prototype.getMap = function () {
          try {
              var data = localStorage.getItem(this.LS_KEY);
              if (data) {
                  return JSON.parse(data) || {};
              }
          }
          catch (e) {
              logger.error(e);
          }
          return {};
      };
      return LocalStorageStore;
  }());
  exports.LocalStorageStore = LocalStorageStore;
  });

  unwrapExports(pendingEventsStore);
  var pendingEventsStore_1 = pendingEventsStore.LocalStorageStore;

  var pendingEventsDispatcher = createCommonjsModule(function (module, exports) {
  var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */



  var logger = lib$1.getLogger('EventProcessor');
  var PendingEventsDispatcher = /** @class */ (function () {
      function PendingEventsDispatcher(_a) {
          var eventDispatcher = _a.eventDispatcher, store = _a.store;
          this.dispatcher = eventDispatcher;
          this.store = store;
      }
      PendingEventsDispatcher.prototype.dispatchEvent = function (request, callback) {
          this.send({
              uuid: lib$3.generateUUID(),
              timestamp: lib$3.getTimestamp(),
              request: request,
          }, callback);
      };
      PendingEventsDispatcher.prototype.sendPendingEvents = function () {
          var _this = this;
          var pendingEvents = this.store.values();
          logger.debug('Sending %s pending events from previous page', pendingEvents.length);
          pendingEvents.forEach(function (item) {
              try {
                  _this.send(item, function () { });
              }
              catch (e) { }
          });
      };
      PendingEventsDispatcher.prototype.send = function (entry, callback) {
          var _this = this;
          this.store.set(entry.uuid, entry);
          this.dispatcher.dispatchEvent(entry.request, function (response) {
              _this.store.remove(entry.uuid);
              callback(response);
          });
      };
      return PendingEventsDispatcher;
  }());
  exports.PendingEventsDispatcher = PendingEventsDispatcher;
  var LocalStoragePendingEventsDispatcher = /** @class */ (function (_super) {
      __extends(LocalStoragePendingEventsDispatcher, _super);
      function LocalStoragePendingEventsDispatcher(_a) {
          var eventDispatcher = _a.eventDispatcher;
          return _super.call(this, {
              eventDispatcher: eventDispatcher,
              store: new pendingEventsStore.LocalStorageStore({
                  // TODO make this configurable
                  maxValues: 100,
                  key: 'fs_optly_pending_events',
              }),
          }) || this;
      }
      return LocalStoragePendingEventsDispatcher;
  }(PendingEventsDispatcher));
  exports.LocalStoragePendingEventsDispatcher = LocalStoragePendingEventsDispatcher;
  });

  unwrapExports(pendingEventsDispatcher);
  var pendingEventsDispatcher_1 = pendingEventsDispatcher.PendingEventsDispatcher;
  var pendingEventsDispatcher_2 = pendingEventsDispatcher.LocalStoragePendingEventsDispatcher;

  var buildEventV1 = createCommonjsModule(function (module, exports) {
  var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
      __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                  t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  var ACTIVATE_EVENT_KEY = 'campaign_activated';
  var CUSTOM_ATTRIBUTE_FEATURE_TYPE = 'custom';
  var BOT_FILTERING_KEY = '$opt_bot_filtering';
  /**
   * Given an array of batchable Decision or ConversionEvent events it returns
   * a single EventV1 with proper batching
   *
   * @param {ProcessableEvents[]} events
   * @returns {EventV1}
   */
  function makeBatchedEventV1(events) {
      var visitors = [];
      var data = events[0];
      events.forEach(function (event) {
          if (event.type === 'conversion' || event.type === 'impression') {
              var visitor = makeVisitor(event);
              if (event.type === 'impression') {
                  visitor.snapshots.push(makeDecisionSnapshot(event));
              }
              else if (event.type === 'conversion') {
                  visitor.snapshots.push(makeConversionSnapshot(event));
              }
              visitors.push(visitor);
          }
      });
      return {
          client_name: data.context.clientName,
          client_version: data.context.clientVersion,
          account_id: data.context.accountId,
          project_id: data.context.projectId,
          revision: data.context.revision,
          anonymize_ip: data.context.anonymizeIP,
          enrich_decisions: true,
          visitors: visitors,
      };
  }
  exports.makeBatchedEventV1 = makeBatchedEventV1;
  function makeConversionSnapshot(conversion) {
      var tags = __assign({}, conversion.tags);
      delete tags['revenue'];
      delete tags['value'];
      var event = {
          entity_id: conversion.event.id,
          key: conversion.event.key,
          timestamp: conversion.timestamp,
          uuid: conversion.uuid,
      };
      if (conversion.tags) {
          event.tags = conversion.tags;
      }
      if (conversion.value != null) {
          event.value = conversion.value;
      }
      if (conversion.revenue != null) {
          event.revenue = conversion.revenue;
      }
      return {
          events: [event],
      };
  }
  function makeDecisionSnapshot(event) {
      var layer = event.layer, experiment = event.experiment, variation = event.variation;
      var layerId = layer ? layer.id : null;
      var experimentId = experiment ? experiment.id : null;
      var variationId = variation ? variation.id : null;
      return {
          decisions: [
              {
                  campaign_id: layerId,
                  experiment_id: experimentId,
                  variation_id: variationId,
              },
          ],
          events: [
              {
                  entity_id: layerId,
                  timestamp: event.timestamp,
                  key: ACTIVATE_EVENT_KEY,
                  uuid: event.uuid,
              },
          ],
      };
  }
  function makeVisitor(data) {
      var visitor = {
          snapshots: [],
          visitor_id: data.user.id,
          attributes: [],
      };
      data.user.attributes.forEach(function (attr) {
          visitor.attributes.push({
              entity_id: attr.entityId,
              key: attr.key,
              type: 'custom',
              value: attr.value,
          });
      });
      if (typeof data.context.botFiltering === 'boolean') {
          visitor.attributes.push({
              entity_id: BOT_FILTERING_KEY,
              key: BOT_FILTERING_KEY,
              type: CUSTOM_ATTRIBUTE_FEATURE_TYPE,
              value: data.context.botFiltering,
          });
      }
      return visitor;
  }
  /**
   * Event for usage with v1 logtier
   *
   * @export
   * @interface EventBuilderV1
   */
  function buildImpressionEventV1(data) {
      var visitor = makeVisitor(data);
      visitor.snapshots.push(makeDecisionSnapshot(data));
      return {
          client_name: data.context.clientName,
          client_version: data.context.clientVersion,
          account_id: data.context.accountId,
          project_id: data.context.projectId,
          revision: data.context.revision,
          anonymize_ip: data.context.anonymizeIP,
          enrich_decisions: true,
          visitors: [visitor],
      };
  }
  exports.buildImpressionEventV1 = buildImpressionEventV1;
  function buildConversionEventV1(data) {
      var visitor = makeVisitor(data);
      visitor.snapshots.push(makeConversionSnapshot(data));
      return {
          client_name: data.context.clientName,
          client_version: data.context.clientVersion,
          account_id: data.context.accountId,
          project_id: data.context.projectId,
          revision: data.context.revision,
          anonymize_ip: data.context.anonymizeIP,
          enrich_decisions: true,
          visitors: [visitor],
      };
  }
  exports.buildConversionEventV1 = buildConversionEventV1;
  });

  unwrapExports(buildEventV1);
  var buildEventV1_1 = buildEventV1.makeBatchedEventV1;
  var buildEventV1_2 = buildEventV1.buildImpressionEventV1;
  var buildEventV1_3 = buildEventV1.buildConversionEventV1;

  var v1EventProcessor = createCommonjsModule(function (module, exports) {
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  Object.defineProperty(exports, "__esModule", { value: true });


  var LogTierV1EventProcessor = /** @class */ (function (_super) {
      __extends(LogTierV1EventProcessor, _super);
      function LogTierV1EventProcessor() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      LogTierV1EventProcessor.prototype.formatEvents = function (events) {
          return {
              url: 'https://logx.optimizely.com/v1/events',
              httpVerb: 'POST',
              params: buildEventV1.makeBatchedEventV1(events),
          };
      };
      return LogTierV1EventProcessor;
  }(eventProcessor.AbstractEventProcessor));
  exports.LogTierV1EventProcessor = LogTierV1EventProcessor;
  });

  unwrapExports(v1EventProcessor);
  var v1EventProcessor_1 = v1EventProcessor.LogTierV1EventProcessor;

  var lib$4 = createCommonjsModule(function (module, exports) {
  function __export(m) {
      for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
  }
  Object.defineProperty(exports, "__esModule", { value: true });
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  __export(events);
  __export(eventProcessor);
  __export(pendingEventsDispatcher);
  __export(buildEventV1);
  __export(v1EventProcessor);
  });

  unwrapExports(lib$4);

  /**
   * Copyright 2017, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  /**
   * Provides utility method for validating that event tags user has provided are valid
   */

  var sprintf$7 = lib$2.sprintf;

  var ERROR_MESSAGES$5 = enums.ERROR_MESSAGES;
  var MODULE_NAME$7 = 'EVENT_TAGS_VALIDATOR';

  var event_tags_validator = {
    /**
     * Validates user's provided event tags
     * @param  {Object}  event tags
     * @return {boolean} True if event tags are valid
     * @throws If event tags are not valid
     */
    validate: function(eventTags) {
      if (typeof eventTags === 'object' && !Array.isArray(eventTags) && eventTags !== null) {
        return true;
      } else {
        throw new Error(sprintf$7(ERROR_MESSAGES$5.INVALID_EVENT_TAGS, MODULE_NAME$7));
      }
    },
  };

  /**
   * Copyright 2017, 2019 Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */



  var sprintf$8 = lib$2.sprintf;

  var LOG_LEVEL$4 = enums.LOG_LEVEL;
  var LOG_MESSAGES$4 = enums.LOG_MESSAGES;
  var MODULE_NAME$8 = 'NOTIFICATION_CENTER';

  /**
   * NotificationCenter allows registration and triggering of callback functions using
   * notification event types defined in NOTIFICATION_TYPES of utils/enums/index.js:
   * - ACTIVATE: An impression event will be sent to Optimizely.
   * - TRACK a conversion event will be sent to Optimizely
   * @constructor
   * @param {Object} options
   * @param {Object} options.logger An instance of a logger to log messages with
   * @param {object} options.errorHandler An instance of errorHandler to handle any unexpected error
   * @returns {Object}
   */
  function NotificationCenter(options) {
    this.logger = options.logger;
    this.errorHandler = options.errorHandler;
    this.__notificationListeners = {};
    fns.forOwn(enums.NOTIFICATION_TYPES, function(notificationTypeEnum) {
      this.__notificationListeners[notificationTypeEnum] = [];
    }.bind(this));
    this.__listenerId = 1;
  }

  /**
   * Add a notification callback to the notification center
   * @param {string} notificationType One of the values from NOTIFICATION_TYPES in utils/enums/index.js
   * @param {Function} callback Function that will be called when the event is triggered
   * @returns {number} If the callback was successfully added, returns a listener ID which can be used
   * to remove the callback by calling removeNotificationListener. The ID is a number greater than 0.
   * If there was an error and the listener was not added, addNotificationListener returns -1. This
   * can happen if the first argument is not a valid notification type, or if the same callback
   * function was already added as a listener by a prior call to this function.
   */
  NotificationCenter.prototype.addNotificationListener = function (notificationType, callback) {
    try {
      var isNotificationTypeValid = fns.values(enums.NOTIFICATION_TYPES)
        .indexOf(notificationType) > -1;
      if (!isNotificationTypeValid) {
        return -1;
      }

      if (!this.__notificationListeners[notificationType]) {
        this.__notificationListeners[notificationType] = [];
      }

      var callbackAlreadyAdded = false;
      fns.forEach(this.__notificationListeners[notificationType], function (listenerEntry) {
        if (listenerEntry.callback === callback) {
          callbackAlreadyAdded = true;
          return false;
        }
      });
      if (callbackAlreadyAdded) {
        return -1;
      }

      this.__notificationListeners[notificationType].push({
        id: this.__listenerId,
        callback: callback,
      });

      var returnId = this.__listenerId;
      this.__listenerId += 1;
      return returnId;
    } catch (e) {
      this.logger.log(LOG_LEVEL$4.ERROR, e.message);
      this.errorHandler.handleError(e);
      return -1;
    }
  };

  /**
   * Remove a previously added notification callback
   * @param {number} listenerId ID of listener to be removed
   * @returns {boolean} Returns true if the listener was found and removed, and false
   * otherwise.
   */
  NotificationCenter.prototype.removeNotificationListener = function (listenerId) {
    try {
      var indexToRemove;
      var typeToRemove;
      fns.forOwn(this.__notificationListeners, function (listenersForType, notificationType) {
        fns.forEach(listenersForType, function (listenerEntry, i) {
          if (listenerEntry.id === listenerId) {
            indexToRemove = i;
            typeToRemove = notificationType;
            return false;
          }
        });
        if (indexToRemove !== undefined && typeToRemove !== undefined) {
          return false;
        }
      });

      if (indexToRemove !== undefined && typeToRemove !== undefined) {
        this.__notificationListeners[typeToRemove].splice(indexToRemove, 1);
        return true;
      }
    } catch (e) {
      this.logger.log(LOG_LEVEL$4.ERROR, e.message);
      this.errorHandler.handleError(e);
    }
    return false;
  };

  /**
   * Removes all previously added notification listeners, for all notification types
   */
  NotificationCenter.prototype.clearAllNotificationListeners = function () {
    try{
      fns.forOwn(enums.NOTIFICATION_TYPES, function (notificationTypeEnum) {
        this.__notificationListeners[notificationTypeEnum] = [];
      }.bind(this));
    } catch (e) {
      this.logger.log(LOG_LEVEL$4.ERROR, e.message);
      this.errorHandler.handleError(e);
    }
  };

  /**
   * Remove all previously added notification listeners for the argument type
   * @param {string} notificationType One of enums.NOTIFICATION_TYPES
   */
  NotificationCenter.prototype.clearNotificationListeners = function (notificationType) {
    try {
      this.__notificationListeners[notificationType] = [];
    } catch (e) {
      this.logger.log(LOG_LEVEL$4.ERROR, e.message);
      this.errorHandler.handleError(e);
    }
  };

  /**
   * Fires notifications for the argument type. All registered callbacks for this type will be
   * called. The notificationData object will be passed on to callbacks called.
   * @param {string} notificationType One of enums.NOTIFICATION_TYPES
   * @param {Object} notificationData Will be passed to callbacks called
   */
  NotificationCenter.prototype.sendNotifications = function (notificationType, notificationData) {
    try {
      fns.forEach(this.__notificationListeners[notificationType], function (listenerEntry) {
        var callback = listenerEntry.callback;
        try {
          callback(notificationData);
        } catch (ex) {
          this.logger.log(LOG_LEVEL$4.ERROR, sprintf$8(LOG_MESSAGES$4.NOTIFICATION_LISTENER_EXCEPTION, MODULE_NAME$8, notificationType, ex.message));
        }
      }.bind(this));
    } catch (e) {
      this.logger.log(LOG_LEVEL$4.ERROR, e.message);
      this.errorHandler.handleError(e);
    }
  };

  var notification_center = {
    /**
     * Create an instance of NotificationCenter
     * @param {Object} options
     * @param {Object} options.logger An instance of a logger to log messages with
     * @returns {Object} An instance of NotificationCenter
     */
    createNotificationCenter: function(options) {
      return new NotificationCenter(options);
    },
  };

  /****************************************************************************
   * Copyright 2017, Optimizely, Inc. and contributors                        *
   *                                                                          *
   * Licensed under the Apache License, Version 2.0 (the "License");          *
   * you may not use this file except in compliance with the License.         *
   * You may obtain a copy of the License at                                  *
   *                                                                          *
   *    http://www.apache.org/licenses/LICENSE-2.0                            *
   *                                                                          *
   * Unless required by applicable law or agreed to in writing, software      *
   * distributed under the License is distributed on an "AS IS" BASIS,        *
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
   * See the License for the specific language governing permissions and      *
   * limitations under the License.                                           *
   ***************************************************************************/

  /**
   * Provides utility method for validating that the given user profile service implementation is valid.
   */

  var sprintf$9 = lib$2.sprintf;

  var ERROR_MESSAGES$6 = enums.ERROR_MESSAGES;
  var MODULE_NAME$9 = 'USER_PROFILE_SERVICE_VALIDATOR';

  var user_profile_service_validator = {
    /**
     * Validates user's provided user profile service instance
     * @param  {Object}  userProfileServiceInstance
     * @return {boolean} True if the instance is valid
     * @throws If the instance is not valid
     */
    validate: function(userProfileServiceInstance) {
      if (typeof userProfileServiceInstance.lookup !== 'function') {
        throw new Error(sprintf$9(ERROR_MESSAGES$6.INVALID_USER_PROFILE_SERVICE, MODULE_NAME$9, 'Missing function \'lookup\''));
      } else if (typeof userProfileServiceInstance.save !== 'function') {
        throw new Error(sprintf$9(ERROR_MESSAGES$6.INVALID_USER_PROFILE_SERVICE, MODULE_NAME$9, 'Missing function \'save\''));
      }
      return true;
    },
  };

  var config = createCommonjsModule(function (module, exports) {
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.DEFAULT_UPDATE_INTERVAL = 5 * 60 * 1000; // 5 minutes
  exports.MIN_UPDATE_INTERVAL = 1000;
  exports.DEFAULT_URL_TEMPLATE = "https://cdn.optimizely.com/datafiles/%s.json";
  exports.BACKOFF_BASE_WAIT_SECONDS_BY_ERROR_COUNT = [0, 8, 16, 32, 64, 128, 256, 512];
  exports.REQUEST_TIMEOUT_MS = 60 * 1000; // 1 minute
  });

  unwrapExports(config);
  var config_1 = config.DEFAULT_UPDATE_INTERVAL;
  var config_2 = config.MIN_UPDATE_INTERVAL;
  var config_3 = config.DEFAULT_URL_TEMPLATE;
  var config_4 = config.BACKOFF_BASE_WAIT_SECONDS_BY_ERROR_COUNT;
  var config_5 = config.REQUEST_TIMEOUT_MS;

  var nodeRequest = createCommonjsModule(function (module, exports) {
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
      __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                  t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };
  var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
      return (mod && mod.__esModule) ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });
  var http_1 = __importDefault(http);
  var https_1 = __importDefault(https);
  var url_1 = __importDefault(url);

  function getRequestOptionsFromUrl(url) {
      return {
          hostname: url.hostname,
          path: url.path,
          port: url.port,
          protocol: url.protocol,
      };
  }
  /**
   * Convert incomingMessage.headers (which has type http.IncomingHttpHeaders) into our Headers type defined in src/http.ts.
   *
   * Our Headers type is simplified and can't represent mutliple values for the same header name.
   *
   * We don't currently need multiple values support, and the consumer code becomes simpler if it can assume at-most 1 value
   * per header name.
   *
   */
  function createHeadersFromNodeIncomingMessage(incomingMessage) {
      var headers = {};
      Object.keys(incomingMessage.headers).forEach(function (headerName) {
          var headerValue = incomingMessage.headers[headerName];
          if (typeof headerValue === 'string') {
              headers[headerName] = headerValue;
          }
          else if (typeof headerValue === 'undefined') ;
          else {
              // array
              if (headerValue.length > 0) {
                  // We don't care about multiple values - just take the first one
                  headers[headerName] = headerValue[0];
              }
          }
      });
      return headers;
  }
  function getResponseFromRequest(request) {
      // TODO: When we drop support for Node 6, consider using util.promisify instead of
      // constructing own Promise
      return new Promise(function (resolve, reject) {
          var timeout = setTimeout(function () {
              request.abort();
              reject(new Error('Request timed out'));
          }, config.REQUEST_TIMEOUT_MS);
          request.once('response', function (incomingMessage) {
              if (request.aborted) {
                  return;
              }
              incomingMessage.setEncoding('utf8');
              var responseData = '';
              incomingMessage.on('data', function (chunk) {
                  if (!request.aborted) {
                      responseData += chunk;
                  }
              });
              incomingMessage.on('end', function () {
                  if (request.aborted) {
                      return;
                  }
                  clearTimeout(timeout);
                  resolve({
                      statusCode: incomingMessage.statusCode,
                      body: responseData,
                      headers: createHeadersFromNodeIncomingMessage(incomingMessage),
                  });
              });
          });
          request.on('error', function (err) {
              clearTimeout(timeout);
              if (err instanceof Error) {
                  reject(err);
              }
              else if (typeof err === 'string') {
                  reject(new Error(err));
              }
              else {
                  reject(new Error('Request error'));
              }
          });
      });
  }
  function makeGetRequest(reqUrl, headers) {
      // TODO: Use non-legacy URL parsing when we drop support for Node 6
      var parsedUrl = url_1.default.parse(reqUrl);
      var requester;
      if (parsedUrl.protocol === 'http:') {
          requester = http_1.default.request;
      }
      else if (parsedUrl.protocol === 'https:') {
          requester = https_1.default.request;
      }
      else {
          return {
              responsePromise: Promise.reject(new Error("Unsupported protocol: " + parsedUrl.protocol)),
              abort: function () { },
          };
      }
      var requestOptions = __assign({}, getRequestOptionsFromUrl(parsedUrl), { method: 'GET', headers: headers });
      var request = requester(requestOptions);
      var responsePromise = getResponseFromRequest(request);
      request.end();
      return {
          abort: function () {
              request.abort();
          },
          responsePromise: responsePromise,
      };
  }
  exports.makeGetRequest = makeGetRequest;
  });

  unwrapExports(nodeRequest);
  var nodeRequest_1 = nodeRequest.makeGetRequest;

  var eventEmitter = createCommonjsModule(function (module, exports) {
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  Object.defineProperty(exports, "__esModule", { value: true });
  var EventEmitter = /** @class */ (function () {
      function EventEmitter() {
          this.listeners = {};
          this.listenerId = 1;
      }
      EventEmitter.prototype.on = function (eventName, listener) {
          var _this = this;
          if (!this.listeners[eventName]) {
              this.listeners[eventName] = {};
          }
          var currentListenerId = String(this.listenerId);
          this.listenerId++;
          this.listeners[eventName][currentListenerId] = listener;
          return function () {
              if (_this.listeners[eventName]) {
                  delete _this.listeners[eventName][currentListenerId];
              }
          };
      };
      EventEmitter.prototype.emit = function (eventName, arg) {
          var listeners = this.listeners[eventName];
          if (listeners) {
              Object.keys(listeners).forEach(function (listenerId) {
                  var listener = listeners[listenerId];
                  listener(arg);
              });
          }
      };
      EventEmitter.prototype.removeAllListeners = function () {
          this.listeners = {};
      };
      return EventEmitter;
  }());
  exports.default = EventEmitter;
  // TODO: Create a typed event emitter for use in TS only (not JS)
  });

  unwrapExports(eventEmitter);

  var backoffController = createCommonjsModule(function (module, exports) {
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  Object.defineProperty(exports, "__esModule", { value: true });

  function randomMilliseconds() {
      return Math.round(Math.random() * 1000);
  }
  var BackoffController = /** @class */ (function () {
      function BackoffController() {
          this.errorCount = 0;
      }
      BackoffController.prototype.getDelay = function () {
          if (this.errorCount === 0) {
              return 0;
          }
          var baseWaitSeconds = config.BACKOFF_BASE_WAIT_SECONDS_BY_ERROR_COUNT[Math.min(config.BACKOFF_BASE_WAIT_SECONDS_BY_ERROR_COUNT.length - 1, this.errorCount)];
          return baseWaitSeconds * 1000 + randomMilliseconds();
      };
      BackoffController.prototype.countError = function () {
          if (this.errorCount < config.BACKOFF_BASE_WAIT_SECONDS_BY_ERROR_COUNT.length - 1) {
              this.errorCount++;
          }
      };
      BackoffController.prototype.reset = function () {
          this.errorCount = 0;
      };
      return BackoffController;
  }());
  exports.default = BackoffController;
  });

  unwrapExports(backoffController);

  var httpPollingDatafileManager = createCommonjsModule(function (module, exports) {
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var __assign = (commonjsGlobal && commonjsGlobal.__assign) || function () {
      __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                  t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };
  var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
      return (mod && mod.__esModule) ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });


  var eventEmitter_1 = __importDefault(eventEmitter);

  var backoffController_1 = __importDefault(backoffController);
  var logger = lib$1.getLogger('DatafileManager');
  var UPDATE_EVT = 'update';
  function isValidUpdateInterval(updateInterval) {
      return updateInterval >= config.MIN_UPDATE_INTERVAL;
  }
  function isSuccessStatusCode(statusCode) {
      return statusCode >= 200 && statusCode < 400;
  }
  var HttpPollingDatafileManager = /** @class */ (function () {
      function HttpPollingDatafileManager(config$1) {
          var _this = this;
          var configWithDefaultsApplied = __assign({}, this.getConfigDefaults(), config$1);
          var datafile = configWithDefaultsApplied.datafile, _a = configWithDefaultsApplied.autoUpdate, autoUpdate = _a === void 0 ? false : _a, sdkKey = configWithDefaultsApplied.sdkKey, _b = configWithDefaultsApplied.updateInterval, updateInterval = _b === void 0 ? config.DEFAULT_UPDATE_INTERVAL : _b, _c = configWithDefaultsApplied.urlTemplate, urlTemplate = _c === void 0 ? config.DEFAULT_URL_TEMPLATE : _c;
          this.isReadyPromiseSettled = false;
          this.readyPromiseResolver = function () { };
          this.readyPromiseRejecter = function () { };
          this.readyPromise = new Promise(function (resolve, reject) {
              _this.readyPromiseResolver = resolve;
              _this.readyPromiseRejecter = reject;
          });
          if (datafile) {
              this.currentDatafile = datafile;
              this.resolveReadyPromise();
          }
          else {
              this.currentDatafile = null;
          }
          this.isStarted = false;
          this.datafileUrl = lib.sprintf(urlTemplate, sdkKey);
          this.emitter = new eventEmitter_1.default();
          this.autoUpdate = autoUpdate;
          if (isValidUpdateInterval(updateInterval)) {
              this.updateInterval = updateInterval;
          }
          else {
              logger.warn('Invalid updateInterval %s, defaulting to %s', updateInterval, config.DEFAULT_UPDATE_INTERVAL);
              this.updateInterval = config.DEFAULT_UPDATE_INTERVAL;
          }
          this.currentTimeout = null;
          this.currentRequest = null;
          this.backoffController = new backoffController_1.default();
          this.syncOnCurrentRequestComplete = false;
      }
      HttpPollingDatafileManager.prototype.get = function () {
          return this.currentDatafile;
      };
      HttpPollingDatafileManager.prototype.start = function () {
          if (!this.isStarted) {
              logger.debug('Datafile manager started');
              this.isStarted = true;
              this.backoffController.reset();
              this.syncDatafile();
          }
      };
      HttpPollingDatafileManager.prototype.stop = function () {
          logger.debug('Datafile manager stopped');
          this.isStarted = false;
          if (this.currentTimeout) {
              clearTimeout(this.currentTimeout);
              this.currentTimeout = null;
          }
          this.emitter.removeAllListeners();
          if (this.currentRequest) {
              this.currentRequest.abort();
              this.currentRequest = null;
          }
          return Promise.resolve();
      };
      HttpPollingDatafileManager.prototype.onReady = function () {
          return this.readyPromise;
      };
      HttpPollingDatafileManager.prototype.on = function (eventName, listener) {
          return this.emitter.on(eventName, listener);
      };
      HttpPollingDatafileManager.prototype.onRequestRejected = function (err) {
          if (!this.isStarted) {
              return;
          }
          this.backoffController.countError();
          if (err instanceof Error) {
              logger.error('Error fetching datafile: %s', err.message, err);
          }
          else if (typeof err === 'string') {
              logger.error('Error fetching datafile: %s', err);
          }
          else {
              logger.error('Error fetching datafile');
          }
      };
      HttpPollingDatafileManager.prototype.onRequestResolved = function (response) {
          if (!this.isStarted) {
              return;
          }
          if (typeof response.statusCode !== 'undefined' &&
              isSuccessStatusCode(response.statusCode)) {
              this.backoffController.reset();
          }
          else {
              this.backoffController.countError();
          }
          this.trySavingLastModified(response.headers);
          var datafile = this.getNextDatafileFromResponse(response);
          if (datafile !== null) {
              logger.info('Updating datafile from response');
              this.currentDatafile = datafile;
              if (!this.isReadyPromiseSettled) {
                  this.resolveReadyPromise();
              }
              else {
                  var datafileUpdate = {
                      datafile: datafile,
                  };
                  this.emitter.emit(UPDATE_EVT, datafileUpdate);
              }
          }
      };
      HttpPollingDatafileManager.prototype.onRequestComplete = function () {
          if (!this.isStarted) {
              return;
          }
          this.currentRequest = null;
          if (!this.isReadyPromiseSettled && !this.autoUpdate) {
              // We will never resolve ready, so reject it
              this.rejectReadyPromise(new Error('Failed to become ready'));
          }
          if (this.autoUpdate && this.syncOnCurrentRequestComplete) {
              this.syncDatafile();
          }
          this.syncOnCurrentRequestComplete = false;
      };
      HttpPollingDatafileManager.prototype.syncDatafile = function () {
          var _this = this;
          var headers = {};
          if (this.lastResponseLastModified) {
              headers['if-modified-since'] = this.lastResponseLastModified;
          }
          logger.debug('Making datafile request to url %s with headers: %s', this.datafileUrl, function () { return JSON.stringify(headers); });
          this.currentRequest = this.makeGetRequest(this.datafileUrl, headers);
          var onRequestComplete = function () {
              _this.onRequestComplete();
          };
          var onRequestResolved = function (response) {
              _this.onRequestResolved(response);
          };
          var onRequestRejected = function (err) {
              _this.onRequestRejected(err);
          };
          this.currentRequest.responsePromise
              .then(onRequestResolved, onRequestRejected)
              .then(onRequestComplete, onRequestComplete);
          if (this.autoUpdate) {
              this.scheduleNextUpdate();
          }
      };
      HttpPollingDatafileManager.prototype.resolveReadyPromise = function () {
          this.readyPromiseResolver();
          this.isReadyPromiseSettled = true;
      };
      HttpPollingDatafileManager.prototype.rejectReadyPromise = function (err) {
          this.readyPromiseRejecter(err);
          this.isReadyPromiseSettled = true;
      };
      HttpPollingDatafileManager.prototype.scheduleNextUpdate = function () {
          var _this = this;
          var currentBackoffDelay = this.backoffController.getDelay();
          var nextUpdateDelay = Math.max(currentBackoffDelay, this.updateInterval);
          logger.debug('Scheduling sync in %s ms', nextUpdateDelay);
          this.currentTimeout = setTimeout(function () {
              if (_this.currentRequest) {
                  _this.syncOnCurrentRequestComplete = true;
              }
              else {
                  _this.syncDatafile();
              }
          }, nextUpdateDelay);
      };
      HttpPollingDatafileManager.prototype.getNextDatafileFromResponse = function (response) {
          logger.debug('Response status code: %s', response.statusCode);
          if (typeof response.statusCode === 'undefined') {
              return null;
          }
          if (response.statusCode === 304) {
              return null;
          }
          if (isSuccessStatusCode(response.statusCode)) {
              return this.tryParsingBodyAsJSON(response.body);
          }
          return null;
      };
      HttpPollingDatafileManager.prototype.tryParsingBodyAsJSON = function (body) {
          var parseResult;
          try {
              parseResult = JSON.parse(body);
          }
          catch (err) {
              logger.error('Error parsing response body: %s', err.message, err);
              return null;
          }
          var datafileObj = null;
          if (typeof parseResult === 'object' && parseResult !== null) {
              datafileObj = parseResult;
          }
          else {
              logger.error('Error parsing response body: was not an object');
          }
          return datafileObj;
      };
      HttpPollingDatafileManager.prototype.trySavingLastModified = function (headers) {
          var lastModifiedHeader = headers['last-modified'] || headers['Last-Modified'];
          if (typeof lastModifiedHeader !== 'undefined') {
              this.lastResponseLastModified = lastModifiedHeader;
              logger.debug('Saved last modified header value from response: %s', this.lastResponseLastModified);
          }
      };
      return HttpPollingDatafileManager;
  }());
  exports.default = HttpPollingDatafileManager;
  });

  unwrapExports(httpPollingDatafileManager);

  var nodeDatafileManager = createCommonjsModule(function (module, exports) {
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
      var extendStatics = function (d, b) {
          extendStatics = Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
              function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
          return extendStatics(d, b);
      };
      return function (d, b) {
          extendStatics(d, b);
          function __() { this.constructor = d; }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
  })();
  var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
      return (mod && mod.__esModule) ? mod : { "default": mod };
  };
  Object.defineProperty(exports, "__esModule", { value: true });

  var httpPollingDatafileManager_1 = __importDefault(httpPollingDatafileManager);
  var NodeDatafileManager = /** @class */ (function (_super) {
      __extends(NodeDatafileManager, _super);
      function NodeDatafileManager() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      NodeDatafileManager.prototype.makeGetRequest = function (reqUrl, headers) {
          return nodeRequest.makeGetRequest(reqUrl, headers);
      };
      NodeDatafileManager.prototype.getConfigDefaults = function () {
          return {
              autoUpdate: true,
          };
      };
      return NodeDatafileManager;
  }(httpPollingDatafileManager_1.default));
  exports.default = NodeDatafileManager;
  });

  unwrapExports(nodeDatafileManager);

  var staticDatafileManager = createCommonjsModule(function (module, exports) {
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  Object.defineProperty(exports, "__esModule", { value: true });
  var doNothing = function () { };
  var StaticDatafileManager = /** @class */ (function () {
      function StaticDatafileManager(datafile) {
          this.datafile = datafile;
          this.readyPromise = Promise.resolve();
      }
      StaticDatafileManager.prototype.get = function () {
          return this.datafile;
      };
      StaticDatafileManager.prototype.onReady = function () {
          return this.readyPromise;
      };
      StaticDatafileManager.prototype.start = function () {
      };
      StaticDatafileManager.prototype.stop = function () {
          return Promise.resolve();
      };
      StaticDatafileManager.prototype.on = function (eventName, listener) {
          return doNothing;
      };
      return StaticDatafileManager;
  }());
  exports.default = StaticDatafileManager;
  });

  unwrapExports(staticDatafileManager);

  var index_node$1 = createCommonjsModule(function (module, exports) {
  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  Object.defineProperty(exports, "__esModule", { value: true });

  exports.HttpPollingDatafileManager = nodeDatafileManager.default;

  exports.StaticDatafileManager = staticDatafileManager.default;
  });

  unwrapExports(index_node$1);
  var index_node_1 = index_node$1.HttpPollingDatafileManager;
  var index_node_2 = index_node$1.StaticDatafileManager;

  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */


  // Get Experiment Ids which are part of rollouts
  function getRolloutExperimentIds(rollouts) {
    return (rollouts || []).reduce(function(experimentIds, rollout) {
      rollout.experiments.forEach(function(e) {
        experimentIds[e.id] = true;
      });
      return experimentIds;
    }, {});
  }

  // Gets Map of all experiments except rollouts
  function getExperimentsMap(configObj) {
    var rolloutExperimentIds = getRolloutExperimentIds(configObj.rollouts);
    var featureVariablesMap = (configObj.featureFlags || []).reduce(function(resultMap, feature){
      resultMap[feature.id] = feature.variables;
      return resultMap;
    }, {});
    return (configObj.experiments || []).reduce(function(experiments, experiment) {
      // skip experiments that are part of a rollout
      if (!rolloutExperimentIds[experiment.id]) {
        experiments[experiment.key] = {
          id: experiment.id,
          key: experiment.key,
          variationsMap: (experiment.variations || []).reduce(function(variations, variation) {
            variations[variation.key] = {
              id: variation.id,
              key: variation.key,
              variablesMap: getMergedVariablesMap(configObj, variation, experiment.id, featureVariablesMap)
            };
            if (project_config.isFeatureExperiment(configObj, experiment.id)) {
              variations[variation.key].featureEnabled = variation.featureEnabled;
            }
            return variations;
          }, {}),
        };
      }
      return experiments;
    }, {});
  }

  // Merges feature key and type from feature variables to variation variables.
  function getMergedVariablesMap(configObj, variation, experimentId, featureVariablesMap) {
    var featureId = configObj.experimentFeatureMap[experimentId];
    var variablesObject = {};
    if (featureId) {
      var experimentFeatureVariables = featureVariablesMap[featureId];
      // Temporary variation variables map to get values to merge.
      var tempVariablesIdMap = (variation.variables || []).reduce(function(variablesMap, variable) {
        variablesMap[variable.id] = {
          id: variable.id,
          value: variable.value,
        };
        return variablesMap;
      }, {});
      variablesObject = (experimentFeatureVariables || []).reduce(function(variablesMap, featureVariable) {
        var variationVariable = tempVariablesIdMap[featureVariable.id];
        var variableValue = variation.featureEnabled && variationVariable ? variationVariable.value : featureVariable.defaultValue;
        variablesMap[featureVariable.key] = {
          id: featureVariable.id,
          key: featureVariable.key,
          type: featureVariable.type,
          value: variableValue,
        };
        return variablesMap;
      }, {});
    }
    return variablesObject;
  }

  // Gets map of all experiments
  function getFeaturesMap(configObj, allExperiments) {
    return (configObj.featureFlags || []).reduce(function(features, feature) {
      features[feature.key] = {
        id: feature.id,
        key: feature.key,
        experimentsMap: (feature.experimentIds || []).reduce(function(experiments, experimentId) {
          var experimentKey = configObj.experimentIdMap[experimentId].key;
          experiments[experimentKey] = allExperiments[experimentKey];
          return experiments;
        }, {}),
        variablesMap: (feature.variables || []).reduce(function(variables, variable) {
          variables[variable.key] = {
            id: variable.id,
            key: variable.key,
            type: variable.type,
            value: variable.defaultValue,
          };
          return variables;
        }, {}),
      };
      return features;
    }, {});
  }

  var optimizely_config = {
    getOptimizelyConfig: function(configObj) {
      // Fetch all feature variables from feature flags to merge them with variation variables
      var experimentsMap = getExperimentsMap(configObj);
      return {
        experimentsMap: experimentsMap,
        featuresMap: getFeaturesMap(configObj, experimentsMap),
        revision: configObj.revision,
      };
    },
  };

  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */


  var sprintf$a = lib$2.sprintf;







  var logger$5 = lib$1.getLogger();

  var ERROR_MESSAGES$7 = enums.ERROR_MESSAGES;

  var MODULE_NAME$a = 'PROJECT_CONFIG_MANAGER';

  /**
   * Return an error message derived from a thrown value. If the thrown value is
   * an error, return the error's message property. Otherwise, return a default
   * provided by the second argument.
   * @param {*} maybeError
   * @param {String=} defaultMessage
   * @return {String}
   */
  function getErrorMessage(maybeError, defaultMessage) {
    if (maybeError instanceof Error) {
      return maybeError.message;
    }
    return defaultMessage || 'Unknown error';
  }

  /**
   * ProjectConfigManager provides project config objects via its methods
   * getConfig and onUpdate. It uses a DatafileManager to fetch datafiles. It is
   * responsible for parsing and validating datafiles, and converting datafile
   * JSON objects into project config objects.
   * @param {Object}         config
   * @param {Object|string=} config.datafile
   * @param {Object=}        config.datafileOptions
   * @param {Object=}        config.jsonSchemaValidator
   * @param {string=}        config.sdkKey
   * @param {boolean=}       config.skipJSONValidation
   */
  function ProjectConfigManager(config) {
    try {
      this.__initialize(config);
    } catch (ex) {
      logger$5.error(ex);
      this.__updateListeners = [];
      this.__configObj = null;
      this.__optimizelyConfigObj = null;
      this.__readyPromise = Promise.resolve({
        success: false,
        reason: getErrorMessage(ex, 'Error in initialize'),
      });
    }
  }

  /**
   * Initialize internal properties including __updateListeners, __configObj, and
   * __readyPromise, using the argument config. Create and subscribe to a datafile
   * manager if appropriate.
   * @param {Object}         config
   * @param {Object|string=} config.datafile
   * @param {Object=}        config.datafileOptions
   * @param {Object=}        config.jsonSchemaValidator
   * @param {string=}        config.sdkKey
   * @param {boolean=}       config.skipJSONValidation
   */
  ProjectConfigManager.prototype.__initialize = function(config) {
    this.__updateListeners = [];
    this.jsonSchemaValidator = config.jsonSchemaValidator;
    this.skipJSONValidation = config.skipJSONValidation;

    if (!config.datafile && !config.sdkKey) {
      this.__configObj = null;
      var datafileAndSdkKeyMissingError = new Error(sprintf$a(ERROR_MESSAGES$7.DATAFILE_AND_SDK_KEY_MISSING, MODULE_NAME$a));
      this.__readyPromise = Promise.resolve({
        success: false,
        reason: getErrorMessage(datafileAndSdkKeyMissingError),
      });
      logger$5.error(datafileAndSdkKeyMissingError);
      return;
    }

    var initialDatafile = this.__getDatafileFromConfig(config);
    var projectConfigCreationEx;
    if (initialDatafile) {
      try {
        this.__configObj = project_config.tryCreatingProjectConfig({
          datafile: initialDatafile,
          jsonSchemaValidator: this.jsonSchemaValidator,
          logger: logger$5,
          skipJSONValidation: this.skipJSONValidation,
        });
        this.__optimizelyConfigObj = optimizely_config.getOptimizelyConfig(this.__configObj);
      } catch (ex) {
        logger$5.error(ex);
        projectConfigCreationEx = ex;
        this.__configObj = null;
      }
    } else {
      this.__configObj = null;
    }

    if (config.sdkKey) {
      var datafileManagerConfig = {
        sdkKey: config.sdkKey,
      };
      if (this.__validateDatafileOptions(config.datafileOptions)) {
        fns.assign(datafileManagerConfig, config.datafileOptions);
      }
      if (initialDatafile && this.__configObj) {
        datafileManagerConfig.datafile = initialDatafile;
      }
      this.datafileManager = new index_node$1.HttpPollingDatafileManager(datafileManagerConfig);
      this.datafileManager.start();
      this.__readyPromise = this.datafileManager.onReady().then(
        this.__onDatafileManagerReadyFulfill.bind(this),
        this.__onDatafileManagerReadyReject.bind(this)
      );
      this.datafileManager.on('update', this.__onDatafileManagerUpdate.bind(this));
    } else if (this.__configObj) {
      this.__readyPromise = Promise.resolve({
        success: true,
      });
    } else {
      this.__readyPromise = Promise.resolve({
        success: false,
        reason: getErrorMessage(projectConfigCreationEx, 'Invalid datafile'),
      });
    }
  };

  /**
   * Respond to datafile manager's onReady promise becoming fulfilled.
   * If there are validation or parse failures using the datafile provided by
   * DatafileManager, ProjectConfigManager's ready promise is resolved with an
   * unsuccessful result. Otherwise, ProjectConfigManager updates its own project
   * config object from the new datafile, and its ready promise is resolved with a
   * successful result.
   */
  ProjectConfigManager.prototype.__onDatafileManagerReadyFulfill = function() {
    var newDatafile = this.datafileManager.get();
    var newConfigObj;
    try {
      newConfigObj = project_config.tryCreatingProjectConfig({
        datafile: newDatafile,
        jsonSchemaValidator: this.jsonSchemaValidator,
        logger: logger$5,
        skipJSONValidation: this.skipJSONValidation,
      });
    } catch (ex) {
      logger$5.error(ex);
      return {
        success: false,
        reason: getErrorMessage(ex),
      };
    }
    this.__handleNewConfigObj(newConfigObj);
    return {
      success: true,
    };
  };

  /**
   * Respond to datafile manager's onReady promise becoming rejected.
   * When DatafileManager's onReady promise is rejected, there is no possibility
   * of obtaining a datafile. In this case, ProjectConfigManager's ready promise
   * is fulfilled with an unsuccessful result.
   * @param {Error} err
   */
  ProjectConfigManager.prototype.__onDatafileManagerReadyReject = function(err) {
    return {
      success: false,
      reason: getErrorMessage(err, 'Failed to become ready'),
    };
  };

  /**
   * Respond to datafile manager's update event. Attempt to update own config
   * object using latest datafile from datafile manager. Call own registered
   * update listeners if successful
   */
  ProjectConfigManager.prototype.__onDatafileManagerUpdate = function() {
    var newDatafile = this.datafileManager.get();
    var newConfigObj;
    try {
      newConfigObj = project_config.tryCreatingProjectConfig({
        datafile: newDatafile,
        jsonSchemaValidator: this.jsonSchemaValidator,
        logger: logger$5,
        skipJSONValidation: this.skipJSONValidation,
      });
    } catch (ex) {
      logger$5.error(ex);
    }
    if (newConfigObj) {
      this.__handleNewConfigObj(newConfigObj);
    }
  };

  /**
   * If the argument config contains a valid datafile object or string,
   * return a datafile object based on that provided datafile, otherwise
   * return null.
   * @param {Object}         config
   * @param {Object|string=} config.datafile
   * @return {Object|null}
   */
  ProjectConfigManager.prototype.__getDatafileFromConfig = function(config) {
    var initialDatafile = null;
    try {
      if (config.datafile) {
        config_validator.validateDatafile(config.datafile);
        if (typeof config.datafile === 'string' || config.datafile instanceof String) {
          initialDatafile = JSON.parse(config.datafile);
        } else {
          initialDatafile = config.datafile;
        }
      }
    } catch (ex) {
      logger$5.error(ex);
    }
    return initialDatafile;
  };

  /**
   * Validate user-provided datafileOptions. It should be an object or undefined.
   * @param {*} datafileOptions
   * @returns {boolean}
   */
  ProjectConfigManager.prototype.__validateDatafileOptions = function(datafileOptions) {
    if (typeof datafileOptions === 'undefined') {
      return true;
    }

    if (typeof datafileOptions === 'object') {
      return datafileOptions !== null;
    }

    return false;
  };

  /**
   * Update internal project config object to be argument object when the argument
   * object has a different revision than the current internal project config
   * object. If the internal object is updated, call update listeners.
   * @param {Object} newConfigObj
   */
  ProjectConfigManager.prototype.__handleNewConfigObj = function(newConfigObj) {
    var oldConfigObj = this.__configObj;

    var oldRevision = oldConfigObj ? oldConfigObj.revision : 'null';
    if (oldRevision === newConfigObj.revision) {
      return;
    }

    this.__configObj = newConfigObj;
    this.__optimizelyConfigObj = optimizely_config.getOptimizelyConfig(newConfigObj);

    this.__updateListeners.forEach(function(listener) {
      listener(newConfigObj);
    });
  };

  /**
   * Returns the current project config object, or null if no project config object
   * is available
   * @return {Object|null}
   */
  ProjectConfigManager.prototype.getConfig = function() {
    return this.__configObj;
  };

  /**
   * Returns the optimizely config object
   * @return {Object}
   */
  ProjectConfigManager.prototype.getOptimizelyConfig = function() {
    return this.__optimizelyConfigObj;
  };

  /**
   * Returns a Promise that fulfills when this ProjectConfigManager is ready to
   * use (meaning it has a valid project config object), or has failed to become
   * ready.
   *
   * Failure can be caused by the following:
   * - At least one of sdkKey or datafile is not provided in the constructor argument
   * - The provided datafile was invalid
   * - The datafile provided by the datafile manager was invalid
   * - The datafile manager failed to fetch a datafile
   *
   * The returned Promise is fulfilled with a result object containing these
   * properties:
   *    - success (boolean): True if this instance is ready to use with a valid
   *                         project config object, or false if it failed to
   *                         become ready
   *    - reason (string=):  If success is false, this is a string property with
   *                         an explanatory message.
   * @return {Promise}
   */
  ProjectConfigManager.prototype.onReady = function() {
    return this.__readyPromise;
  };

  /**
   * Add a listener for project config updates. The listener will be called
   * whenever this instance has a new project config object available.
   * Returns a dispose function that removes the subscription
   * @param {Function} listener
   * @return {Function}
   */
  ProjectConfigManager.prototype.onUpdate = function(listener) {
    this.__updateListeners.push(listener);
    return function() {
      var index = this.__updateListeners.indexOf(listener);
      if (index > -1) {
        this.__updateListeners.splice(index, 1);
      }
    }.bind(this);
  };

  /**
   * Stop the internal datafile manager and remove all update listeners
   */
  ProjectConfigManager.prototype.stop = function() {
    if (this.datafileManager) {
      this.datafileManager.stop();
    }
    this.__updateListeners = [];
  };

  var project_config_manager = {
    ProjectConfigManager: ProjectConfigManager,
  };

  /****************************************************************************
   * Copyright 2016-2019, Optimizely, Inc. and contributors                   *
   *                                                                          *
   * Licensed under the Apache License, Version 2.0 (the "License");          *
   * you may not use this file except in compliance with the License.         *
   * You may obtain a copy of the License at                                  *
   *                                                                          *
   *    http://www.apache.org/licenses/LICENSE-2.0                            *
   *                                                                          *
   * Unless required by applicable law or agreed to in writing, software      *
   * distributed under the License is distributed on an "AS IS" BASIS,        *
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
   * See the License for the specific language governing permissions and      *
   * limitations under the License.                                           *
   ***************************************************************************/











  var sprintf$b = lib$2.sprintf;




  var ERROR_MESSAGES$8 = enums.ERROR_MESSAGES;
  var LOG_LEVEL$5 = enums.LOG_LEVEL;
  var LOG_MESSAGES$5 = enums.LOG_MESSAGES;
  var MODULE_NAME$b = 'OPTIMIZELY';
  var DECISION_SOURCES$1 = enums.DECISION_SOURCES;
  var FEATURE_VARIABLE_TYPES = enums.FEATURE_VARIABLE_TYPES;
  var DECISION_NOTIFICATION_TYPES = enums.DECISION_NOTIFICATION_TYPES;
  var NOTIFICATION_TYPES = enums.NOTIFICATION_TYPES;

  var DEFAULT_ONREADY_TIMEOUT = 30000;

  /**
   * The Optimizely class
   * @param {Object} config
   * @param {string} config.clientEngine
   * @param {string} config.clientVersion
   * @param {Object} config.datafile
   * @param {Object} config.errorHandler
   * @param {Object} config.eventDispatcher
   * @param {Object} config.logger
   * @param {Object} config.skipJSONValidation
   * @param {Object} config.userProfileService
   * @param {Object} config.eventBatchSize
   * @param {Object} config.eventFlushInterval
   */
  function Optimizely(config) {
    var clientEngine = config.clientEngine;
    if (enums.VALID_CLIENT_ENGINES.indexOf(clientEngine) === -1) {
      config.logger.log(LOG_LEVEL$5.INFO, sprintf$b(LOG_MESSAGES$5.INVALID_CLIENT_ENGINE, MODULE_NAME$b, clientEngine));
      clientEngine = enums.NODE_CLIENT_ENGINE;
    }

    this.clientEngine = clientEngine;
    this.clientVersion = config.clientVersion || enums.NODE_CLIENT_VERSION;
    this.errorHandler = config.errorHandler;
    this.eventDispatcher = config.eventDispatcher;
    this.__isOptimizelyConfigValid = config.isValidInstance;
    this.logger = config.logger;

    this.projectConfigManager = new project_config_manager.ProjectConfigManager({
      datafile: config.datafile,
      datafileOptions: config.datafileOptions,
      jsonSchemaValidator: config.jsonSchemaValidator,
      sdkKey: config.sdkKey,
      skipJSONValidation: config.skipJSONValidation,
    });

    this.__disposeOnUpdate = this.projectConfigManager.onUpdate(function(configObj) {
      this.logger.log(LOG_LEVEL$5.INFO, sprintf$b(LOG_MESSAGES$5.UPDATED_OPTIMIZELY_CONFIG, MODULE_NAME$b, configObj.revision, configObj.projectId));
      this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.OPTIMIZELY_CONFIG_UPDATE);
    }.bind(this));

    this.__readyPromise = this.projectConfigManager.onReady();

    var userProfileService = null;
    if (config.userProfileService) {
      try {
        if (user_profile_service_validator.validate(config.userProfileService)) {
          userProfileService = config.userProfileService;
          this.logger.log(LOG_LEVEL$5.INFO, sprintf$b(LOG_MESSAGES$5.VALID_USER_PROFILE_SERVICE, MODULE_NAME$b));
        }
      } catch (ex) {
        this.logger.log(LOG_LEVEL$5.WARNING, ex.message);
      }
    }

    this.decisionService = decision_service.createDecisionService({
      userProfileService: userProfileService,
      logger: this.logger,
      UNSTABLE_conditionEvaluators: config.UNSTABLE_conditionEvaluators
    });

    this.notificationCenter = notification_center.createNotificationCenter({
      logger: this.logger,
      errorHandler: this.errorHandler,
    });

    this.eventProcessor = new lib$4.LogTierV1EventProcessor({
      dispatcher: this.eventDispatcher,
      flushInterval: config.eventFlushInterval,
      maxQueueSize: config.eventBatchSize,
      notificationCenter: this.notificationCenter,
    });
    this.eventProcessor.start();

    this.__readyTimeouts = {};
    this.__nextReadyTimeoutId = 0;
  }

  /**
   * Returns a truthy value if this instance currently has a valid project config
   * object, and the initial configuration object that was passed into the
   * constructor was also valid.
   * @return {*}
   */
  Optimizely.prototype.__isValidInstance = function() {
    return this.__isOptimizelyConfigValid && this.projectConfigManager.getConfig();
  };

  /**
   * Buckets visitor and sends impression event to Optimizely.
   * @param  {string}      experimentKey
   * @param  {string}      userId
   * @param  {Object}      attributes
   * @return {string|null} variation key
   */
  Optimizely.prototype.activate = function(experimentKey, userId, attributes) {
    try {
      if (!this.__isValidInstance()) {
        this.logger.log(LOG_LEVEL$5.ERROR, sprintf$b(LOG_MESSAGES$5.INVALID_OBJECT, MODULE_NAME$b, 'activate'));
        return null;
      }

      if (!this.__validateInputs({ experiment_key: experimentKey, user_id: userId }, attributes)) {
        return this.__notActivatingExperiment(experimentKey, userId);
      }

      var configObj = this.projectConfigManager.getConfig();
      if (!configObj) {
        return null;
      }

      try {
        var variationKey = this.getVariation(experimentKey, userId, attributes);
        if (variationKey === null) {
          return this.__notActivatingExperiment(experimentKey, userId);
        }

        // If experiment is not set to 'Running' status, log accordingly and return variation key
        if (!project_config.isRunning(configObj, experimentKey)) {
          var shouldNotDispatchActivateLogMessage = sprintf$b(
            LOG_MESSAGES$5.SHOULD_NOT_DISPATCH_ACTIVATE,
            MODULE_NAME$b,
            experimentKey
          );
          this.logger.log(LOG_LEVEL$5.DEBUG, shouldNotDispatchActivateLogMessage);
          return variationKey;
        }

        this._sendImpressionEvent(experimentKey, variationKey, userId, attributes);

        return variationKey;
      } catch (ex) {
        this.logger.log(LOG_LEVEL$5.ERROR, ex.message);
        var failedActivationLogMessage = sprintf$b(LOG_MESSAGES$5.NOT_ACTIVATING_USER, MODULE_NAME$b, userId, experimentKey);
        this.logger.log(LOG_LEVEL$5.INFO, failedActivationLogMessage);
        this.errorHandler.handleError(ex);
        return null;
      }
    } catch (e) {
      this.logger.log(LOG_LEVEL$5.ERROR, e.message);
      this.errorHandler.handleError(e);
      return null;
    }
  };

  /**
   * Create an impression event and call the event dispatcher's dispatch method to
   * send this event to Optimizely. Then use the notification center to trigger
   * any notification listeners for the ACTIVATE notification type.
   * @param {string} experimentKey  Key of experiment that was activated
   * @param {string} variationKey   Key of variation shown in experiment that was activated
   * @param {string} userId         ID of user to whom the variation was shown
   * @param {Object} attributes     Optional user attributes
   */
  Optimizely.prototype._sendImpressionEvent = function(experimentKey, variationKey, userId, attributes) {
    var configObj = this.projectConfigManager.getConfig();
    if (!configObj) {
      return;
    }

    var impressionEvent = event_helpers.buildImpressionEvent({
      experimentKey: experimentKey,
      variationKey: variationKey,
      userId: userId,
      userAttributes: attributes,
      clientEngine: this.clientEngine,
      clientVersion: this.clientVersion,
      configObj: configObj,
    });
    // TODO is it okay to not pass a projectConfig as second argument
    this.eventProcessor.process(impressionEvent);
    this.__emitNotificationCenterActivate(experimentKey, variationKey, userId, attributes);
  };

  /**
   * Emit the ACTIVATE notification on the notificationCenter
   * @param {string} experimentKey  Key of experiment that was activated
   * @param {string} variationKey   Key of variation shown in experiment that was activated
   * @param {string} userId         ID of user to whom the variation was shown
   * @param {Object} attributes     Optional user attributes
   */
  Optimizely.prototype.__emitNotificationCenterActivate = function(experimentKey, variationKey, userId, attributes) {
    var configObj = this.projectConfigManager.getConfig();
    if (!configObj) {
      return;
    }

    var variationId = project_config.getVariationIdFromExperimentAndVariationKey(
      configObj,
      experimentKey,
      variationKey
    );
    var experimentId = project_config.getExperimentId(configObj, experimentKey);
    var impressionEventOptions = {
      attributes: attributes,
      clientEngine: this.clientEngine,
      clientVersion: this.clientVersion,
      configObj: configObj,
      experimentId: experimentId,
      userId: userId,
      variationId: variationId,
      logger: this.logger,
    };
    var impressionEvent = event_builder.getImpressionEvent(impressionEventOptions);
    var experiment = configObj.experimentKeyMap[experimentKey];
    var variation;
    if (experiment && experiment.variationKeyMap) {
      variation = experiment.variationKeyMap[variationKey];
    }
    this.notificationCenter.sendNotifications(
      NOTIFICATION_TYPES.ACTIVATE,
      {
        experiment: experiment,
        userId: userId,
        attributes: attributes,
        variation: variation,
        logEvent: impressionEvent
      }
    );
  };

  /**
   * Sends conversion event to Optimizely.
   * @param  {string} eventKey
   * @param  {string} userId
   * @param  {string} attributes
   * @param  {Object} eventTags Values associated with the event.
   */
  Optimizely.prototype.track = function(eventKey, userId, attributes, eventTags) {
    try {
      if (!this.__isValidInstance()) {
        this.logger.log(LOG_LEVEL$5.ERROR, sprintf$b(LOG_MESSAGES$5.INVALID_OBJECT, MODULE_NAME$b, 'track'));
        return;
      }

      if (!this.__validateInputs({ user_id: userId, event_key: eventKey }, attributes, eventTags)) {
        return;
      }

      var configObj = this.projectConfigManager.getConfig();
      if (!configObj) {
        return;
      }

      if (!project_config.eventWithKeyExists(configObj, eventKey)) {
        throw new Error(sprintf$b(ERROR_MESSAGES$8.INVALID_EVENT_KEY, MODULE_NAME$b, eventKey));
      }

      // remove null values from eventTags
      eventTags = this.__filterEmptyValues(eventTags);
      var conversionEvent = event_helpers.buildConversionEvent({
        eventKey: eventKey,
        eventTags: eventTags,
        userId: userId,
        userAttributes: attributes,
        clientEngine: this.clientEngine,
        clientVersion: this.clientVersion,
        configObj: configObj,
      });
      this.logger.log(LOG_LEVEL$5.INFO, sprintf$b(enums.LOG_MESSAGES.TRACK_EVENT, MODULE_NAME$b, eventKey, userId));
      // TODO is it okay to not pass a projectConfig as second argument
      this.eventProcessor.process(conversionEvent);
      this.__emitNotificationCenterTrack(eventKey, userId, attributes, eventTags);
    } catch (e) {
      this.logger.log(LOG_LEVEL$5.ERROR, e.message);
      this.errorHandler.handleError(e);
      var failedTrackLogMessage = sprintf$b(LOG_MESSAGES$5.NOT_TRACKING_USER, MODULE_NAME$b, userId);
      this.logger.log(LOG_LEVEL$5.INFO, failedTrackLogMessage);
    }
  };

  /**
   * Send TRACK event to notificationCenter
   * @param  {string} eventKey
   * @param  {string} userId
   * @param  {string} attributes
   * @param  {Object} eventTags Values associated with the event.
   */
  Optimizely.prototype.__emitNotificationCenterTrack = function(eventKey, userId, attributes, eventTags) {
    try {
      var configObj = this.projectConfigManager.getConfig();
      if (!configObj) {
        return;
      }

      var conversionEventOptions = {
        attributes: attributes,
        clientEngine: this.clientEngine,
        clientVersion: this.clientVersion,
        configObj: configObj,
        eventKey: eventKey,
        eventTags: eventTags,
        logger: this.logger,
        userId: userId,
      };
      var conversionEvent = event_builder.getConversionEvent(conversionEventOptions);

      this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.TRACK, {
        eventKey: eventKey,
        userId: userId,
        attributes: attributes,
        eventTags: eventTags,
        logEvent: conversionEvent,
      });
    } catch (ex) {
      this.logger.log(LOG_LEVEL$5.ERROR, ex.message);
      this.errorHandler.handleError(ex);
    }
  };

  /**
   * Gets variation where visitor will be bucketed.
   * @param  {string}      experimentKey
   * @param  {string}      userId
   * @param  {Object}      attributes
   * @return {string|null} variation key
   */
  Optimizely.prototype.getVariation = function(experimentKey, userId, attributes) {
    try {
      if (!this.__isValidInstance()) {
        this.logger.log(LOG_LEVEL$5.ERROR, sprintf$b(LOG_MESSAGES$5.INVALID_OBJECT, MODULE_NAME$b, 'getVariation'));
        return null;
      }

      try {
        if (!this.__validateInputs({ experiment_key: experimentKey, user_id: userId }, attributes)) {
          return null;
        }

        var configObj = this.projectConfigManager.getConfig();
        if (!configObj) {
          return null;
        }

        var experiment = configObj.experimentKeyMap[experimentKey];
        if (fns.isEmpty(experiment)) {
          this.logger.log(LOG_LEVEL$5.DEBUG, sprintf$b(ERROR_MESSAGES$8.INVALID_EXPERIMENT_KEY, MODULE_NAME$b, experimentKey));
          return null;
        }

        var variationKey = this.decisionService.getVariation(configObj, experimentKey, userId, attributes);
        var decisionNotificationType = project_config.isFeatureExperiment(configObj, experiment.id) ? DECISION_NOTIFICATION_TYPES.FEATURE_TEST :
          DECISION_NOTIFICATION_TYPES.AB_TEST;

        this.notificationCenter.sendNotifications(
          NOTIFICATION_TYPES.DECISION,
          {
            type: decisionNotificationType,
            userId: userId,
            attributes: attributes || {},
            decisionInfo: {
              experimentKey: experimentKey,
              variationKey: variationKey,
            }
          }
        );

        return variationKey;
      } catch (ex) {
        this.logger.log(LOG_LEVEL$5.ERROR, ex.message);
        this.errorHandler.handleError(ex);
        return null;
      }
    } catch (e) {
      this.logger.log(LOG_LEVEL$5.ERROR, e.message);
      this.errorHandler.handleError(e);
      return null;
    }
  };

  /**
   * Force a user into a variation for a given experiment.
   * @param {string} experimentKey
   * @param {string} userId
   * @param {string|null} variationKey user will be forced into. If null, then clear the existing experiment-to-variation mapping.
   * @return boolean A boolean value that indicates if the set completed successfully.
   */
  Optimizely.prototype.setForcedVariation = function(experimentKey, userId, variationKey) {
    if (!this.__validateInputs({ experiment_key: experimentKey, user_id: userId })) {
      return false;
    }

    var configObj = this.projectConfigManager.getConfig();
    if (!configObj) {
      return false;
    }

    try {
      return this.decisionService.setForcedVariation(configObj, experimentKey, userId, variationKey);
    } catch (ex) {
      this.logger.log(LOG_LEVEL$5.ERROR, ex.message);
      this.errorHandler.handleError(ex);
      return false;
    }
  };

  /**
   * Gets the forced variation for a given user and experiment.
   * @param  {string} experimentKey
   * @param  {string} userId
   * @return {string|null} The forced variation key.
   */
  Optimizely.prototype.getForcedVariation = function(experimentKey, userId) {
    if (!this.__validateInputs({ experiment_key: experimentKey, user_id: userId })) {
      return null;
    }

    var configObj = this.projectConfigManager.getConfig();
    if (!configObj) {
      return null;
    }

    try {
      return this.decisionService.getForcedVariation(configObj, experimentKey, userId);
    } catch (ex) {
      this.logger.log(LOG_LEVEL$5.ERROR, ex.message);
      this.errorHandler.handleError(ex);
      return null;
    }
  };

  /**
   * Validate string inputs, user attributes and event tags.
   * @param  {string}  stringInputs   Map of string keys and associated values
   * @param  {Object}  userAttributes Optional parameter for user's attributes
   * @param  {Object}  eventTags      Optional parameter for event tags
   * @return {boolean} True if inputs are valid
   *
   */
  Optimizely.prototype.__validateInputs = function(stringInputs, userAttributes, eventTags) {
    try {
      // Null, undefined or non-string user Id is invalid.
      if (stringInputs.hasOwnProperty('user_id')) {
        var userId = stringInputs.user_id;
        if (typeof userId !== 'string' || userId === null || userId === 'undefined') {
          throw new Error(sprintf$b(ERROR_MESSAGES$8.INVALID_INPUT_FORMAT, MODULE_NAME$b, 'user_id'));
        }

        delete stringInputs.user_id;
      }

      var inputKeys = Object.keys(stringInputs);
      for (var index = 0; index < inputKeys.length; index++) {
        var key = inputKeys[index];
        if (!string_value_validator.validate(stringInputs[key])) {
          throw new Error(sprintf$b(ERROR_MESSAGES$8.INVALID_INPUT_FORMAT, MODULE_NAME$b, key));
        }
      }
      if (userAttributes) {
        attributes_validator.validate(userAttributes);
      }
      if (eventTags) {
        event_tags_validator.validate(eventTags);
      }
      return true;
    } catch (ex) {
      this.logger.log(LOG_LEVEL$5.ERROR, ex.message);
      this.errorHandler.handleError(ex);
      return false;
    }
  };

  /**
   * Shows failed activation log message and returns null when user is not activated in experiment
   * @param  experimentKey
   * @param  userId
   * @return {null}
   */
  Optimizely.prototype.__notActivatingExperiment = function(experimentKey, userId) {
    var failedActivationLogMessage = sprintf$b(LOG_MESSAGES$5.NOT_ACTIVATING_USER, MODULE_NAME$b, userId, experimentKey);
    this.logger.log(LOG_LEVEL$5.INFO, failedActivationLogMessage);
    return null;
  };

  /**
   * Filters out attributes/eventTags with null or undefined values
   * @param  map
   * @returns {Object} map
   */
  Optimizely.prototype.__filterEmptyValues = function(map) {
    for (var key in map) {
      if (map.hasOwnProperty(key) && (map[key] === null || map[key] === undefined)) {
        delete map[key];
      }
    }
    return map;
  };

  /**
   * Returns true if the feature is enabled for the given user.
   * @param {string} featureKey   Key of feature which will be checked
   * @param {string} userId       ID of user which will be checked
   * @param {Object} attributes   Optional user attributes
   * @return {boolean}            True if the feature is enabled for the user, false otherwise
   */
  Optimizely.prototype.isFeatureEnabled = function(featureKey, userId, attributes) {
    try {
      if (!this.__isValidInstance()) {
        this.logger.log(LOG_LEVEL$5.ERROR, sprintf$b(LOG_MESSAGES$5.INVALID_OBJECT, MODULE_NAME$b, 'isFeatureEnabled'));
        return false;
      }

      if (!this.__validateInputs({ feature_key: featureKey, user_id: userId }, attributes)) {
        return false;
      }

      var configObj = this.projectConfigManager.getConfig();
      if (!configObj) {
        return false;
      }

      var feature = project_config.getFeatureFromKey(configObj, featureKey, this.logger);
      if (!feature) {
        return false;
      }

      var featureEnabled = false;
      var decision = this.decisionService.getVariationForFeature(configObj, feature, userId, attributes);
      var variation = decision.variation;
      var sourceInfo = {};

      if (variation) {
        featureEnabled = variation.featureEnabled;
        if (decision.decisionSource === DECISION_SOURCES$1.FEATURE_TEST) {
          sourceInfo = {
            experimentKey: decision.experiment.key,
            variationKey: decision.variation.key,
          };
          // got a variation from the exp, so we track the impression
          this._sendImpressionEvent(decision.experiment.key, decision.variation.key, userId, attributes);
        }
      }

      if (featureEnabled === true) {
        this.logger.log(LOG_LEVEL$5.INFO, sprintf$b(LOG_MESSAGES$5.FEATURE_ENABLED_FOR_USER, MODULE_NAME$b, featureKey, userId));
      } else {
        this.logger.log(LOG_LEVEL$5.INFO, sprintf$b(LOG_MESSAGES$5.FEATURE_NOT_ENABLED_FOR_USER, MODULE_NAME$b, featureKey, userId));
        featureEnabled = false;
      }

      var featureInfo = {
        featureKey: featureKey,
        featureEnabled: featureEnabled,
        source: decision.decisionSource,
        sourceInfo: sourceInfo
      };

      this.notificationCenter.sendNotifications(
        NOTIFICATION_TYPES.DECISION,
        {
          type: DECISION_NOTIFICATION_TYPES.FEATURE,
          userId: userId,
          attributes: attributes || {},
          decisionInfo: featureInfo,
        }
      );

      return featureEnabled;
    } catch (e) {
      this.logger.log(LOG_LEVEL$5.ERROR, e.message);
      this.errorHandler.handleError(e);
      return false;
    }
  };

  /**
   * Returns an Array containing the keys of all features in the project that are
   * enabled for the given user.
   * @param {string} userId
   * @param {Object} attributes
   * @return {Array} Array of feature keys (strings)
   */
  Optimizely.prototype.getEnabledFeatures = function(userId, attributes) {
    try {
      var enabledFeatures = [];
      if (!this.__isValidInstance()) {
        this.logger.log(LOG_LEVEL$5.ERROR, sprintf$b(LOG_MESSAGES$5.INVALID_OBJECT, MODULE_NAME$b, 'getEnabledFeatures'));
        return enabledFeatures;
      }

      if (!this.__validateInputs({ user_id: userId })) {
        return enabledFeatures;
      }

      var configObj = this.projectConfigManager.getConfig();
      if (!configObj) {
        return enabledFeatures;
      }

      fns.forOwn(
        configObj.featureKeyMap,
        function(feature) {
          if (this.isFeatureEnabled(feature.key, userId, attributes)) {
            enabledFeatures.push(feature.key);
          }
        }.bind(this)
      );

      return enabledFeatures;
    } catch (e) {
      this.logger.log(LOG_LEVEL$5.ERROR, e.message);
      this.errorHandler.handleError(e);
      return [];
    }
  };

  /**
   * Returns dynamically-typed value of the variable attached to the given
   * feature flag. Returns null if the feature key or variable key is invalid.
   *
   * @param {string} featureKey           Key of the feature whose variable's
   *                                      value is being accessed
   * @param {string} variableKey          Key of the variable whose value is
   *                                      being accessed
   * @param {string} userId               ID for the user
   * @param {Object} attributes           Optional user attributes
   * @return {string|boolean|number|null} Value of the variable cast to the appropriate
   *                                      type, or null if the feature key is invalid or
   *                                      the variable key is invalid
   */

  Optimizely.prototype.getFeatureVariable = function(featureKey, variableKey, userId, attributes) {
    try {
      return this._getFeatureVariableForType(featureKey, variableKey, null, userId, attributes);
    } catch (e) {
      this.logger.log(LOG_LEVEL$5.ERROR, e.message);
      this.errorHandler.handleError(e);
      return null;
    }
  };

  /**
   * Helper method to get the value for a variable of a certain type attached to a
   * feature flag. Returns null if the feature key is invalid, the variable key is
   * invalid, the given variable type does not match the variable's actual type,
   * or the variable value cannot be cast to the required type. If the given variable
   * type is null, the value of the variable cast to the appropriate type is returned.
   *
   * @param {string} featureKey           Key of the feature whose variable's value is
   *                                      being accessed
   * @param {string} variableKey          Key of the variable whose value is being
   *                                      accessed
   * @param {string|null} variableType    Type of the variable whose value is being
   *                                      accessed (must be one of FEATURE_VARIABLE_TYPES
   *                                      in lib/utils/enums/index.js), or null to return the
   *                                      value of the variable cast to the appropriate type
   * @param {string} userId               ID for the user
   * @param {Object} attributes           Optional user attributes
   * @return {string|boolean|number|null} Value of the variable cast to the appropriate
   *                                      type, or null if the feature key is invalid, the
   *                                      variable key is invalid, or there is a mismatch
   *                                      with the type of the variable
   */
  Optimizely.prototype._getFeatureVariableForType = function(featureKey, variableKey, variableType, userId, attributes) {
    if (!this.__isValidInstance()) {
      var apiName = (variableType) ? 'getFeatureVariable' + variableType.charAt(0).toUpperCase() + variableType.slice(1) : 'getFeatureVariable';
      this.logger.log(LOG_LEVEL$5.ERROR, sprintf$b(LOG_MESSAGES$5.INVALID_OBJECT, MODULE_NAME$b, apiName));
      return null;
    }

    if (!this.__validateInputs({ feature_key: featureKey, variable_key: variableKey, user_id: userId }, attributes)) {
      return null;
    }

    var configObj = this.projectConfigManager.getConfig();
    if (!configObj) {
      return null;
    }

    var featureFlag = project_config.getFeatureFromKey(configObj, featureKey, this.logger);
    if (!featureFlag) {
      return null;
    }

    var variable = project_config.getVariableForFeature(configObj, featureKey, variableKey, this.logger);
    if (!variable) {
      return null;
    }

    if (!variableType) {
      variableType = variable.type;
    } else if (variable.type !== variableType) {
      this.logger.log(
        LOG_LEVEL$5.WARNING,
        sprintf$b(LOG_MESSAGES$5.VARIABLE_REQUESTED_WITH_WRONG_TYPE, MODULE_NAME$b, variableType, variable.type)
      );
      return null;
    }

    var featureEnabled = false;
    var variableValue = variable.defaultValue;
    var decision = this.decisionService.getVariationForFeature(configObj, featureFlag, userId, attributes);

    if (decision.variation !== null) {
      featureEnabled = decision.variation.featureEnabled;
      var value = project_config.getVariableValueForVariation(configObj, variable, decision.variation, this.logger);
      if (value !== null) {
        if (featureEnabled === true) {
          variableValue = value;
          this.logger.log(LOG_LEVEL$5.INFO, sprintf$b(LOG_MESSAGES$5.USER_RECEIVED_VARIABLE_VALUE, MODULE_NAME$b, variableKey, featureFlag.key, variableValue, userId));
        } else {
          this.logger.log(LOG_LEVEL$5.INFO, sprintf$b(LOG_MESSAGES$5.FEATURE_NOT_ENABLED_RETURN_DEFAULT_VARIABLE_VALUE, MODULE_NAME$b,
            featureFlag.key, userId, variableKey));
        }
      } else {
        this.logger.log(LOG_LEVEL$5.INFO, sprintf$b(LOG_MESSAGES$5.VARIABLE_NOT_USED_RETURN_DEFAULT_VARIABLE_VALUE, MODULE_NAME$b, variableKey, decision.variation.key));
      }
    } else {
      this.logger.log(LOG_LEVEL$5.INFO, sprintf$b(LOG_MESSAGES$5.USER_RECEIVED_DEFAULT_VARIABLE_VALUE, MODULE_NAME$b, userId,
        variableKey, featureFlag.key));
    }

    var sourceInfo = {};
    if (decision.decisionSource === DECISION_SOURCES$1.FEATURE_TEST) {
      sourceInfo = {
        experimentKey: decision.experiment.key,
        variationKey: decision.variation.key,
      };
    }

    var typeCastedValue = project_config.getTypeCastValue(variableValue, variableType, this.logger);
    this.notificationCenter.sendNotifications(
      NOTIFICATION_TYPES.DECISION,
      {
        type: DECISION_NOTIFICATION_TYPES.FEATURE_VARIABLE,
        userId: userId,
        attributes: attributes || {},
        decisionInfo: {
          featureKey: featureKey,
          featureEnabled: featureEnabled,
          source: decision.decisionSource,
          variableKey: variableKey,
          variableValue: typeCastedValue,
          variableType: variableType,
          sourceInfo: sourceInfo,
        }
      }
    );
    return typeCastedValue;
  };

  /**
   * Returns value for the given boolean variable attached to the given feature
   * flag.
   * @param {string} featureKey   Key of the feature whose variable's value is
   *                              being accessed
   * @param {string} variableKey  Key of the variable whose value is being
   *                              accessed
   * @param {string} userId       ID for the user
   * @param {Object} attributes   Optional user attributes
   * @return {boolean|null}       Boolean value of the variable, or null if the
   *                              feature key is invalid, the variable key is
   *                              invalid, or there is a mismatch with the type
   *                              of the variable
   */
  Optimizely.prototype.getFeatureVariableBoolean = function(featureKey, variableKey, userId, attributes) {
    try {
      return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.BOOLEAN, userId, attributes);
    } catch (e) {
      this.logger.log(LOG_LEVEL$5.ERROR, e.message);
      this.errorHandler.handleError(e);
      return null;
    }
  };

  /**
   * Returns value for the given double variable attached to the given feature
   * flag.
   * @param {string} featureKey   Key of the feature whose variable's value is
   *                              being accessed
   * @param {string} variableKey  Key of the variable whose value is being
   *                              accessed
   * @param {string} userId       ID for the user
   * @param {Object} attributes   Optional user attributes
   * @return {number|null}        Number value of the variable, or null if the
   *                              feature key is invalid, the variable key is
   *                              invalid, or there is a mismatch with the type
   *                              of the variable
   */
  Optimizely.prototype.getFeatureVariableDouble = function(featureKey, variableKey, userId, attributes) {
    try {
      return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.DOUBLE, userId, attributes);
    } catch (e) {
      this.logger.log(LOG_LEVEL$5.ERROR, e.message);
      this.errorHandler.handleError(e);
      return null;
    }
  };

  /**
   * Returns value for the given integer variable attached to the given feature
   * flag.
   * @param {string} featureKey   Key of the feature whose variable's value is
   *                              being accessed
   * @param {string} variableKey  Key of the variable whose value is being
   *                              accessed
   * @param {string} userId       ID for the user
   * @param {Object} attributes   Optional user attributes
   * @return {number|null}        Number value of the variable, or null if the
   *                              feature key is invalid, the variable key is
   *                              invalid, or there is a mismatch with the type
   *                              of the variable
   */
  Optimizely.prototype.getFeatureVariableInteger = function(featureKey, variableKey, userId, attributes) {
    try {
      return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.INTEGER, userId, attributes);
    } catch (e) {
      this.logger.log(LOG_LEVEL$5.ERROR, e.message);
      this.errorHandler.handleError(e);
      return null;
    }
  };

  /**
   * Returns value for the given string variable attached to the given feature
   * flag.
   * @param {string} featureKey   Key of the feature whose variable's value is
   *                              being accessed
   * @param {string} variableKey  Key of the variable whose value is being
   *                              accessed
   * @param {string} userId       ID for the user
   * @param {Object} attributes   Optional user attributes
   * @return {string|null}        String value of the variable, or null if the
   *                              feature key is invalid, the variable key is
   *                              invalid, or there is a mismatch with the type
   *                              of the variable
   */
  Optimizely.prototype.getFeatureVariableString = function(featureKey, variableKey, userId, attributes) {
    try {
      return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.STRING, userId, attributes);
    } catch (e) {
      this.logger.log(LOG_LEVEL$5.ERROR, e.message);
      this.errorHandler.handleError(e);
      return null;
    }
  };

  /**
   * Returns OptimizelyConfig object containing experiments and features data
   * @return {Object}
   *
   * OptimizelyConfig Object Schema
   * {
   *   'experimentsMap': {
   *     'my-fist-experiment': {
   *       'id': '111111',
   *       'key': 'my-fist-experiment'
   *       'variationsMap': {
   *         'variation_1': {
   *           'id': '121212',
   *           'key': 'variation_1',
   *           'variablesMap': {
   *             'age': {
   *               'id': '222222',
   *               'key': 'age',
   *               'type': 'integer',
   *               'value': '0',
   *             }
   *           }
   *         }
   *       }
   *     }
   *   },
   *   'featuresMap': {
   *     'awesome-feature': {
   *       'id': '333333',
   *       'key': 'awesome-feature',
   *       'experimentsMap': Object,
   *       'variationsMap': Object,
   *     }
   *   }
   * }
   */
  Optimizely.prototype.getOptimizelyConfig = function() {
    try {
      var configObj = this.projectConfigManager.getConfig();
      if (!configObj) {
        return null;
      }
      return this.projectConfigManager.getOptimizelyConfig();
    } catch (e) {
      this.logger.log(LOG_LEVEL$5.ERROR, e.message);
      this.errorHandler.handleError(e);
      return null;
    }
  };

  /**
   * Stop background processes belonging to this instance, including:
   *
   * - Active datafile requests
   * - Pending datafile requests
   * - Pending event queue flushes
   *
   * In-flight datafile requests will be aborted. Any events waiting to be sent
   * as part of a batched event request will be immediately batched and sent to
   * the event dispatcher.
   *
   * If any such requests were sent to the event dispatcher, returns a Promise
   * that fulfills after the event dispatcher calls the response callback for each
   * request. Otherwise, returns an immediately-fulfilled Promise.
   *
   * Returned Promises are fulfilled with result objects containing these
   * properties:
   *    - success (boolean): true if all events in the queue at the time close was
   *                         called were combined into requests, sent to the
   *                         event dispatcher, and the event dispatcher called the
   *                         callbacks for each request. false if an unexpected
   *                         error was encountered during the close process.
   *    - reason (string=):  If success is false, this is a string property with
   *                         an explanatory message.
   *
   * NOTE: After close is called, this instance is no longer usable - any events
   * generated will no longer be sent to the event dispatcher.
   *
   * @return {Promise}
   */
  Optimizely.prototype.close = function() {
    try {
      var eventProcessorStoppedPromise = this.eventProcessor.stop();
      if (this.__disposeOnUpdate) {
        this.__disposeOnUpdate();
        this.__disposeOnUpdate = null;
      }
      if (this.projectConfigManager) {
        this.projectConfigManager.stop();
      }
      Object.keys(this.__readyTimeouts).forEach(function(readyTimeoutId) {
        var readyTimeoutRecord = this.__readyTimeouts[readyTimeoutId];
        clearTimeout(readyTimeoutRecord.readyTimeout);
        readyTimeoutRecord.onClose();
      }.bind(this));
      this.__readyTimeouts = {};
      return eventProcessorStoppedPromise.then(
        function() {
          return {
            success: true,
          };
        },
        function(err) {
          return {
            success: false,
            reason: String(err),
          };
        }
      );
    } catch (err) {
      this.logger.log(LOG_LEVEL$5.ERROR, err.message);
      this.errorHandler.handleError(err);
      return Promise.resolve({
        success: false,
        reason: String(err),
      });
    }
  };

  /**
   * Returns a Promise that fulfills when this instance is ready to use (meaning
   * it has a valid datafile), or has failed to become ready within a period of
   * time (configurable by the timeout property of the options argument), or when
   * this instance is closed via the close method.
   *
   * If a valid datafile was provided in the constructor, the returned Promise is
   * immediately fulfilled. If an sdkKey was provided, a manager will be used to
   * fetch  a datafile, and the returned promise will fulfill if that fetch
   * succeeds or fails before the timeout. The default timeout is 30 seconds,
   * which will be used if no timeout is provided in the argument options object.
   *
   * The returned Promise is fulfilled with a result object containing these
   * properties:
   *    - success (boolean): True if this instance is ready to use with a valid
   *                         datafile, or false if this instance failed to become
   *                         ready or was closed prior to becoming ready.
   *    - reason (string=):  If success is false, this is a string property with
   *                         an explanatory message. Failure could be due to
   *                         expiration of the timeout, network errors,
   *                         unsuccessful responses, datafile parse errors,
   *                         datafile validation errors, or the instance being
   *                         closed
   * @param  {Object=}          options
   * @param  {number|undefined} options.timeout
   * @return {Promise}
   */
  Optimizely.prototype.onReady = function(options) {
    var timeout;
    if (typeof options === 'object' && options !== null) {
      timeout = options.timeout;
    }
    if (!fns.isFinite(timeout)) {
      timeout = DEFAULT_ONREADY_TIMEOUT;
    }

    var resolveTimeoutPromise;
    var timeoutPromise = new Promise(function(resolve) {
      resolveTimeoutPromise = resolve;
    });

    var timeoutId = this.__nextReadyTimeoutId;
    this.__nextReadyTimeoutId++;

    var onReadyTimeout = function() {
      delete this.__readyTimeouts[timeoutId];
      resolveTimeoutPromise({
        success: false,
        reason: sprintf$b('onReady timeout expired after %s ms', timeout),
      });
    }.bind(this);
    var readyTimeout = setTimeout(onReadyTimeout, timeout);
    var onClose = function() {
      resolveTimeoutPromise({
        success: false,
        reason: 'Instance closed',
      });
    };

    this.__readyTimeouts[timeoutId] = {
      readyTimeout: readyTimeout,
      onClose: onClose,
    };

    this.__readyPromise.then(function() {
      clearTimeout(readyTimeout);
      delete this.__readyTimeouts[timeoutId];
      resolveTimeoutPromise({
        success: true,
      });
    }.bind(this));

    return Promise.race([this.__readyPromise, timeoutPromise]);
  };

  var optimizely = Optimizely;

  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */



  /**
   * Return true if the argument is a valid event batch size, false otherwise
   * @param {*} eventBatchSize
   * @returns boolean
   */
  function validateEventBatchSize(eventBatchSize) {
    return fns.isFinite(eventBatchSize) && eventBatchSize >= 1;
  }

  /**
   * Return true if the argument is a valid event flush interval, false otherwise
   * @param {*} eventFlushInterval
   * @returns boolean
   */
  function validateEventFlushInterval(eventFlushInterval) {
    return fns.isFinite(eventFlushInterval) && eventFlushInterval > 0;
  }

  var event_processor_config_validator = {
    validateEventBatchSize: validateEventBatchSize,
    validateEventFlushInterval: validateEventFlushInterval,
  };

  /****************************************************************************
   * Copyright 2016-2017, 2019, Optimizely, Inc. and contributors             *
   *                                                                          *
   * Licensed under the Apache License, Version 2.0 (the "License");          *
   * you may not use this file except in compliance with the License.         *
   * You may obtain a copy of the License at                                  *
   *                                                                          *
   *    http://www.apache.org/licenses/LICENSE-2.0                            *
   *                                                                          *
   * Unless required by applicable law or agreed to in writing, software      *
   * distributed under the License is distributed on an "AS IS" BASIS,        *
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
   * See the License for the specific language governing permissions and      *
   * limitations under the License.                                           *
   ***************************************************************************/











  var logger$6 = lib$1.getLogger();
  lib$1.setLogLevel(lib$1.LogLevel.ERROR);

  var DEFAULT_EVENT_BATCH_SIZE = 10;
  var DEFAULT_EVENT_FLUSH_INTERVAL = 30000; // Unit is ms, default is 30s

  /**
   * Entry point into the Optimizely Node testing SDK
   */
  var index_node$2 = {
    logging: logger$2,
    errorHandler: error_handler,
    eventDispatcher: index_node,
    enums: enums,

    setLogger: lib$1.setLogHandler,
    setLogLevel: lib$1.setLogLevel,

    /**
     * Creates an instance of the Optimizely class
     * @param  {Object} config
     * @param  {Object} config.datafile
     * @param  {Object} config.errorHandler
     * @param  {Object} config.eventDispatcher
     * @param  {Object} config.jsonSchemaValidator
     * @param  {Object} config.logger
     * @param  {Object} config.userProfileService
     * @param {Object} config.eventBatchSize
     * @param {Object} config.eventFlushInterval
     * @return {Object} the Optimizely object
     */
    createInstance: function(config) {
      try {
        var hasLogger = false;
        config = config || {};

        // TODO warn about setting per instance errorHandler / logger / logLevel
        if (config.errorHandler) {
          lib$1.setErrorHandler(config.errorHandler);
        }
        if (config.logger) {
          // only set a logger in node if one is provided, by not setting we are noop-ing
          hasLogger = true;
          lib$1.setLogHandler(config.logger);
          // respect the logger's shouldLog functionality
          lib$1.setLogLevel(lib$1.LogLevel.NOTSET);
        }
        if (config.logLevel !== undefined) {
          lib$1.setLogLevel(config.logLevel);
        }

        try {
          config_validator.validate(config);
          config.isValidInstance = true;
        } catch (ex) {
          if (hasLogger) {
            logger$6.error(ex);
          } else {
            console.error(ex.message);
          }
          config.isValidInstance = false;
        }

        config = fns.assign(
          {
            clientEngine: enums.NODE_CLIENT_ENGINE,
            eventBatchSize: DEFAULT_EVENT_BATCH_SIZE,
            eventDispatcher: index_node,
            eventFlushInterval: DEFAULT_EVENT_FLUSH_INTERVAL,
            jsonSchemaValidator: json_schema_validator,
            skipJSONValidation: false,
          },
          config,
          {
            // always get the OptimizelyLogger facade from logging
            logger: logger$6,
            errorHandler: lib$1.getErrorHandler(),
          }
        );

        if (!event_processor_config_validator.validateEventBatchSize(config.eventBatchSize)) {
          logger$6.warn('Invalid eventBatchSize %s, defaulting to %s', config.eventBatchSize, DEFAULT_EVENT_BATCH_SIZE);
          config.eventBatchSize = DEFAULT_EVENT_BATCH_SIZE;
        }
        if (!event_processor_config_validator.validateEventFlushInterval(config.eventFlushInterval)) {
          logger$6.warn('Invalid eventFlushInterval %s, defaulting to %s', config.eventFlushInterval, DEFAULT_EVENT_FLUSH_INTERVAL);
          config.eventFlushInterval = DEFAULT_EVENT_FLUSH_INTERVAL;
        }

        return new optimizely(config);
      } catch (e) {
        logger$6.error(e);
        return null;
      }
    },
  };
  var index_node_1$1 = index_node$2.logging;
  var index_node_2$1 = index_node$2.errorHandler;
  var index_node_3 = index_node$2.eventDispatcher;
  var index_node_4 = index_node$2.enums;
  var index_node_5 = index_node$2.setLogger;
  var index_node_6 = index_node$2.setLogLevel;
  var index_node_7 = index_node$2.createInstance;

  /**
   * Copyright 2019-2020, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var logger$7 = lib_1$1('ReactSDK');
  var REACT_SDK_CLIENT_ENGINE = 'react-sdk';
  var REACT_SDK_CLIENT_VERSION = '1.1.0';
  var DEFAULT_ON_READY_TIMEOUT = 5000;
  var OptimizelyReactSDKClient = /** @class */ (function () {
      /**
       * Creates an instance of OptimizelyReactSDKClient.
       * @param {optimizely.Config} [config={}]
       */
      function OptimizelyReactSDKClient(config) {
          var _this = this;
          this.user = {
              id: null,
              attributes: {},
          };
          this.isUserPromiseResolved = false;
          this.onUserUpdateHandlers = [];
          this.initialConfig = config;
          this.userPromiseResovler = function () { };
          var configWithClientInfo = __assign({}, config, { clientEngine: REACT_SDK_CLIENT_ENGINE, clientVersion: REACT_SDK_CLIENT_VERSION });
          this._client = index_node_7(configWithClientInfo);
          this.userPromise = new Promise(function (resolve) {
              _this.userPromiseResovler = resolve;
          }).then(function () { return ({ success: true }); });
          this.dataReadyPromise = Promise.all([this.userPromise, this._client.onReady()]).then(function () {
              return {
                  success: true,
                  reason: 'datafile and user resolved',
              };
          });
      }
      OptimizelyReactSDKClient.prototype.onReady = function (config) {
          if (config === void 0) { config = {}; }
          var timeoutId;
          var timeout = DEFAULT_ON_READY_TIMEOUT;
          if (config && config.timeout !== undefined) {
              timeout = config.timeout;
          }
          var timeoutPromise = new Promise(function (resolve) {
              timeoutId = setTimeout(function () {
                  resolve({
                      success: false,
                      reason: 'failed to initialize onReady before timeout, either the datafile or user info was not set before the timeout',
                  });
              }, timeout);
          });
          return Promise.race([this.dataReadyPromise, timeoutPromise]).then(function (res) {
              clearTimeout(timeoutId);
              return res;
          });
      };
      OptimizelyReactSDKClient.prototype.setUser = function (userInfo) {
          var _this = this;
          // TODO add check for valid user
          if (userInfo.id) {
              this.user.id = userInfo.id;
          }
          if (userInfo.attributes) {
              this.user.attributes = userInfo.attributes;
          }
          if (!this.isUserPromiseResolved) {
              this.userPromiseResovler(this.user);
              this.isUserPromiseResolved = true;
          }
          this.onUserUpdateHandlers.forEach(function (handler) { return handler(_this.user); });
      };
      OptimizelyReactSDKClient.prototype.onUserUpdate = function (handler) {
          var _this = this;
          this.onUserUpdateHandlers.push(handler);
          return function () {
              var ind = _this.onUserUpdateHandlers.indexOf(handler);
              if (ind > -1) {
                  _this.onUserUpdateHandlers.splice(ind, 1);
              }
          };
      };
      /**
       * Buckets visitor and sends impression event to Optimizely
       * @param {string} experimentKey
       * @param {string} [overrideUserId]
       * @param {optimizely.UserAttributes} [overrideAttributes]
       * @returns {(string | null)}
       * @memberof OptimizelyReactSDKClient
       */
      OptimizelyReactSDKClient.prototype.activate = function (experimentKey, overrideUserId, overrideAttributes) {
          var user = this.getUserContextWithOverrides(overrideUserId, overrideAttributes);
          if (user.id === null) {
              logger$7.info('Not activating experiment "%s" because userId is not set', experimentKey);
              return null;
          }
          return this._client.activate(experimentKey, user.id, user.attributes);
      };
      /**
       * Gets variation where visitor will be bucketed
       * @param {string} experimentKey
       * @param {string} [overrideUserId]
       * @param {optimizely.UserAttributes} [overrideAttributes]
       * @returns {(string | null)}
       * @memberof OptimizelyReactSDKClient
       */
      OptimizelyReactSDKClient.prototype.getVariation = function (experimentKey, overrideUserId, overrideAttributes) {
          var user = this.getUserContextWithOverrides(overrideUserId, overrideAttributes);
          if (user.id === null) {
              logger$7.info('getVariation returned null for experiment "%s" because userId is not set', experimentKey);
              return null;
          }
          return this._client.getVariation(experimentKey, user.id, user.attributes);
      };
      /**
       * Sends conversion event to Optimizely
       * @param {string} eventKey
       * @param {string} [overrideUserId]
       * @param {optimizely.UserAttributes} [overrideAttributes]
       * @param {optimizely.EventTags} [eventTags]
       * @memberof OptimizelyReactSDKClient
       */
      OptimizelyReactSDKClient.prototype.track = function (eventKey, overrideUserId, overrideAttributes, eventTags) {
          if (typeof overrideUserId !== 'undefined' && typeof overrideUserId !== 'string') {
              eventTags = overrideUserId;
              overrideUserId = undefined;
              overrideAttributes = undefined;
          }
          var user = this.getUserContextWithOverrides(overrideUserId, overrideAttributes);
          if (user.id === null) {
              logger$7.info('track for event "%s" not being sent because userId is not set', eventKey);
              return;
          }
          return this._client.track(eventKey, user.id, user.attributes, eventTags);
      };
      /**
       * Returns true if the feature is enabled for the given user
       * @param {string} feature
       * @param {string} [overrideUserId]
       * @param {optimizely.UserAttributes} [overrideAttributes]
       * @returns {boolean}
       * @memberof OptimizelyReactSDKClient
       */
      OptimizelyReactSDKClient.prototype.isFeatureEnabled = function (feature, overrideUserId, overrideAttributes) {
          var user = this.getUserContextWithOverrides(overrideUserId, overrideAttributes);
          if (user.id === null) {
              logger$7.info('isFeatureEnabled returning false for feature "%s" because userId is not set', feature);
              return false;
          }
          return this._client.isFeatureEnabled(feature, user.id, user.attributes);
      };
      /**
       * Get all variables for a feature, regardless of the feature being enabled/disabled
       * @param {string} feature
       * @param {string} [overrideUserId]
       * @param {optimizely.UserAttributes} [overrideAttributes]
       * @returns {VariableValuesObject}
       * @memberof OptimizelyReactSDKClient
       */
      OptimizelyReactSDKClient.prototype.getFeatureVariables = function (featureKey, overrideUserId, overrideAttributes) {
          var _this = this;
          var user = this.getUserContextWithOverrides(overrideUserId, overrideAttributes);
          var userId = user.id;
          if (userId === null) {
              logger$7.info('getFeatureVariables returning `{}` for feature "%s" because userId is not set', featureKey);
              return {};
          }
          var userAttributes = user.attributes;
          var variableObj = {};
          var config = this._client.projectConfigManager.getConfig();
          if (!config) {
              return {};
          }
          var feature = config.featureKeyMap[featureKey];
          if (!feature) {
              return {};
          }
          var variables = feature.variables;
          variables.forEach(function (variableDef) {
              var type = variableDef.type;
              var key = variableDef.key;
              switch (type) {
                  case 'string':
                      variableObj[key] = _this._client.getFeatureVariableString(featureKey, key, userId, userAttributes);
                      break;
                  case 'boolean':
                      variableObj[key] = _this._client.getFeatureVariableBoolean(featureKey, key, userId, userAttributes);
                      break;
                  case 'integer':
                      variableObj[key] = _this._client.getFeatureVariableInteger(featureKey, key, userId, userAttributes);
                      break;
                  case 'double':
                      variableObj[key] = _this._client.getFeatureVariableDouble(featureKey, key, userId, userAttributes);
                      break;
              }
          });
          return variableObj;
      };
      /**
       * Returns value for the given string variable attached to the given feature
       * flag
       * @param {string} feature
       * @param {string} variable
       * @param {string} [overrideUserId]
       * @param {optimizely.UserAttributes} [overrideAttributes]
       * @returns {(string | null)}
       * @memberof OptimizelyReactSDKClient
       */
      OptimizelyReactSDKClient.prototype.getFeatureVariableString = function (feature, variable, overrideUserId, overrideAttributes) {
          var user = this.getUserContextWithOverrides(overrideUserId, overrideAttributes);
          if (user.id === null) {
              return null;
          }
          return this._client.getFeatureVariableString(feature, variable, user.id, user.attributes);
      };
      /**
       * Returns value for the given boolean variable attached to the given feature
       * flag
       * @param {string} feature
       * @param {string} variable
       * @param {string} [overrideUserId]
       * @param {optimizely.UserAttributes} [overrideAttributes]
       * @returns {(string | null)}
       * @memberof OptimizelyReactSDKClient
       */
      OptimizelyReactSDKClient.prototype.getFeatureVariableBoolean = function (feature, variable, overrideUserId, overrideAttributes) {
          var user = this.getUserContextWithOverrides(overrideUserId, overrideAttributes);
          if (user.id === null) {
              return null;
          }
          return this._client.getFeatureVariableBoolean(feature, variable, user.id, user.attributes);
      };
      /**
       * Returns value for the given integer variable attached to the given feature
       * flag
       * @param {string} feature
       * @param {string} variable
       * @param {string} [overrideUserId]
       * @param {optimizely.UserAttributes} [overrideAttributes]
       * @returns {(string | null)}
       * @memberof OptimizelyReactSDKClient
       */
      OptimizelyReactSDKClient.prototype.getFeatureVariableInteger = function (feature, variable, overrideUserId, overrideAttributes) {
          var user = this.getUserContextWithOverrides(overrideUserId, overrideAttributes);
          if (user.id === null) {
              return null;
          }
          return this._client.getFeatureVariableInteger(feature, variable, user.id, user.attributes);
      };
      /**
       * Returns value for the given double variable attached to the given feature
       * flag
       * @param {string} feature
       * @param {string} variable
       * @param {string} [overrideUserId]
       * @param {optimizely.UserAttributes} [overrideAttributes]
       * @returns {(string | null)}
       * @memberof OptimizelyReactSDKClient
       */
      OptimizelyReactSDKClient.prototype.getFeatureVariableDouble = function (feature, variable, overrideUserId, overrideAttributes) {
          var user = this.getUserContextWithOverrides(overrideUserId, overrideAttributes);
          if (user.id === null) {
              return null;
          }
          return this._client.getFeatureVariableDouble(feature, variable, user.id, user.attributes);
      };
      /**
       * Get an array of all enabled features
       * @param {string} [overrideUserId]
       * @param {optimizely.UserAttributes} [overrideUserId]
       * @returns {Array<string>}
       * @memberof OptimizelyReactSDKClient
       */
      OptimizelyReactSDKClient.prototype.getEnabledFeatures = function (overrideUserId, overrideAttributes) {
          var user = this.getUserContextWithOverrides(overrideUserId, overrideAttributes);
          if (user.id === null) {
              return [];
          }
          return this._client.getEnabledFeatures(user.id, user.attributes);
      };
      /**
       * Gets the forced variation for a given user and experiment
       * @param {string} experiment
       * @param {string} [overrideUserId]
       * @returns {(string | null)}
       * @memberof OptimizelyReactSDKClient
       */
      OptimizelyReactSDKClient.prototype.getForcedVariation = function (experiment, overrideUserId) {
          var user = this.getUserContextWithOverrides(overrideUserId);
          if (user.id === null) {
              return null;
          }
          return this._client.getForcedVariation(experiment, user.id);
      };
      /**
       * Force a user into a variation for a given experiment
       * @param {string} experiment
       * @param {string} overrideUserIdOrVariationKey
       * @param {string} [variationKey]
       * @returns {boolean}
       * @memberof OptimizelyReactSDKClient
       */
      OptimizelyReactSDKClient.prototype.setForcedVariation = function (experiment, overrideUserIdOrVariationKey, variationKey) {
          var finalUserId = null;
          var finalVariationKey = null;
          if (arguments.length === 2) {
              finalVariationKey = overrideUserIdOrVariationKey;
              finalUserId = this.getUserContextWithOverrides().id;
          }
          else if (arguments.length === 3) {
              finalUserId = this.getUserContextWithOverrides(overrideUserIdOrVariationKey).id;
              if (variationKey === undefined) {
                  // can't have undefined if supplying all 3 arguments
                  return false;
              }
              finalVariationKey = variationKey;
          }
          if (finalUserId === null) {
              return false;
          }
          return this._client.setForcedVariation(experiment, finalUserId, finalVariationKey);
      };
      /**
       *  Returns OptimizelyConfig object containing experiments and features data
       *  @returns {optimizely.OptimizelyConfig | null} optimizely config
       */
      OptimizelyReactSDKClient.prototype.getOptimizelyConfig = function () {
          return this._client.getOptimizelyConfig();
      };
      /**
       * Cleanup method for killing an running timers and flushing eventQueue
       */
      OptimizelyReactSDKClient.prototype.close = function () {
          return this._client.close();
      };
      Object.defineProperty(OptimizelyReactSDKClient.prototype, "client", {
          /**
           * Provide access to inner optimizely.Client object
           */
          get: function () {
              return this._client;
          },
          enumerable: true,
          configurable: true
      });
      Object.defineProperty(OptimizelyReactSDKClient.prototype, "notificationCenter", {
          get: function () {
              return this._client.notificationCenter;
          },
          enumerable: true,
          configurable: true
      });
      OptimizelyReactSDKClient.prototype.getUserContextWithOverrides = function (overrideUserId, overrideAttributes) {
          var finalUserId = overrideUserId === undefined ? this.user.id : overrideUserId;
          var finalUserAttributes = overrideAttributes === undefined ? this.user.attributes : overrideAttributes;
          return {
              id: finalUserId,
              attributes: finalUserAttributes,
          };
      };
      return OptimizelyReactSDKClient;
  }());
  function createInstance(config) {
      return new OptimizelyReactSDKClient(config);
  }

  var logger$8 = lib_1$1('<OptimizelyFeature>');
  var FeatureComponent = /** @class */ (function (_super) {
      __extends(FeatureComponent, _super);
      function FeatureComponent(props) {
          var _this = _super.call(this, props) || this;
          _this.autoUpdate = false;
          _this.unregisterUserListener = function () { };
          var autoUpdate = props.autoUpdate, isServerSide = props.isServerSide, optimizely = props.optimizely, feature = props.feature;
          _this.autoUpdate = !!autoUpdate;
          if (isServerSide) {
              if (optimizely === null) {
                  throw new Error('optimizely prop must be supplied');
              }
              var isEnabled = optimizely.isFeatureEnabled(feature);
              var variables = optimizely.getFeatureVariables(feature);
              _this.state = {
                  canRender: true,
                  isEnabled: isEnabled,
                  variables: variables,
              };
          }
          else {
              _this.state = {
                  canRender: false,
                  isEnabled: false,
                  variables: {},
              };
          }
          return _this;
      }
      FeatureComponent.prototype.componentDidMount = function () {
          var _this = this;
          var _a = this.props, feature = _a.feature, optimizely = _a.optimizely, optimizelyReadyTimeout = _a.optimizelyReadyTimeout, isServerSide = _a.isServerSide, timeout = _a.timeout;
          if (optimizely === null) {
              throw new Error('optimizely prop must be supplied');
          }
          if (isServerSide) {
              return;
          }
          // allow overriding of the ready timeout via the `timeout` prop passed to <Experiment />
          var finalReadyTimeout = timeout !== undefined ? timeout : optimizelyReadyTimeout;
          optimizely.onReady({ timeout: finalReadyTimeout }).then(function (res) {
              if (res.success) {
                  logger$8.info('feature="%s" successfully rendered for user="%s"', feature, optimizely.user.id);
              }
              else {
                  logger$8.info('feature="%s" could not be checked before timeout of %sms, reason="%s" ', feature, timeout === undefined ? DEFAULT_ON_READY_TIMEOUT : timeout, res.reason || '');
              }
              var isEnabled = optimizely.isFeatureEnabled(feature);
              var variables = optimizely.getFeatureVariables(feature);
              _this.setState({
                  canRender: true,
                  isEnabled: isEnabled,
                  variables: variables,
              });
              if (_this.autoUpdate) {
                  _this.setupAutoUpdateListeners();
              }
          });
      };
      FeatureComponent.prototype.setupAutoUpdateListeners = function () {
          var _this = this;
          var _a = this.props, optimizely = _a.optimizely, feature = _a.feature;
          if (optimizely === null) {
              return;
          }
          this.optimizelyNotificationId = optimizely.notificationCenter.addNotificationListener('OPTIMIZELY_CONFIG_UPDATE', function () {
              logger$8.info('OPTIMIZELY_CONFIG_UPDATE, re-evaluating feature="%s" for user="%s"', feature, optimizely.user.id);
              var isEnabled = optimizely.isFeatureEnabled(feature);
              var variables = optimizely.getFeatureVariables(feature);
              _this.setState({
                  isEnabled: isEnabled,
                  variables: variables,
              });
          });
          this.unregisterUserListener = optimizely.onUserUpdate(function () {
              logger$8.info('User update, re-evaluating feature="%s" for user="%s"', feature, optimizely.user.id);
              var isEnabled = optimizely.isFeatureEnabled(feature);
              var variables = optimizely.getFeatureVariables(feature);
              _this.setState({
                  isEnabled: isEnabled,
                  variables: variables,
              });
          });
      };
      FeatureComponent.prototype.componentWillUnmount = function () {
          var _a = this.props, optimizely = _a.optimizely, isServerSide = _a.isServerSide;
          if (isServerSide || !this.autoUpdate) {
              return;
          }
          if (optimizely && this.optimizelyNotificationId) {
              optimizely.notificationCenter.removeNotificationListener(this.optimizelyNotificationId);
          }
          this.unregisterUserListener();
      };
      FeatureComponent.prototype.render = function () {
          var children = this.props.children;
          var _a = this.state, isEnabled = _a.isEnabled, variables = _a.variables, canRender = _a.canRender;
          if (!canRender) {
              return null;
          }
          return children(isEnabled, variables);
      };
      return FeatureComponent;
  }(React.Component));
  var OptimizelyFeature = withOptimizely(FeatureComponent);

  var logger$9 = lib_1$1('<OptimizelyExperiment>');
  var Experiment = /** @class */ (function (_super) {
      __extends(Experiment, _super);
      function Experiment(props) {
          var _this = _super.call(this, props) || this;
          _this.unregisterUserListener = function () { };
          _this.autoUpdate = false;
          var autoUpdate = props.autoUpdate, isServerSide = props.isServerSide, optimizely = props.optimizely, experiment = props.experiment;
          _this.autoUpdate = !!autoUpdate;
          if (isServerSide) {
              if (optimizely === null) {
                  throw new Error('optimizely prop must be supplied');
              }
              var variation = optimizely.activate(experiment);
              _this.state = {
                  canRender: true,
                  variation: variation,
              };
          }
          else {
              _this.state = {
                  canRender: false,
                  variation: null,
              };
          }
          return _this;
      }
      Experiment.prototype.componentDidMount = function () {
          var _this = this;
          var _a = this.props, experiment = _a.experiment, optimizely = _a.optimizely, optimizelyReadyTimeout = _a.optimizelyReadyTimeout, isServerSide = _a.isServerSide, timeout = _a.timeout;
          if (!optimizely) {
              throw new Error('optimizely prop must be supplied');
          }
          if (isServerSide) {
              return;
          }
          // allow overriding of the ready timeout via the `timeout` prop passed to <Experiment />
          var finalReadyTimeout = timeout !== undefined ? timeout : optimizelyReadyTimeout;
          optimizely.onReady({ timeout: finalReadyTimeout }).then(function (res) {
              if (res.success) {
                  logger$9.info('experiment="%s" successfully rendered for user="%s"', experiment, optimizely.user.id);
              }
              else {
                  logger$9.info('experiment="%s" could not be checked before timeout of %sms, reason="%s" ', experiment, timeout === undefined ? DEFAULT_ON_READY_TIMEOUT : timeout, res.reason || '');
              }
              var variation = optimizely.activate(experiment);
              _this.setState({
                  canRender: true,
                  variation: variation,
              });
              if (_this.autoUpdate) {
                  _this.setupAutoUpdateListeners();
              }
          });
      };
      Experiment.prototype.setupAutoUpdateListeners = function () {
          var _this = this;
          var _a = this.props, optimizely = _a.optimizely, experiment = _a.experiment;
          if (optimizely === null) {
              return;
          }
          this.optimizelyNotificationId = optimizely.notificationCenter.addNotificationListener('OPTIMIZELY_CONFIG_UPDATE', function () {
              logger$9.info('OPTIMIZELY_CONFIG_UPDATE, re-evaluating experiment="%s" for user="%s"', experiment, optimizely.user.id);
              var variation = optimizely.activate(experiment);
              _this.setState({
                  variation: variation,
              });
          });
          this.unregisterUserListener = optimizely.onUserUpdate(function () {
              logger$9.info('User update, re-evaluating experiment="%s" for user="%s"', experiment, optimizely.user.id);
              var variation = optimizely.activate(experiment);
              _this.setState({
                  variation: variation,
              });
          });
      };
      Experiment.prototype.componentWillUnmount = function () {
          var _a = this.props, optimizely = _a.optimizely, isServerSide = _a.isServerSide;
          if (isServerSide || !this.autoUpdate) {
              return;
          }
          if (optimizely && this.optimizelyNotificationId) {
              optimizely.notificationCenter.removeNotificationListener(this.optimizelyNotificationId);
          }
          this.unregisterUserListener();
      };
      Experiment.prototype.render = function () {
          var children = this.props.children;
          var _a = this.state, variation = _a.variation, canRender = _a.canRender;
          if (!canRender) {
              return null;
          }
          if (children != null && typeof children === 'function') {
              return children(variation);
          }
          var match = null;
          // We use React.Children.forEach instead of React.Children.toArray().find()
          // here because toArray adds keys to all child elements and we do not want
          // to trigger an unmount/remount
          React.Children.forEach(this.props.children, function (child) {
              if (match || !React.isValidElement(child)) {
                  return;
              }
              if (child.props.variation) {
                  if (variation === child.props.variation) {
                      match = child;
                  }
              }
              else if (child.props.default) {
                  match = child;
              }
          });
          return match ? React.cloneElement(match, { variation: variation }) : null;
      };
      return Experiment;
  }(React.Component));
  var OptimizelyExperiment = withOptimizely(Experiment);

  var Variation = /** @class */ (function (_super) {
      __extends(Variation, _super);
      function Variation() {
          return _super !== null && _super.apply(this, arguments) || this;
      }
      Variation.prototype.render = function () {
          return this.props.children;
      };
      return Variation;
  }(React.Component));
  var OptimizelyVariation = Variation;

  /**
   * Copyright 2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */
  var logger$a = lib_1$1('ReactSDK');
  /**
   * logOnlyEventDispatcher only logs a message at the debug level, and does not
   * send any requests to the Optimizely results backend. Use this to disable
   * all event dispatching.
   */
  var logOnlyEventDispatcher = {
      dispatchEvent: function (event, callback) {
          logger$a.debug('Event not dispatched by disabled event dispatcher: %s', function () {
              var eventStr;
              try {
                  eventStr = JSON.stringify(event);
              }
              catch (err) {
                  eventStr = 'error stringifying event';
              }
              return eventStr;
          });
      }
  };

  /**
   * Copyright 2018-2019, Optimizely
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   * http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   */

  exports.OptimizelyContextConsumer = OptimizelyContextConsumer;
  exports.OptimizelyContextProvider = OptimizelyContextProvider;
  exports.OptimizelyExperiment = OptimizelyExperiment;
  exports.OptimizelyFeature = OptimizelyFeature;
  exports.OptimizelyProvider = OptimizelyProvider;
  exports.OptimizelyVariation = OptimizelyVariation;
  exports.createInstance = createInstance;
  exports.enums = index_node_4;
  exports.errorHandler = index_node_2$1;
  exports.eventDispatcher = index_node_3;
  exports.logOnlyEventDispatcher = logOnlyEventDispatcher;
  exports.logging = index_node_1$1;
  exports.setLogLevel = index_node_6;
  exports.setLogger = index_node_5;
  exports.withOptimizely = withOptimizely;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
