/**
 * Copyright 2019, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Managed } from './managed';
import { ConversionEvent, ImpressionEvent } from './events';
import { EventDispatcher, EventV1Request } from './eventDispatcher';
import { EventQueue } from './eventQueue';
import { NotificationCenter } from '@optimizely/js-sdk-utils';
export declare type ProcessableEvents = ConversionEvent | ImpressionEvent;
export declare type EventDispatchResult = {
    result: boolean;
    event: ProcessableEvents;
};
export interface EventProcessor extends Managed {
    process(event: ProcessableEvents): void;
}
export declare abstract class AbstractEventProcessor implements EventProcessor {
    protected dispatcher: EventDispatcher;
    protected queue: EventQueue<ProcessableEvents>;
    private notificationCenter?;
    constructor({ dispatcher, flushInterval, maxQueueSize, notificationCenter, }: {
        dispatcher: EventDispatcher;
        flushInterval?: number;
        maxQueueSize?: number;
        notificationCenter?: NotificationCenter;
    });
    drainQueue(buffer: ProcessableEvents[]): Promise<void>;
    process(event: ProcessableEvents): void;
    stop(): Promise<any>;
    start(): void;
    protected abstract formatEvents(events: ProcessableEvents[]): EventV1Request;
}
