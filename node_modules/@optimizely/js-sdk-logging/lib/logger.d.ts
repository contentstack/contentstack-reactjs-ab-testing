import { LogLevel, LoggerFacade, LogHandler } from './models';
declare type ConsoleLogHandlerConfig = {
    logLevel?: LogLevel | string;
    logToConsole?: boolean;
    prefix?: string;
};
export declare class ConsoleLogHandler implements LogHandler {
    logLevel: LogLevel;
    private logToConsole;
    private prefix;
    /**
     * Creates an instance of ConsoleLogger.
     * @param {ConsoleLogHandlerConfig} config
     * @memberof ConsoleLogger
     */
    constructor(config?: ConsoleLogHandlerConfig);
    /**
     * @param {LogLevel} level
     * @param {string} message
     * @memberof ConsoleLogger
     */
    log(level: LogLevel, message: string): void;
    /**
     * @param {LogLevel} level
     * @memberof ConsoleLogger
     */
    setLogLevel(level: LogLevel | string): void;
    /**
     * @returns {string}
     * @memberof ConsoleLogger
     */
    getTime(): string;
    /**
     * @private
     * @param {LogLevel} targetLogLevel
     * @returns {boolean}
     * @memberof ConsoleLogger
     */
    private shouldLog;
    /**
     * @private
     * @param {LogLevel} logLevel
     * @returns {string}
     * @memberof ConsoleLogger
     */
    private getLogLevelName;
    /**
     * @private
     * @param {LogLevel} logLevel
     * @param {string[]} logArguments
     * @memberof ConsoleLogger
     */
    private consoleLog;
}
export declare function getLogger(name?: string): LoggerFacade;
export declare function setLogHandler(logger: LogHandler | null): void;
export declare function setLogLevel(level: LogLevel | string): void;
export declare function getLogLevel(): LogLevel;
/**
 * Resets all global logger state to it's original
 */
export declare function resetLogger(): void;
export {};
