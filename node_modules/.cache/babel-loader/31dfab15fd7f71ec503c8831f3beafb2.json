{"ast":null,"code":"/****************************************************************************\n * Copyright 2018, Optimizely, Inc. and contributors                        *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\nvar AND_CONDITION = 'and';\nvar OR_CONDITION = 'or';\nvar NOT_CONDITION = 'not';\nvar DEFAULT_OPERATOR_TYPES = [AND_CONDITION, OR_CONDITION, NOT_CONDITION];\n/**\n * Top level method to evaluate conditions\n * @param  {Array|*}    conditions      Nested array of and/or conditions, or a single leaf\n *                                      condition value of any type\n *                                      Example: ['and', '0', ['or', '1', '2']]\n * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition\n *                                      values\n * @return {?Boolean}                   Result of evaluating the conditions using the operator\n *                                      rules and the leaf evaluator. A return value of null\n *                                      indicates that the conditions are invalid or unable to be\n *                                      evaluated\n */\n\nfunction evaluate(conditions, leafEvaluator) {\n  if (Array.isArray(conditions)) {\n    var firstOperator = conditions[0];\n    var restOfConditions = conditions.slice(1);\n\n    if (DEFAULT_OPERATOR_TYPES.indexOf(firstOperator) === -1) {\n      // Operator to apply is not explicit - assume 'or'\n      firstOperator = OR_CONDITION;\n      restOfConditions = conditions;\n    }\n\n    switch (firstOperator) {\n      case AND_CONDITION:\n        return andEvaluator(restOfConditions, leafEvaluator);\n\n      case NOT_CONDITION:\n        return notEvaluator(restOfConditions, leafEvaluator);\n\n      default:\n        // firstOperator is OR_CONDITION\n        return orEvaluator(restOfConditions, leafEvaluator);\n    }\n  }\n\n  var leafCondition = conditions;\n  return leafEvaluator(leafCondition);\n}\n/**\n * Evaluates an array of conditions as if the evaluator had been applied\n * to each entry and the results AND-ed together.\n * @param  {Array}      conditions      Array of conditions ex: [operand_1, operand_2]\n * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition values\n * @return {?Boolean}                   Result of evaluating the conditions. A return value of null\n *                                      indicates that the conditions are invalid or unable to be\n *                                      evaluated.\n */\n\n\nfunction andEvaluator(conditions, leafEvaluator) {\n  var sawNullResult = false;\n\n  for (var i = 0; i < conditions.length; i++) {\n    var conditionResult = evaluate(conditions[i], leafEvaluator);\n\n    if (conditionResult === false) {\n      return false;\n    }\n\n    if (conditionResult === null) {\n      sawNullResult = true;\n    }\n  }\n\n  return sawNullResult ? null : true;\n}\n/**\n * Evaluates an array of conditions as if the evaluator had been applied\n * to a single entry and NOT was applied to the result.\n * @param  {Array}      conditions      Array of conditions ex: [operand_1]\n * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition values\n * @return {?Boolean}                   Result of evaluating the conditions. A return value of null\n *                                      indicates that the conditions are invalid or unable to be\n *                                      evaluated.\n */\n\n\nfunction notEvaluator(conditions, leafEvaluator) {\n  if (conditions.length > 0) {\n    var result = evaluate(conditions[0], leafEvaluator);\n    return result === null ? null : !result;\n  }\n\n  return null;\n}\n/**\n * Evaluates an array of conditions as if the evaluator had been applied\n * to each entry and the results OR-ed together.\n * @param  {Array}      conditions      Array of conditions ex: [operand_1, operand_2]\n * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition values\n * @return {?Boolean}                   Result of evaluating the conditions. A return value of null\n *                                      indicates that the conditions are invalid or unable to be\n *                                      evaluated.\n */\n\n\nfunction orEvaluator(conditions, leafEvaluator) {\n  var sawNullResult = false;\n\n  for (var i = 0; i < conditions.length; i++) {\n    var conditionResult = evaluate(conditions[i], leafEvaluator);\n\n    if (conditionResult === true) {\n      return true;\n    }\n\n    if (conditionResult === null) {\n      sawNullResult = true;\n    }\n  }\n\n  return sawNullResult ? null : false;\n}\n\nmodule.exports = {\n  evaluate: evaluate\n};","map":{"version":3,"sources":["/home/abhishek/Music/contentstack-reactjs-ab-testing/node_modules/@optimizely/optimizely-sdk/lib/core/condition_tree_evaluator/index.js"],"names":["AND_CONDITION","OR_CONDITION","NOT_CONDITION","DEFAULT_OPERATOR_TYPES","evaluate","conditions","leafEvaluator","Array","isArray","firstOperator","restOfConditions","slice","indexOf","andEvaluator","notEvaluator","orEvaluator","leafCondition","sawNullResult","i","length","conditionResult","result","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,IAAIA,aAAa,GAAG,KAApB;AACA,IAAIC,YAAY,GAAG,IAAnB;AACA,IAAIC,aAAa,GAAG,KAApB;AAEA,IAAIC,sBAAsB,GAAG,CAACH,aAAD,EAAgBC,YAAhB,EAA8BC,aAA9B,CAA7B;AAEA;;;;;;;;;;;;;AAYA,SAASE,QAAT,CAAkBC,UAAlB,EAA8BC,aAA9B,EAA6C;AAC3C,MAAIC,KAAK,CAACC,OAAN,CAAcH,UAAd,CAAJ,EAA+B;AAC7B,QAAII,aAAa,GAAGJ,UAAU,CAAC,CAAD,CAA9B;AACA,QAAIK,gBAAgB,GAAGL,UAAU,CAACM,KAAX,CAAiB,CAAjB,CAAvB;;AAEA,QAAIR,sBAAsB,CAACS,OAAvB,CAA+BH,aAA/B,MAAkD,CAAC,CAAvD,EAA0D;AACxD;AACAA,MAAAA,aAAa,GAAGR,YAAhB;AACAS,MAAAA,gBAAgB,GAAGL,UAAnB;AACD;;AAED,YAAQI,aAAR;AACE,WAAKT,aAAL;AACE,eAAOa,YAAY,CAACH,gBAAD,EAAmBJ,aAAnB,CAAnB;;AACF,WAAKJ,aAAL;AACE,eAAOY,YAAY,CAACJ,gBAAD,EAAmBJ,aAAnB,CAAnB;;AACF;AAAS;AACP,eAAOS,WAAW,CAACL,gBAAD,EAAmBJ,aAAnB,CAAlB;AANJ;AAQD;;AAED,MAAIU,aAAa,GAAGX,UAApB;AACA,SAAOC,aAAa,CAACU,aAAD,CAApB;AACD;AAED;;;;;;;;;;;AASA,SAASH,YAAT,CAAsBR,UAAtB,EAAkCC,aAAlC,EAAiD;AAC/C,MAAIW,aAAa,GAAG,KAApB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,UAAU,CAACc,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,QAAIE,eAAe,GAAGhB,QAAQ,CAACC,UAAU,CAACa,CAAD,CAAX,EAAgBZ,aAAhB,CAA9B;;AACA,QAAIc,eAAe,KAAK,KAAxB,EAA+B;AAC7B,aAAO,KAAP;AACD;;AACD,QAAIA,eAAe,KAAK,IAAxB,EAA8B;AAC5BH,MAAAA,aAAa,GAAG,IAAhB;AACD;AACF;;AACD,SAAOA,aAAa,GAAG,IAAH,GAAU,IAA9B;AACD;AAED;;;;;;;;;;;AASA,SAASH,YAAT,CAAsBT,UAAtB,EAAkCC,aAAlC,EAAiD;AAC/C,MAAID,UAAU,CAACc,MAAX,GAAoB,CAAxB,EAA2B;AACzB,QAAIE,MAAM,GAAGjB,QAAQ,CAACC,UAAU,CAAC,CAAD,CAAX,EAAgBC,aAAhB,CAArB;AACA,WAAOe,MAAM,KAAK,IAAX,GAAkB,IAAlB,GAAyB,CAACA,MAAjC;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;;;AASA,SAASN,WAAT,CAAqBV,UAArB,EAAiCC,aAAjC,EAAgD;AAC9C,MAAIW,aAAa,GAAG,KAApB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,UAAU,CAACc,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,QAAIE,eAAe,GAAGhB,QAAQ,CAACC,UAAU,CAACa,CAAD,CAAX,EAAgBZ,aAAhB,CAA9B;;AACA,QAAIc,eAAe,KAAK,IAAxB,EAA8B;AAC5B,aAAO,IAAP;AACD;;AACD,QAAIA,eAAe,KAAK,IAAxB,EAA8B;AAC5BH,MAAAA,aAAa,GAAG,IAAhB;AACD;AACF;;AACD,SAAOA,aAAa,GAAG,IAAH,GAAU,KAA9B;AACD;;AAEDK,MAAM,CAACC,OAAP,GAAiB;AACfnB,EAAAA,QAAQ,EAAEA;AADK,CAAjB","sourcesContent":["/****************************************************************************\n * Copyright 2018, Optimizely, Inc. and contributors                        *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\n\nvar AND_CONDITION = 'and';\nvar OR_CONDITION = 'or';\nvar NOT_CONDITION = 'not';\n\nvar DEFAULT_OPERATOR_TYPES = [AND_CONDITION, OR_CONDITION, NOT_CONDITION];\n\n/**\n * Top level method to evaluate conditions\n * @param  {Array|*}    conditions      Nested array of and/or conditions, or a single leaf\n *                                      condition value of any type\n *                                      Example: ['and', '0', ['or', '1', '2']]\n * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition\n *                                      values\n * @return {?Boolean}                   Result of evaluating the conditions using the operator\n *                                      rules and the leaf evaluator. A return value of null\n *                                      indicates that the conditions are invalid or unable to be\n *                                      evaluated\n */\nfunction evaluate(conditions, leafEvaluator) {\n  if (Array.isArray(conditions)) {\n    var firstOperator = conditions[0];\n    var restOfConditions = conditions.slice(1);\n\n    if (DEFAULT_OPERATOR_TYPES.indexOf(firstOperator) === -1) {\n      // Operator to apply is not explicit - assume 'or'\n      firstOperator = OR_CONDITION;\n      restOfConditions = conditions;\n    }\n\n    switch (firstOperator) {\n      case AND_CONDITION:\n        return andEvaluator(restOfConditions, leafEvaluator);\n      case NOT_CONDITION:\n        return notEvaluator(restOfConditions, leafEvaluator);\n      default: // firstOperator is OR_CONDITION\n        return orEvaluator(restOfConditions, leafEvaluator);\n    }\n  }\n\n  var leafCondition = conditions;\n  return leafEvaluator(leafCondition);\n}\n\n/**\n * Evaluates an array of conditions as if the evaluator had been applied\n * to each entry and the results AND-ed together.\n * @param  {Array}      conditions      Array of conditions ex: [operand_1, operand_2]\n * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition values\n * @return {?Boolean}                   Result of evaluating the conditions. A return value of null\n *                                      indicates that the conditions are invalid or unable to be\n *                                      evaluated.\n */\nfunction andEvaluator(conditions, leafEvaluator) {\n  var sawNullResult = false;\n  for (var i = 0; i < conditions.length; i++) {\n    var conditionResult = evaluate(conditions[i], leafEvaluator);\n    if (conditionResult === false) {\n      return false;\n    }\n    if (conditionResult === null) {\n      sawNullResult = true;\n    }\n  }\n  return sawNullResult ? null : true;\n}\n\n/**\n * Evaluates an array of conditions as if the evaluator had been applied\n * to a single entry and NOT was applied to the result.\n * @param  {Array}      conditions      Array of conditions ex: [operand_1]\n * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition values\n * @return {?Boolean}                   Result of evaluating the conditions. A return value of null\n *                                      indicates that the conditions are invalid or unable to be\n *                                      evaluated.\n */\nfunction notEvaluator(conditions, leafEvaluator) {\n  if (conditions.length > 0) {\n    var result = evaluate(conditions[0], leafEvaluator);\n    return result === null ? null : !result;\n  }\n  return null;\n}\n\n/**\n * Evaluates an array of conditions as if the evaluator had been applied\n * to each entry and the results OR-ed together.\n * @param  {Array}      conditions      Array of conditions ex: [operand_1, operand_2]\n * @param  {Function}   leafEvaluator   Function which will be called to evaluate leaf condition values\n * @return {?Boolean}                   Result of evaluating the conditions. A return value of null\n *                                      indicates that the conditions are invalid or unable to be\n *                                      evaluated.\n */\nfunction orEvaluator(conditions, leafEvaluator) {\n  var sawNullResult = false;\n  for (var i = 0; i < conditions.length; i++) {\n    var conditionResult = evaluate(conditions[i], leafEvaluator);\n    if (conditionResult === true) {\n      return true;\n    }\n    if (conditionResult === null) {\n      sawNullResult = true;\n    }\n  }\n  return sawNullResult ? null : false;\n}\n\nmodule.exports = {\n  evaluate: evaluate,\n};\n"]},"metadata":{},"sourceType":"script"}