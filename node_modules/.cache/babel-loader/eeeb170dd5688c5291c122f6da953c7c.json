{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"./events\");\n\nvar eventQueue_1 = require(\"./eventQueue\");\n\nvar js_sdk_logging_1 = require(\"@optimizely/js-sdk-logging\");\n\nvar js_sdk_utils_1 = require(\"@optimizely/js-sdk-utils\");\n\nvar logger = js_sdk_logging_1.getLogger('EventProcessor');\nvar DEFAULT_FLUSH_INTERVAL = 30000; // Unit is ms - default flush interval is 30s\n\nvar DEFAULT_MAX_QUEUE_SIZE = 10;\n\nvar AbstractEventProcessor =\n/** @class */\nfunction () {\n  function AbstractEventProcessor(_a) {\n    var dispatcher = _a.dispatcher,\n        _b = _a.flushInterval,\n        flushInterval = _b === void 0 ? 30000 : _b,\n        _c = _a.maxQueueSize,\n        maxQueueSize = _c === void 0 ? 3000 : _c,\n        notificationCenter = _a.notificationCenter;\n\n    var _this = this;\n\n    this.dispatcher = dispatcher;\n\n    if (flushInterval <= 0) {\n      logger.warn(\"Invalid flushInterval \" + flushInterval + \", defaulting to \" + DEFAULT_FLUSH_INTERVAL);\n      flushInterval = DEFAULT_FLUSH_INTERVAL;\n    }\n\n    maxQueueSize = Math.floor(maxQueueSize);\n\n    if (maxQueueSize < 1) {\n      logger.warn(\"Invalid maxQueueSize \" + maxQueueSize + \", defaulting to \" + DEFAULT_MAX_QUEUE_SIZE);\n      maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n    }\n\n    maxQueueSize = Math.max(1, maxQueueSize);\n\n    if (maxQueueSize > 1) {\n      this.queue = new eventQueue_1.DefaultEventQueue({\n        flushInterval: flushInterval,\n        maxQueueSize: maxQueueSize,\n        sink: function (buffer) {\n          return _this.drainQueue(buffer);\n        },\n        batchComparator: events_1.areEventContextsEqual\n      });\n    } else {\n      this.queue = new eventQueue_1.SingleEventQueue({\n        sink: function (buffer) {\n          return _this.drainQueue(buffer);\n        }\n      });\n    }\n\n    this.notificationCenter = notificationCenter;\n  }\n\n  AbstractEventProcessor.prototype.drainQueue = function (buffer) {\n    var _this = this;\n\n    return new Promise(function (resolve) {\n      logger.debug('draining queue with %s events', buffer.length);\n\n      if (buffer.length === 0) {\n        resolve();\n        return;\n      }\n\n      var formattedEvent = _this.formatEvents(buffer);\n\n      _this.dispatcher.dispatchEvent(formattedEvent, function () {\n        resolve();\n      });\n\n      if (_this.notificationCenter) {\n        _this.notificationCenter.sendNotifications(js_sdk_utils_1.NOTIFICATION_TYPES.LOG_EVENT, formattedEvent);\n      }\n    });\n  };\n\n  AbstractEventProcessor.prototype.process = function (event) {\n    this.queue.enqueue(event);\n  };\n\n  AbstractEventProcessor.prototype.stop = function () {\n    try {\n      // swallow, an error stopping this queue should prevent this from stopping\n      return this.queue.stop();\n    } catch (e) {\n      logger.error('Error stopping EventProcessor: \"%s\"', e.message, e);\n    }\n\n    return Promise.resolve();\n  };\n\n  AbstractEventProcessor.prototype.start = function () {\n    this.queue.start();\n  };\n\n  return AbstractEventProcessor;\n}();\n\nexports.AbstractEventProcessor = AbstractEventProcessor;","map":{"version":3,"sources":["/home/abhishek/Music/contentstack-reactjs-ab-testing/node_modules/@optimizely/js-sdk-event-processor/lib/eventProcessor.js"],"names":["Object","defineProperty","exports","value","events_1","require","eventQueue_1","js_sdk_logging_1","js_sdk_utils_1","logger","getLogger","DEFAULT_FLUSH_INTERVAL","DEFAULT_MAX_QUEUE_SIZE","AbstractEventProcessor","_a","dispatcher","_b","flushInterval","_c","maxQueueSize","notificationCenter","_this","warn","Math","floor","max","queue","DefaultEventQueue","sink","buffer","drainQueue","batchComparator","areEventContextsEqual","SingleEventQueue","prototype","Promise","resolve","debug","length","formattedEvent","formatEvents","dispatchEvent","sendNotifications","NOTIFICATION_TYPES","LOG_EVENT","process","event","enqueue","stop","e","error","message","start"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar events_1 = require(\"./events\");\nvar eventQueue_1 = require(\"./eventQueue\");\nvar js_sdk_logging_1 = require(\"@optimizely/js-sdk-logging\");\nvar js_sdk_utils_1 = require(\"@optimizely/js-sdk-utils\");\nvar logger = js_sdk_logging_1.getLogger('EventProcessor');\nvar DEFAULT_FLUSH_INTERVAL = 30000; // Unit is ms - default flush interval is 30s\nvar DEFAULT_MAX_QUEUE_SIZE = 10;\nvar AbstractEventProcessor = /** @class */ (function () {\n    function AbstractEventProcessor(_a) {\n        var dispatcher = _a.dispatcher, _b = _a.flushInterval, flushInterval = _b === void 0 ? 30000 : _b, _c = _a.maxQueueSize, maxQueueSize = _c === void 0 ? 3000 : _c, notificationCenter = _a.notificationCenter;\n        var _this = this;\n        this.dispatcher = dispatcher;\n        if (flushInterval <= 0) {\n            logger.warn(\"Invalid flushInterval \" + flushInterval + \", defaulting to \" + DEFAULT_FLUSH_INTERVAL);\n            flushInterval = DEFAULT_FLUSH_INTERVAL;\n        }\n        maxQueueSize = Math.floor(maxQueueSize);\n        if (maxQueueSize < 1) {\n            logger.warn(\"Invalid maxQueueSize \" + maxQueueSize + \", defaulting to \" + DEFAULT_MAX_QUEUE_SIZE);\n            maxQueueSize = DEFAULT_MAX_QUEUE_SIZE;\n        }\n        maxQueueSize = Math.max(1, maxQueueSize);\n        if (maxQueueSize > 1) {\n            this.queue = new eventQueue_1.DefaultEventQueue({\n                flushInterval: flushInterval,\n                maxQueueSize: maxQueueSize,\n                sink: function (buffer) { return _this.drainQueue(buffer); },\n                batchComparator: events_1.areEventContextsEqual,\n            });\n        }\n        else {\n            this.queue = new eventQueue_1.SingleEventQueue({\n                sink: function (buffer) { return _this.drainQueue(buffer); },\n            });\n        }\n        this.notificationCenter = notificationCenter;\n    }\n    AbstractEventProcessor.prototype.drainQueue = function (buffer) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            logger.debug('draining queue with %s events', buffer.length);\n            if (buffer.length === 0) {\n                resolve();\n                return;\n            }\n            var formattedEvent = _this.formatEvents(buffer);\n            _this.dispatcher.dispatchEvent(formattedEvent, function () {\n                resolve();\n            });\n            if (_this.notificationCenter) {\n                _this.notificationCenter.sendNotifications(js_sdk_utils_1.NOTIFICATION_TYPES.LOG_EVENT, formattedEvent);\n            }\n        });\n    };\n    AbstractEventProcessor.prototype.process = function (event) {\n        this.queue.enqueue(event);\n    };\n    AbstractEventProcessor.prototype.stop = function () {\n        try {\n            // swallow, an error stopping this queue should prevent this from stopping\n            return this.queue.stop();\n        }\n        catch (e) {\n            logger.error('Error stopping EventProcessor: \"%s\"', e.message, e);\n        }\n        return Promise.resolve();\n    };\n    AbstractEventProcessor.prototype.start = function () {\n        this.queue.start();\n    };\n    return AbstractEventProcessor;\n}());\nexports.AbstractEventProcessor = AbstractEventProcessor;\n"]},"metadata":{},"sourceType":"script"}