{"ast":null,"code":"/**\n * Copyright 2016-2017, 2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nrequire('promise-polyfill/dist/polyfill');\n\nvar logging = require('@optimizely/js-sdk-logging');\n\nvar fns = require('./utils/fns');\n\nvar configValidator = require('./utils/config_validator');\n\nvar defaultErrorHandler = require('./plugins/error_handler');\n\nvar defaultEventDispatcher = require('./plugins/event_dispatcher/index.browser');\n\nvar enums = require('./utils/enums');\n\nvar eventProcessor = require('@optimizely/js-sdk-event-processor');\n\nvar loggerPlugin = require('./plugins/logger');\n\nvar Optimizely = require('./optimizely');\n\nvar eventProcessorConfigValidator = require('./utils/event_processor_config_validator');\n\nvar logger = logging.getLogger();\nlogging.setLogHandler(loggerPlugin.createLogger());\nlogging.setLogLevel(logging.LogLevel.INFO);\nvar MODULE_NAME = 'INDEX_BROWSER';\nvar DEFAULT_EVENT_BATCH_SIZE = 10;\nvar DEFAULT_EVENT_FLUSH_INTERVAL = 1000; // Unit is ms, default is 1s\n\nvar hasRetriedEvents = false;\n/**\n * Entry point into the Optimizely Browser SDK\n */\n\nmodule.exports = {\n  logging: loggerPlugin,\n  errorHandler: defaultErrorHandler,\n  eventDispatcher: defaultEventDispatcher,\n  enums: enums,\n  setLogger: logging.setLogHandler,\n  setLogLevel: logging.setLogLevel,\n\n  /**\n   * Creates an instance of the Optimizely class\n   * @param  {Object} config\n   * @param  {Object} config.datafile\n   * @param  {Object} config.errorHandler\n   * @param  {Object} config.eventDispatcher\n   * @param  {Object} config.logger\n   * @param  {Object} config.logLevel\n   * @param  {Object} config.userProfileService\n   * @param {Object} config.eventBatchSize\n   * @param {Object} config.eventFlushInterval\n   * @return {Object} the Optimizely object\n   */\n  createInstance: function (config) {\n    try {\n      config = config || {}; // TODO warn about setting per instance errorHandler / logger / logLevel\n\n      if (config.errorHandler) {\n        logging.setErrorHandler(config.errorHandler);\n      }\n\n      if (config.logger) {\n        logging.setLogHandler(config.logger); // respect the logger's shouldLog functionality\n\n        logging.setLogLevel(logging.LogLevel.NOTSET);\n      }\n\n      if (config.logLevel !== undefined) {\n        logging.setLogLevel(config.logLevel);\n      }\n\n      try {\n        configValidator.validate(config);\n        config.isValidInstance = true;\n      } catch (ex) {\n        logger.error(ex);\n        config.isValidInstance = false;\n      } // Explicitly check for null or undefined\n      // prettier-ignore\n\n\n      if (config.skipJSONValidation == null) {\n        // eslint-disable-line eqeqeq\n        config.skipJSONValidation = true;\n      }\n\n      var eventDispatcher; // prettier-ignore\n\n      if (config.eventDispatcher == null) {\n        // eslint-disable-line eqeqeq\n        // only wrap the event dispatcher with pending events retry if the user didnt override\n        eventDispatcher = new eventProcessor.LocalStoragePendingEventsDispatcher({\n          eventDispatcher: defaultEventDispatcher\n        });\n\n        if (!hasRetriedEvents) {\n          eventDispatcher.sendPendingEvents();\n          hasRetriedEvents = true;\n        }\n      } else {\n        eventDispatcher = config.eventDispatcher;\n      }\n\n      config = fns.assignIn({\n        clientEngine: enums.JAVASCRIPT_CLIENT_ENGINE,\n        eventBatchSize: DEFAULT_EVENT_BATCH_SIZE,\n        eventFlushInterval: DEFAULT_EVENT_FLUSH_INTERVAL\n      }, config, {\n        eventDispatcher: eventDispatcher,\n        // always get the OptimizelyLogger facade from logging\n        logger: logger,\n        errorHandler: logging.getErrorHandler()\n      });\n\n      if (!eventProcessorConfigValidator.validateEventBatchSize(config.eventBatchSize)) {\n        logger.warn('Invalid eventBatchSize %s, defaulting to %s', config.eventBatchSize, DEFAULT_EVENT_BATCH_SIZE);\n        config.eventBatchSize = DEFAULT_EVENT_BATCH_SIZE;\n      }\n\n      if (!eventProcessorConfigValidator.validateEventFlushInterval(config.eventFlushInterval)) {\n        logger.warn('Invalid eventFlushInterval %s, defaulting to %s', config.eventFlushInterval, DEFAULT_EVENT_FLUSH_INTERVAL);\n        config.eventFlushInterval = DEFAULT_EVENT_FLUSH_INTERVAL;\n      }\n\n      var optimizely = new Optimizely(config);\n\n      try {\n        if (typeof window.addEventListener === 'function') {\n          var unloadEvent = 'onpagehide' in window ? 'pagehide' : 'unload';\n          window.addEventListener(unloadEvent, function () {\n            optimizely.close();\n          }, false);\n        }\n      } catch (e) {\n        logger.error(enums.LOG_MESSAGES.UNABLE_TO_ATTACH_UNLOAD, MODULE_NAME, e.message);\n      }\n\n      return optimizely;\n    } catch (e) {\n      logger.error(e);\n      return null;\n    }\n  },\n  __internalResetRetryState: function () {\n    hasRetriedEvents = false;\n  }\n};","map":{"version":3,"sources":["/home/abhishek/Music/contentstack-reactjs-ab-testing/node_modules/@optimizely/optimizely-sdk/lib/index.browser.js"],"names":["require","logging","fns","configValidator","defaultErrorHandler","defaultEventDispatcher","enums","eventProcessor","loggerPlugin","Optimizely","eventProcessorConfigValidator","logger","getLogger","setLogHandler","createLogger","setLogLevel","LogLevel","INFO","MODULE_NAME","DEFAULT_EVENT_BATCH_SIZE","DEFAULT_EVENT_FLUSH_INTERVAL","hasRetriedEvents","module","exports","errorHandler","eventDispatcher","setLogger","createInstance","config","setErrorHandler","NOTSET","logLevel","undefined","validate","isValidInstance","ex","error","skipJSONValidation","LocalStoragePendingEventsDispatcher","sendPendingEvents","assignIn","clientEngine","JAVASCRIPT_CLIENT_ENGINE","eventBatchSize","eventFlushInterval","getErrorHandler","validateEventBatchSize","warn","validateEventFlushInterval","optimizely","window","addEventListener","unloadEvent","close","e","LOG_MESSAGES","UNABLE_TO_ATTACH_UNLOAD","message","__internalResetRetryState"],"mappings":"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","sourcesContent":["/**\n * Copyright 2016-2017, 2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nrequire('promise-polyfill/dist/polyfill');\nvar logging = require('@optimizely/js-sdk-logging');\nvar fns = require('./utils/fns');\nvar configValidator = require('./utils/config_validator');\nvar defaultErrorHandler = require('./plugins/error_handler');\nvar defaultEventDispatcher = require('./plugins/event_dispatcher/index.browser');\nvar enums = require('./utils/enums');\nvar eventProcessor = require('@optimizely/js-sdk-event-processor');\nvar loggerPlugin = require('./plugins/logger');\nvar Optimizely = require('./optimizely');\nvar eventProcessorConfigValidator = require('./utils/event_processor_config_validator');\n\nvar logger = logging.getLogger();\nlogging.setLogHandler(loggerPlugin.createLogger());\nlogging.setLogLevel(logging.LogLevel.INFO);\n\nvar MODULE_NAME = 'INDEX_BROWSER';\n\nvar DEFAULT_EVENT_BATCH_SIZE = 10;\nvar DEFAULT_EVENT_FLUSH_INTERVAL = 1000; // Unit is ms, default is 1s\n\nvar hasRetriedEvents = false;\n/**\n * Entry point into the Optimizely Browser SDK\n */\nmodule.exports = {\n  logging: loggerPlugin,\n  errorHandler: defaultErrorHandler,\n  eventDispatcher: defaultEventDispatcher,\n  enums: enums,\n\n  setLogger: logging.setLogHandler,\n  setLogLevel: logging.setLogLevel,\n\n  /**\n   * Creates an instance of the Optimizely class\n   * @param  {Object} config\n   * @param  {Object} config.datafile\n   * @param  {Object} config.errorHandler\n   * @param  {Object} config.eventDispatcher\n   * @param  {Object} config.logger\n   * @param  {Object} config.logLevel\n   * @param  {Object} config.userProfileService\n   * @param {Object} config.eventBatchSize\n   * @param {Object} config.eventFlushInterval\n   * @return {Object} the Optimizely object\n   */\n  createInstance: function(config) {\n    try {\n      config = config || {};\n\n      // TODO warn about setting per instance errorHandler / logger / logLevel\n      if (config.errorHandler) {\n        logging.setErrorHandler(config.errorHandler);\n      }\n      if (config.logger) {\n        logging.setLogHandler(config.logger);\n        // respect the logger's shouldLog functionality\n        logging.setLogLevel(logging.LogLevel.NOTSET);\n      }\n      if (config.logLevel !== undefined) {\n        logging.setLogLevel(config.logLevel);\n      }\n\n      try {\n        configValidator.validate(config);\n        config.isValidInstance = true;\n      } catch (ex) {\n        logger.error(ex);\n        config.isValidInstance = false;\n      }\n\n      // Explicitly check for null or undefined\n      // prettier-ignore\n      if (config.skipJSONValidation == null) { // eslint-disable-line eqeqeq\n        config.skipJSONValidation = true;\n      }\n\n      var eventDispatcher;\n      // prettier-ignore\n      if (config.eventDispatcher == null) { // eslint-disable-line eqeqeq\n        // only wrap the event dispatcher with pending events retry if the user didnt override\n        eventDispatcher = new eventProcessor.LocalStoragePendingEventsDispatcher({\n          eventDispatcher: defaultEventDispatcher,\n        });\n\n        if (!hasRetriedEvents) {\n          eventDispatcher.sendPendingEvents();\n          hasRetriedEvents = true;\n        }\n      } else {\n        eventDispatcher = config.eventDispatcher;\n      }\n\n      config = fns.assignIn(\n        {\n          clientEngine: enums.JAVASCRIPT_CLIENT_ENGINE,\n          eventBatchSize: DEFAULT_EVENT_BATCH_SIZE,\n          eventFlushInterval: DEFAULT_EVENT_FLUSH_INTERVAL,\n        },\n        config,\n        {\n          eventDispatcher: eventDispatcher,\n          // always get the OptimizelyLogger facade from logging\n          logger: logger,\n          errorHandler: logging.getErrorHandler(),\n        }\n      );\n\n      if (!eventProcessorConfigValidator.validateEventBatchSize(config.eventBatchSize)) {\n        logger.warn('Invalid eventBatchSize %s, defaulting to %s', config.eventBatchSize, DEFAULT_EVENT_BATCH_SIZE);\n        config.eventBatchSize = DEFAULT_EVENT_BATCH_SIZE;\n      }\n      if (!eventProcessorConfigValidator.validateEventFlushInterval(config.eventFlushInterval)) {\n        logger.warn('Invalid eventFlushInterval %s, defaulting to %s', config.eventFlushInterval, DEFAULT_EVENT_FLUSH_INTERVAL);\n        config.eventFlushInterval = DEFAULT_EVENT_FLUSH_INTERVAL;\n      }\n\n      var optimizely = new Optimizely(config);\n\n      try {\n        if (typeof window.addEventListener === 'function') {\n          var unloadEvent = 'onpagehide' in window ? 'pagehide' : 'unload';\n          window.addEventListener(\n            unloadEvent,\n            function() {\n              optimizely.close();\n            },\n            false\n          );\n        }\n      } catch (e) {\n        logger.error(enums.LOG_MESSAGES.UNABLE_TO_ATTACH_UNLOAD, MODULE_NAME, e.message);\n      }\n\n      return optimizely;\n    } catch (e) {\n      logger.error(e);\n      return null;\n    }\n  },\n\n  __internalResetRetryState: function() {\n    hasRetriedEvents = false;\n  },\n};\n"]},"metadata":{},"sourceType":"script"}