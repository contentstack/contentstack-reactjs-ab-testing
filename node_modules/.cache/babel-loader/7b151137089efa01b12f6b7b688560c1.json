{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar js_sdk_logging_1 = require(\"@optimizely/js-sdk-logging\");\n\nvar logger = js_sdk_logging_1.getLogger('EventProcessor');\n\nvar Timer =\n/** @class */\nfunction () {\n  function Timer(_a) {\n    var timeout = _a.timeout,\n        callback = _a.callback;\n    this.timeout = Math.max(timeout, 0);\n    this.callback = callback;\n  }\n\n  Timer.prototype.start = function () {\n    this.timeoutId = setTimeout(this.callback, this.timeout);\n  };\n\n  Timer.prototype.refresh = function () {\n    this.stop();\n    this.start();\n  };\n\n  Timer.prototype.stop = function () {\n    if (this.timeoutId) {\n      clearTimeout(this.timeoutId);\n    }\n  };\n\n  return Timer;\n}();\n\nvar SingleEventQueue =\n/** @class */\nfunction () {\n  function SingleEventQueue(_a) {\n    var sink = _a.sink;\n    this.sink = sink;\n  }\n\n  SingleEventQueue.prototype.start = function () {// no-op\n  };\n\n  SingleEventQueue.prototype.stop = function () {\n    // no-op\n    return Promise.resolve();\n  };\n\n  SingleEventQueue.prototype.enqueue = function (event) {\n    this.sink([event]);\n  };\n\n  return SingleEventQueue;\n}();\n\nexports.SingleEventQueue = SingleEventQueue;\n\nvar DefaultEventQueue =\n/** @class */\nfunction () {\n  function DefaultEventQueue(_a) {\n    var flushInterval = _a.flushInterval,\n        maxQueueSize = _a.maxQueueSize,\n        sink = _a.sink,\n        batchComparator = _a.batchComparator;\n    this.buffer = [];\n    this.maxQueueSize = Math.max(maxQueueSize, 1);\n    this.sink = sink;\n    this.batchComparator = batchComparator;\n    this.timer = new Timer({\n      callback: this.flush.bind(this),\n      timeout: flushInterval\n    });\n    this.started = false;\n  }\n\n  DefaultEventQueue.prototype.start = function () {\n    this.started = true; // dont start the timer until the first event is enqueued\n  };\n\n  DefaultEventQueue.prototype.stop = function () {\n    this.started = false;\n    var result = this.sink(this.buffer);\n    this.buffer = [];\n    this.timer.stop();\n    return result;\n  };\n\n  DefaultEventQueue.prototype.enqueue = function (event) {\n    if (!this.started) {\n      logger.warn('Queue is stopped, not accepting event');\n      return;\n    } // If new event cannot be included into the current batch, flush so it can\n    // be in its own new batch.\n\n\n    var bufferedEvent = this.buffer[0];\n\n    if (bufferedEvent && !this.batchComparator(bufferedEvent, event)) {\n      this.flush();\n    } // start the timer when the first event is put in\n\n\n    if (this.buffer.length === 0) {\n      this.timer.refresh();\n    }\n\n    this.buffer.push(event);\n\n    if (this.buffer.length >= this.maxQueueSize) {\n      this.flush();\n    }\n  };\n\n  DefaultEventQueue.prototype.flush = function () {\n    this.sink(this.buffer);\n    this.buffer = [];\n    this.timer.stop();\n  };\n\n  return DefaultEventQueue;\n}();\n\nexports.DefaultEventQueue = DefaultEventQueue;","map":{"version":3,"sources":["/home/abhishek/Music/contentstack-reactjs-ab-testing/node_modules/@optimizely/js-sdk-event-processor/lib/eventQueue.js"],"names":["Object","defineProperty","exports","value","js_sdk_logging_1","require","logger","getLogger","Timer","_a","timeout","callback","Math","max","prototype","start","timeoutId","setTimeout","refresh","stop","clearTimeout","SingleEventQueue","sink","Promise","resolve","enqueue","event","DefaultEventQueue","flushInterval","maxQueueSize","batchComparator","buffer","timer","flush","bind","started","result","warn","bufferedEvent","length","push"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar js_sdk_logging_1 = require(\"@optimizely/js-sdk-logging\");\nvar logger = js_sdk_logging_1.getLogger('EventProcessor');\nvar Timer = /** @class */ (function () {\n    function Timer(_a) {\n        var timeout = _a.timeout, callback = _a.callback;\n        this.timeout = Math.max(timeout, 0);\n        this.callback = callback;\n    }\n    Timer.prototype.start = function () {\n        this.timeoutId = setTimeout(this.callback, this.timeout);\n    };\n    Timer.prototype.refresh = function () {\n        this.stop();\n        this.start();\n    };\n    Timer.prototype.stop = function () {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n        }\n    };\n    return Timer;\n}());\nvar SingleEventQueue = /** @class */ (function () {\n    function SingleEventQueue(_a) {\n        var sink = _a.sink;\n        this.sink = sink;\n    }\n    SingleEventQueue.prototype.start = function () {\n        // no-op\n    };\n    SingleEventQueue.prototype.stop = function () {\n        // no-op\n        return Promise.resolve();\n    };\n    SingleEventQueue.prototype.enqueue = function (event) {\n        this.sink([event]);\n    };\n    return SingleEventQueue;\n}());\nexports.SingleEventQueue = SingleEventQueue;\nvar DefaultEventQueue = /** @class */ (function () {\n    function DefaultEventQueue(_a) {\n        var flushInterval = _a.flushInterval, maxQueueSize = _a.maxQueueSize, sink = _a.sink, batchComparator = _a.batchComparator;\n        this.buffer = [];\n        this.maxQueueSize = Math.max(maxQueueSize, 1);\n        this.sink = sink;\n        this.batchComparator = batchComparator;\n        this.timer = new Timer({\n            callback: this.flush.bind(this),\n            timeout: flushInterval,\n        });\n        this.started = false;\n    }\n    DefaultEventQueue.prototype.start = function () {\n        this.started = true;\n        // dont start the timer until the first event is enqueued\n    };\n    DefaultEventQueue.prototype.stop = function () {\n        this.started = false;\n        var result = this.sink(this.buffer);\n        this.buffer = [];\n        this.timer.stop();\n        return result;\n    };\n    DefaultEventQueue.prototype.enqueue = function (event) {\n        if (!this.started) {\n            logger.warn('Queue is stopped, not accepting event');\n            return;\n        }\n        // If new event cannot be included into the current batch, flush so it can\n        // be in its own new batch.\n        var bufferedEvent = this.buffer[0];\n        if (bufferedEvent && !this.batchComparator(bufferedEvent, event)) {\n            this.flush();\n        }\n        // start the timer when the first event is put in\n        if (this.buffer.length === 0) {\n            this.timer.refresh();\n        }\n        this.buffer.push(event);\n        if (this.buffer.length >= this.maxQueueSize) {\n            this.flush();\n        }\n    };\n    DefaultEventQueue.prototype.flush = function () {\n        this.sink(this.buffer);\n        this.buffer = [];\n        this.timer.stop();\n    };\n    return DefaultEventQueue;\n}());\nexports.DefaultEventQueue = DefaultEventQueue;\n"]},"metadata":{},"sourceType":"script"}