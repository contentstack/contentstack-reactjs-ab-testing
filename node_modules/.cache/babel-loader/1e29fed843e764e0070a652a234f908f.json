{"ast":null,"code":"/****************************************************************************\n * Copyright 2016-2019, Optimizely, Inc. and contributors                   *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\nvar fns = require('../utils/fns');\n\nvar attributesValidator = require('../utils/attributes_validator');\n\nvar decisionService = require('../core/decision_service');\n\nvar enums = require('../utils/enums');\n\nvar eventBuilder = require('../core/event_builder/index.js');\n\nvar eventHelpers = require('../core/event_builder/event_helpers');\n\nvar eventProcessor = require('@optimizely/js-sdk-event-processor');\n\nvar eventTagsValidator = require('../utils/event_tags_validator');\n\nvar notificationCenter = require('../core/notification_center');\n\nvar projectConfig = require('../core/project_config');\n\nvar sprintf = require('@optimizely/js-sdk-utils').sprintf;\n\nvar userProfileServiceValidator = require('../utils/user_profile_service_validator');\n\nvar stringValidator = require('../utils/string_value_validator');\n\nvar projectConfigManager = require('../core/project_config/project_config_manager');\n\nvar ERROR_MESSAGES = enums.ERROR_MESSAGES;\nvar LOG_LEVEL = enums.LOG_LEVEL;\nvar LOG_MESSAGES = enums.LOG_MESSAGES;\nvar MODULE_NAME = 'OPTIMIZELY';\nvar DECISION_SOURCES = enums.DECISION_SOURCES;\nvar FEATURE_VARIABLE_TYPES = enums.FEATURE_VARIABLE_TYPES;\nvar DECISION_NOTIFICATION_TYPES = enums.DECISION_NOTIFICATION_TYPES;\nvar NOTIFICATION_TYPES = enums.NOTIFICATION_TYPES;\nvar DEFAULT_ONREADY_TIMEOUT = 30000;\n/**\n * The Optimizely class\n * @param {Object} config\n * @param {string} config.clientEngine\n * @param {string} config.clientVersion\n * @param {Object} config.datafile\n * @param {Object} config.errorHandler\n * @param {Object} config.eventDispatcher\n * @param {Object} config.logger\n * @param {Object} config.skipJSONValidation\n * @param {Object} config.userProfileService\n * @param {Object} config.eventBatchSize\n * @param {Object} config.eventFlushInterval\n */\n\nfunction Optimizely(config) {\n  var clientEngine = config.clientEngine;\n\n  if (enums.VALID_CLIENT_ENGINES.indexOf(clientEngine) === -1) {\n    config.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.INVALID_CLIENT_ENGINE, MODULE_NAME, clientEngine));\n    clientEngine = enums.NODE_CLIENT_ENGINE;\n  }\n\n  this.clientEngine = clientEngine;\n  this.clientVersion = config.clientVersion || enums.NODE_CLIENT_VERSION;\n  this.errorHandler = config.errorHandler;\n  this.eventDispatcher = config.eventDispatcher;\n  this.__isOptimizelyConfigValid = config.isValidInstance;\n  this.logger = config.logger;\n  this.projectConfigManager = new projectConfigManager.ProjectConfigManager({\n    datafile: config.datafile,\n    datafileOptions: config.datafileOptions,\n    jsonSchemaValidator: config.jsonSchemaValidator,\n    sdkKey: config.sdkKey,\n    skipJSONValidation: config.skipJSONValidation\n  });\n  this.__disposeOnUpdate = this.projectConfigManager.onUpdate(function (configObj) {\n    this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.UPDATED_OPTIMIZELY_CONFIG, MODULE_NAME, configObj.revision, configObj.projectId));\n    this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.OPTIMIZELY_CONFIG_UPDATE);\n  }.bind(this));\n  this.__readyPromise = this.projectConfigManager.onReady();\n  var userProfileService = null;\n\n  if (config.userProfileService) {\n    try {\n      if (userProfileServiceValidator.validate(config.userProfileService)) {\n        userProfileService = config.userProfileService;\n        this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.VALID_USER_PROFILE_SERVICE, MODULE_NAME));\n      }\n    } catch (ex) {\n      this.logger.log(LOG_LEVEL.WARNING, ex.message);\n    }\n  }\n\n  this.decisionService = decisionService.createDecisionService({\n    userProfileService: userProfileService,\n    logger: this.logger,\n    UNSTABLE_conditionEvaluators: config.UNSTABLE_conditionEvaluators\n  });\n  this.notificationCenter = notificationCenter.createNotificationCenter({\n    logger: this.logger,\n    errorHandler: this.errorHandler\n  });\n  this.eventProcessor = new eventProcessor.LogTierV1EventProcessor({\n    dispatcher: this.eventDispatcher,\n    flushInterval: config.eventFlushInterval,\n    maxQueueSize: config.eventBatchSize,\n    notificationCenter: this.notificationCenter\n  });\n  this.eventProcessor.start();\n  this.__readyTimeouts = {};\n  this.__nextReadyTimeoutId = 0;\n}\n/**\n * Returns a truthy value if this instance currently has a valid project config\n * object, and the initial configuration object that was passed into the\n * constructor was also valid.\n * @return {*}\n */\n\n\nOptimizely.prototype.__isValidInstance = function () {\n  return this.__isOptimizelyConfigValid && this.projectConfigManager.getConfig();\n};\n/**\n * Buckets visitor and sends impression event to Optimizely.\n * @param  {string}      experimentKey\n * @param  {string}      userId\n * @param  {Object}      attributes\n * @return {string|null} variation key\n */\n\n\nOptimizely.prototype.activate = function (experimentKey, userId, attributes) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'activate'));\n      return null;\n    }\n\n    if (!this.__validateInputs({\n      experiment_key: experimentKey,\n      user_id: userId\n    }, attributes)) {\n      return this.__notActivatingExperiment(experimentKey, userId);\n    }\n\n    var configObj = this.projectConfigManager.getConfig();\n\n    if (!configObj) {\n      return null;\n    }\n\n    try {\n      var variationKey = this.getVariation(experimentKey, userId, attributes);\n\n      if (variationKey === null) {\n        return this.__notActivatingExperiment(experimentKey, userId);\n      } // If experiment is not set to 'Running' status, log accordingly and return variation key\n\n\n      if (!projectConfig.isRunning(configObj, experimentKey)) {\n        var shouldNotDispatchActivateLogMessage = sprintf(LOG_MESSAGES.SHOULD_NOT_DISPATCH_ACTIVATE, MODULE_NAME, experimentKey);\n        this.logger.log(LOG_LEVEL.DEBUG, shouldNotDispatchActivateLogMessage);\n        return variationKey;\n      }\n\n      this._sendImpressionEvent(experimentKey, variationKey, userId, attributes);\n\n      return variationKey;\n    } catch (ex) {\n      this.logger.log(LOG_LEVEL.ERROR, ex.message);\n      var failedActivationLogMessage = sprintf(LOG_MESSAGES.NOT_ACTIVATING_USER, MODULE_NAME, userId, experimentKey);\n      this.logger.log(LOG_LEVEL.INFO, failedActivationLogMessage);\n      this.errorHandler.handleError(ex);\n      return null;\n    }\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n/**\n * Create an impression event and call the event dispatcher's dispatch method to\n * send this event to Optimizely. Then use the notification center to trigger\n * any notification listeners for the ACTIVATE notification type.\n * @param {string} experimentKey  Key of experiment that was activated\n * @param {string} variationKey   Key of variation shown in experiment that was activated\n * @param {string} userId         ID of user to whom the variation was shown\n * @param {Object} attributes     Optional user attributes\n */\n\n\nOptimizely.prototype._sendImpressionEvent = function (experimentKey, variationKey, userId, attributes) {\n  var configObj = this.projectConfigManager.getConfig();\n\n  if (!configObj) {\n    return;\n  }\n\n  var impressionEvent = eventHelpers.buildImpressionEvent({\n    experimentKey: experimentKey,\n    variationKey: variationKey,\n    userId: userId,\n    userAttributes: attributes,\n    clientEngine: this.clientEngine,\n    clientVersion: this.clientVersion,\n    configObj: configObj\n  }); // TODO is it okay to not pass a projectConfig as second argument\n\n  this.eventProcessor.process(impressionEvent);\n\n  this.__emitNotificationCenterActivate(experimentKey, variationKey, userId, attributes);\n};\n/**\n * Emit the ACTIVATE notification on the notificationCenter\n * @param {string} experimentKey  Key of experiment that was activated\n * @param {string} variationKey   Key of variation shown in experiment that was activated\n * @param {string} userId         ID of user to whom the variation was shown\n * @param {Object} attributes     Optional user attributes\n */\n\n\nOptimizely.prototype.__emitNotificationCenterActivate = function (experimentKey, variationKey, userId, attributes) {\n  var configObj = this.projectConfigManager.getConfig();\n\n  if (!configObj) {\n    return;\n  }\n\n  var variationId = projectConfig.getVariationIdFromExperimentAndVariationKey(configObj, experimentKey, variationKey);\n  var experimentId = projectConfig.getExperimentId(configObj, experimentKey);\n  var impressionEventOptions = {\n    attributes: attributes,\n    clientEngine: this.clientEngine,\n    clientVersion: this.clientVersion,\n    configObj: configObj,\n    experimentId: experimentId,\n    userId: userId,\n    variationId: variationId,\n    logger: this.logger\n  };\n  var impressionEvent = eventBuilder.getImpressionEvent(impressionEventOptions);\n  var experiment = configObj.experimentKeyMap[experimentKey];\n  var variation;\n\n  if (experiment && experiment.variationKeyMap) {\n    variation = experiment.variationKeyMap[variationKey];\n  }\n\n  this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.ACTIVATE, {\n    experiment: experiment,\n    userId: userId,\n    attributes: attributes,\n    variation: variation,\n    logEvent: impressionEvent\n  });\n};\n/**\n * Sends conversion event to Optimizely.\n * @param  {string} eventKey\n * @param  {string} userId\n * @param  {string} attributes\n * @param  {Object} eventTags Values associated with the event.\n */\n\n\nOptimizely.prototype.track = function (eventKey, userId, attributes, eventTags) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'track'));\n      return;\n    }\n\n    if (!this.__validateInputs({\n      user_id: userId,\n      event_key: eventKey\n    }, attributes, eventTags)) {\n      return;\n    }\n\n    var configObj = this.projectConfigManager.getConfig();\n\n    if (!configObj) {\n      return;\n    }\n\n    if (!projectConfig.eventWithKeyExists(configObj, eventKey)) {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_EVENT_KEY, MODULE_NAME, eventKey));\n    } // remove null values from eventTags\n\n\n    eventTags = this.__filterEmptyValues(eventTags);\n    var conversionEvent = eventHelpers.buildConversionEvent({\n      eventKey: eventKey,\n      eventTags: eventTags,\n      userId: userId,\n      userAttributes: attributes,\n      clientEngine: this.clientEngine,\n      clientVersion: this.clientVersion,\n      configObj: configObj\n    });\n    this.logger.log(LOG_LEVEL.INFO, sprintf(enums.LOG_MESSAGES.TRACK_EVENT, MODULE_NAME, eventKey, userId)); // TODO is it okay to not pass a projectConfig as second argument\n\n    this.eventProcessor.process(conversionEvent);\n\n    this.__emitNotificationCenterTrack(eventKey, userId, attributes, eventTags);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    var failedTrackLogMessage = sprintf(LOG_MESSAGES.NOT_TRACKING_USER, MODULE_NAME, userId);\n    this.logger.log(LOG_LEVEL.INFO, failedTrackLogMessage);\n  }\n};\n/**\n * Send TRACK event to notificationCenter\n * @param  {string} eventKey\n * @param  {string} userId\n * @param  {string} attributes\n * @param  {Object} eventTags Values associated with the event.\n */\n\n\nOptimizely.prototype.__emitNotificationCenterTrack = function (eventKey, userId, attributes, eventTags) {\n  try {\n    var configObj = this.projectConfigManager.getConfig();\n\n    if (!configObj) {\n      return;\n    }\n\n    var conversionEventOptions = {\n      attributes: attributes,\n      clientEngine: this.clientEngine,\n      clientVersion: this.clientVersion,\n      configObj: configObj,\n      eventKey: eventKey,\n      eventTags: eventTags,\n      logger: this.logger,\n      userId: userId\n    };\n    var conversionEvent = eventBuilder.getConversionEvent(conversionEventOptions);\n    this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.TRACK, {\n      eventKey: eventKey,\n      userId: userId,\n      attributes: attributes,\n      eventTags: eventTags,\n      logEvent: conversionEvent\n    });\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    this.errorHandler.handleError(ex);\n  }\n};\n/**\n * Gets variation where visitor will be bucketed.\n * @param  {string}      experimentKey\n * @param  {string}      userId\n * @param  {Object}      attributes\n * @return {string|null} variation key\n */\n\n\nOptimizely.prototype.getVariation = function (experimentKey, userId, attributes) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getVariation'));\n      return null;\n    }\n\n    try {\n      if (!this.__validateInputs({\n        experiment_key: experimentKey,\n        user_id: userId\n      }, attributes)) {\n        return null;\n      }\n\n      var configObj = this.projectConfigManager.getConfig();\n\n      if (!configObj) {\n        return null;\n      }\n\n      var experiment = configObj.experimentKeyMap[experimentKey];\n\n      if (fns.isEmpty(experiment)) {\n        this.logger.log(LOG_LEVEL.DEBUG, sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME, experimentKey));\n        return null;\n      }\n\n      var variationKey = this.decisionService.getVariation(configObj, experimentKey, userId, attributes);\n      var decisionNotificationType = projectConfig.isFeatureExperiment(configObj, experiment.id) ? DECISION_NOTIFICATION_TYPES.FEATURE_TEST : DECISION_NOTIFICATION_TYPES.AB_TEST;\n      this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {\n        type: decisionNotificationType,\n        userId: userId,\n        attributes: attributes || {},\n        decisionInfo: {\n          experimentKey: experimentKey,\n          variationKey: variationKey\n        }\n      });\n      return variationKey;\n    } catch (ex) {\n      this.logger.log(LOG_LEVEL.ERROR, ex.message);\n      this.errorHandler.handleError(ex);\n      return null;\n    }\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n/**\n * Force a user into a variation for a given experiment.\n * @param {string} experimentKey\n * @param {string} userId\n * @param {string|null} variationKey user will be forced into. If null, then clear the existing experiment-to-variation mapping.\n * @return boolean A boolean value that indicates if the set completed successfully.\n */\n\n\nOptimizely.prototype.setForcedVariation = function (experimentKey, userId, variationKey) {\n  if (!this.__validateInputs({\n    experiment_key: experimentKey,\n    user_id: userId\n  })) {\n    return false;\n  }\n\n  var configObj = this.projectConfigManager.getConfig();\n\n  if (!configObj) {\n    return false;\n  }\n\n  try {\n    return this.decisionService.setForcedVariation(configObj, experimentKey, userId, variationKey);\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    this.errorHandler.handleError(ex);\n    return false;\n  }\n};\n/**\n * Gets the forced variation for a given user and experiment.\n * @param  {string} experimentKey\n * @param  {string} userId\n * @return {string|null} The forced variation key.\n */\n\n\nOptimizely.prototype.getForcedVariation = function (experimentKey, userId) {\n  if (!this.__validateInputs({\n    experiment_key: experimentKey,\n    user_id: userId\n  })) {\n    return null;\n  }\n\n  var configObj = this.projectConfigManager.getConfig();\n\n  if (!configObj) {\n    return null;\n  }\n\n  try {\n    return this.decisionService.getForcedVariation(configObj, experimentKey, userId);\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    this.errorHandler.handleError(ex);\n    return null;\n  }\n};\n/**\n * Validate string inputs, user attributes and event tags.\n * @param  {string}  stringInputs   Map of string keys and associated values\n * @param  {Object}  userAttributes Optional parameter for user's attributes\n * @param  {Object}  eventTags      Optional parameter for event tags\n * @return {boolean} True if inputs are valid\n *\n */\n\n\nOptimizely.prototype.__validateInputs = function (stringInputs, userAttributes, eventTags) {\n  try {\n    // Null, undefined or non-string user Id is invalid.\n    if (stringInputs.hasOwnProperty('user_id')) {\n      var userId = stringInputs.user_id;\n\n      if (typeof userId !== 'string' || userId === null || userId === 'undefined') {\n        throw new Error(sprintf(ERROR_MESSAGES.INVALID_INPUT_FORMAT, MODULE_NAME, 'user_id'));\n      }\n\n      delete stringInputs.user_id;\n    }\n\n    var inputKeys = Object.keys(stringInputs);\n\n    for (var index = 0; index < inputKeys.length; index++) {\n      var key = inputKeys[index];\n\n      if (!stringValidator.validate(stringInputs[key])) {\n        throw new Error(sprintf(ERROR_MESSAGES.INVALID_INPUT_FORMAT, MODULE_NAME, key));\n      }\n    }\n\n    if (userAttributes) {\n      attributesValidator.validate(userAttributes);\n    }\n\n    if (eventTags) {\n      eventTagsValidator.validate(eventTags);\n    }\n\n    return true;\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    this.errorHandler.handleError(ex);\n    return false;\n  }\n};\n/**\n * Shows failed activation log message and returns null when user is not activated in experiment\n * @param  experimentKey\n * @param  userId\n * @return {null}\n */\n\n\nOptimizely.prototype.__notActivatingExperiment = function (experimentKey, userId) {\n  var failedActivationLogMessage = sprintf(LOG_MESSAGES.NOT_ACTIVATING_USER, MODULE_NAME, userId, experimentKey);\n  this.logger.log(LOG_LEVEL.INFO, failedActivationLogMessage);\n  return null;\n};\n/**\n * Filters out attributes/eventTags with null or undefined values\n * @param  map\n * @returns {Object} map\n */\n\n\nOptimizely.prototype.__filterEmptyValues = function (map) {\n  for (var key in map) {\n    if (map.hasOwnProperty(key) && (map[key] === null || map[key] === undefined)) {\n      delete map[key];\n    }\n  }\n\n  return map;\n};\n/**\n * Returns true if the feature is enabled for the given user.\n * @param {string} featureKey   Key of feature which will be checked\n * @param {string} userId       ID of user which will be checked\n * @param {Object} attributes   Optional user attributes\n * @return {boolean}            True if the feature is enabled for the user, false otherwise\n */\n\n\nOptimizely.prototype.isFeatureEnabled = function (featureKey, userId, attributes) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'isFeatureEnabled'));\n      return false;\n    }\n\n    if (!this.__validateInputs({\n      feature_key: featureKey,\n      user_id: userId\n    }, attributes)) {\n      return false;\n    }\n\n    var configObj = this.projectConfigManager.getConfig();\n\n    if (!configObj) {\n      return false;\n    }\n\n    var feature = projectConfig.getFeatureFromKey(configObj, featureKey, this.logger);\n\n    if (!feature) {\n      return false;\n    }\n\n    var featureEnabled = false;\n    var decision = this.decisionService.getVariationForFeature(configObj, feature, userId, attributes);\n    var variation = decision.variation;\n    var sourceInfo = {};\n\n    if (variation) {\n      featureEnabled = variation.featureEnabled;\n\n      if (decision.decisionSource === DECISION_SOURCES.FEATURE_TEST) {\n        sourceInfo = {\n          experimentKey: decision.experiment.key,\n          variationKey: decision.variation.key\n        }; // got a variation from the exp, so we track the impression\n\n        this._sendImpressionEvent(decision.experiment.key, decision.variation.key, userId, attributes);\n      }\n    }\n\n    if (featureEnabled === true) {\n      this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.FEATURE_ENABLED_FOR_USER, MODULE_NAME, featureKey, userId));\n    } else {\n      this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.FEATURE_NOT_ENABLED_FOR_USER, MODULE_NAME, featureKey, userId));\n      featureEnabled = false;\n    }\n\n    var featureInfo = {\n      featureKey: featureKey,\n      featureEnabled: featureEnabled,\n      source: decision.decisionSource,\n      sourceInfo: sourceInfo\n    };\n    this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {\n      type: DECISION_NOTIFICATION_TYPES.FEATURE,\n      userId: userId,\n      attributes: attributes || {},\n      decisionInfo: featureInfo\n    });\n    return featureEnabled;\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return false;\n  }\n};\n/**\n * Returns an Array containing the keys of all features in the project that are\n * enabled for the given user.\n * @param {string} userId\n * @param {Object} attributes\n * @return {Array} Array of feature keys (strings)\n */\n\n\nOptimizely.prototype.getEnabledFeatures = function (userId, attributes) {\n  try {\n    var enabledFeatures = [];\n\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getEnabledFeatures'));\n      return enabledFeatures;\n    }\n\n    if (!this.__validateInputs({\n      user_id: userId\n    })) {\n      return enabledFeatures;\n    }\n\n    var configObj = this.projectConfigManager.getConfig();\n\n    if (!configObj) {\n      return enabledFeatures;\n    }\n\n    fns.forOwn(configObj.featureKeyMap, function (feature) {\n      if (this.isFeatureEnabled(feature.key, userId, attributes)) {\n        enabledFeatures.push(feature.key);\n      }\n    }.bind(this));\n    return enabledFeatures;\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return [];\n  }\n};\n/**\n * Returns dynamically-typed value of the variable attached to the given\n * feature flag. Returns null if the feature key or variable key is invalid.\n *\n * @param {string} featureKey           Key of the feature whose variable's\n *                                      value is being accessed\n * @param {string} variableKey          Key of the variable whose value is\n *                                      being accessed\n * @param {string} userId               ID for the user\n * @param {Object} attributes           Optional user attributes\n * @return {string|boolean|number|null} Value of the variable cast to the appropriate\n *                                      type, or null if the feature key is invalid or\n *                                      the variable key is invalid\n */\n\n\nOptimizely.prototype.getFeatureVariable = function (featureKey, variableKey, userId, attributes) {\n  try {\n    return this._getFeatureVariableForType(featureKey, variableKey, null, userId, attributes);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n/**\n * Helper method to get the value for a variable of a certain type attached to a\n * feature flag. Returns null if the feature key is invalid, the variable key is\n * invalid, the given variable type does not match the variable's actual type,\n * or the variable value cannot be cast to the required type. If the given variable\n * type is null, the value of the variable cast to the appropriate type is returned.\n *\n * @param {string} featureKey           Key of the feature whose variable's value is\n *                                      being accessed\n * @param {string} variableKey          Key of the variable whose value is being\n *                                      accessed\n * @param {string|null} variableType    Type of the variable whose value is being\n *                                      accessed (must be one of FEATURE_VARIABLE_TYPES\n *                                      in lib/utils/enums/index.js), or null to return the\n *                                      value of the variable cast to the appropriate type\n * @param {string} userId               ID for the user\n * @param {Object} attributes           Optional user attributes\n * @return {string|boolean|number|null} Value of the variable cast to the appropriate\n *                                      type, or null if the feature key is invalid, the\n *                                      variable key is invalid, or there is a mismatch\n *                                      with the type of the variable\n */\n\n\nOptimizely.prototype._getFeatureVariableForType = function (featureKey, variableKey, variableType, userId, attributes) {\n  if (!this.__isValidInstance()) {\n    var apiName = variableType ? 'getFeatureVariable' + variableType.charAt(0).toUpperCase() + variableType.slice(1) : 'getFeatureVariable';\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, apiName));\n    return null;\n  }\n\n  if (!this.__validateInputs({\n    feature_key: featureKey,\n    variable_key: variableKey,\n    user_id: userId\n  }, attributes)) {\n    return null;\n  }\n\n  var configObj = this.projectConfigManager.getConfig();\n\n  if (!configObj) {\n    return null;\n  }\n\n  var featureFlag = projectConfig.getFeatureFromKey(configObj, featureKey, this.logger);\n\n  if (!featureFlag) {\n    return null;\n  }\n\n  var variable = projectConfig.getVariableForFeature(configObj, featureKey, variableKey, this.logger);\n\n  if (!variable) {\n    return null;\n  }\n\n  if (!variableType) {\n    variableType = variable.type;\n  } else if (variable.type !== variableType) {\n    this.logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.VARIABLE_REQUESTED_WITH_WRONG_TYPE, MODULE_NAME, variableType, variable.type));\n    return null;\n  }\n\n  var featureEnabled = false;\n  var variableValue = variable.defaultValue;\n  var decision = this.decisionService.getVariationForFeature(configObj, featureFlag, userId, attributes);\n\n  if (decision.variation !== null) {\n    featureEnabled = decision.variation.featureEnabled;\n    var value = projectConfig.getVariableValueForVariation(configObj, variable, decision.variation, this.logger);\n\n    if (value !== null) {\n      if (featureEnabled === true) {\n        variableValue = value;\n        this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.USER_RECEIVED_VARIABLE_VALUE, MODULE_NAME, variableKey, featureFlag.key, variableValue, userId));\n      } else {\n        this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.FEATURE_NOT_ENABLED_RETURN_DEFAULT_VARIABLE_VALUE, MODULE_NAME, featureFlag.key, userId, variableKey));\n      }\n    } else {\n      this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.VARIABLE_NOT_USED_RETURN_DEFAULT_VARIABLE_VALUE, MODULE_NAME, variableKey, decision.variation.key));\n    }\n  } else {\n    this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.USER_RECEIVED_DEFAULT_VARIABLE_VALUE, MODULE_NAME, userId, variableKey, featureFlag.key));\n  }\n\n  var sourceInfo = {};\n\n  if (decision.decisionSource === DECISION_SOURCES.FEATURE_TEST) {\n    sourceInfo = {\n      experimentKey: decision.experiment.key,\n      variationKey: decision.variation.key\n    };\n  }\n\n  var typeCastedValue = projectConfig.getTypeCastValue(variableValue, variableType, this.logger);\n  this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {\n    type: DECISION_NOTIFICATION_TYPES.FEATURE_VARIABLE,\n    userId: userId,\n    attributes: attributes || {},\n    decisionInfo: {\n      featureKey: featureKey,\n      featureEnabled: featureEnabled,\n      source: decision.decisionSource,\n      variableKey: variableKey,\n      variableValue: typeCastedValue,\n      variableType: variableType,\n      sourceInfo: sourceInfo\n    }\n  });\n  return typeCastedValue;\n};\n/**\n * Returns value for the given boolean variable attached to the given feature\n * flag.\n * @param {string} featureKey   Key of the feature whose variable's value is\n *                              being accessed\n * @param {string} variableKey  Key of the variable whose value is being\n *                              accessed\n * @param {string} userId       ID for the user\n * @param {Object} attributes   Optional user attributes\n * @return {boolean|null}       Boolean value of the variable, or null if the\n *                              feature key is invalid, the variable key is\n *                              invalid, or there is a mismatch with the type\n *                              of the variable\n */\n\n\nOptimizely.prototype.getFeatureVariableBoolean = function (featureKey, variableKey, userId, attributes) {\n  try {\n    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.BOOLEAN, userId, attributes);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n/**\n * Returns value for the given double variable attached to the given feature\n * flag.\n * @param {string} featureKey   Key of the feature whose variable's value is\n *                              being accessed\n * @param {string} variableKey  Key of the variable whose value is being\n *                              accessed\n * @param {string} userId       ID for the user\n * @param {Object} attributes   Optional user attributes\n * @return {number|null}        Number value of the variable, or null if the\n *                              feature key is invalid, the variable key is\n *                              invalid, or there is a mismatch with the type\n *                              of the variable\n */\n\n\nOptimizely.prototype.getFeatureVariableDouble = function (featureKey, variableKey, userId, attributes) {\n  try {\n    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.DOUBLE, userId, attributes);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n/**\n * Returns value for the given integer variable attached to the given feature\n * flag.\n * @param {string} featureKey   Key of the feature whose variable's value is\n *                              being accessed\n * @param {string} variableKey  Key of the variable whose value is being\n *                              accessed\n * @param {string} userId       ID for the user\n * @param {Object} attributes   Optional user attributes\n * @return {number|null}        Number value of the variable, or null if the\n *                              feature key is invalid, the variable key is\n *                              invalid, or there is a mismatch with the type\n *                              of the variable\n */\n\n\nOptimizely.prototype.getFeatureVariableInteger = function (featureKey, variableKey, userId, attributes) {\n  try {\n    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.INTEGER, userId, attributes);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n/**\n * Returns value for the given string variable attached to the given feature\n * flag.\n * @param {string} featureKey   Key of the feature whose variable's value is\n *                              being accessed\n * @param {string} variableKey  Key of the variable whose value is being\n *                              accessed\n * @param {string} userId       ID for the user\n * @param {Object} attributes   Optional user attributes\n * @return {string|null}        String value of the variable, or null if the\n *                              feature key is invalid, the variable key is\n *                              invalid, or there is a mismatch with the type\n *                              of the variable\n */\n\n\nOptimizely.prototype.getFeatureVariableString = function (featureKey, variableKey, userId, attributes) {\n  try {\n    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.STRING, userId, attributes);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n/**\n * Returns OptimizelyConfig object containing experiments and features data\n * @return {Object}\n *\n * OptimizelyConfig Object Schema\n * {\n *   'experimentsMap': {\n *     'my-fist-experiment': {\n *       'id': '111111',\n *       'key': 'my-fist-experiment'\n *       'variationsMap': {\n *         'variation_1': {\n *           'id': '121212',\n *           'key': 'variation_1',\n *           'variablesMap': {\n *             'age': {\n *               'id': '222222',\n *               'key': 'age',\n *               'type': 'integer',\n *               'value': '0',\n *             }\n *           }\n *         }\n *       }\n *     }\n *   },\n *   'featuresMap': {\n *     'awesome-feature': {\n *       'id': '333333',\n *       'key': 'awesome-feature',\n *       'experimentsMap': Object,\n *       'variationsMap': Object,\n *     }\n *   }\n * }\n */\n\n\nOptimizely.prototype.getOptimizelyConfig = function () {\n  try {\n    var configObj = this.projectConfigManager.getConfig();\n\n    if (!configObj) {\n      return null;\n    }\n\n    return this.projectConfigManager.getOptimizelyConfig();\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n/**\n * Stop background processes belonging to this instance, including:\n *\n * - Active datafile requests\n * - Pending datafile requests\n * - Pending event queue flushes\n *\n * In-flight datafile requests will be aborted. Any events waiting to be sent\n * as part of a batched event request will be immediately batched and sent to\n * the event dispatcher.\n *\n * If any such requests were sent to the event dispatcher, returns a Promise\n * that fulfills after the event dispatcher calls the response callback for each\n * request. Otherwise, returns an immediately-fulfilled Promise.\n *\n * Returned Promises are fulfilled with result objects containing these\n * properties:\n *    - success (boolean): true if all events in the queue at the time close was\n *                         called were combined into requests, sent to the\n *                         event dispatcher, and the event dispatcher called the\n *                         callbacks for each request. false if an unexpected\n *                         error was encountered during the close process.\n *    - reason (string=):  If success is false, this is a string property with\n *                         an explanatory message.\n *\n * NOTE: After close is called, this instance is no longer usable - any events\n * generated will no longer be sent to the event dispatcher.\n *\n * @return {Promise}\n */\n\n\nOptimizely.prototype.close = function () {\n  try {\n    var eventProcessorStoppedPromise = this.eventProcessor.stop();\n\n    if (this.__disposeOnUpdate) {\n      this.__disposeOnUpdate();\n\n      this.__disposeOnUpdate = null;\n    }\n\n    if (this.projectConfigManager) {\n      this.projectConfigManager.stop();\n    }\n\n    Object.keys(this.__readyTimeouts).forEach(function (readyTimeoutId) {\n      var readyTimeoutRecord = this.__readyTimeouts[readyTimeoutId];\n      clearTimeout(readyTimeoutRecord.readyTimeout);\n      readyTimeoutRecord.onClose();\n    }.bind(this));\n    this.__readyTimeouts = {};\n    return eventProcessorStoppedPromise.then(function () {\n      return {\n        success: true\n      };\n    }, function (err) {\n      return {\n        success: false,\n        reason: String(err)\n      };\n    });\n  } catch (err) {\n    this.logger.log(LOG_LEVEL.ERROR, err.message);\n    this.errorHandler.handleError(err);\n    return Promise.resolve({\n      success: false,\n      reason: String(err)\n    });\n  }\n};\n/**\n * Returns a Promise that fulfills when this instance is ready to use (meaning\n * it has a valid datafile), or has failed to become ready within a period of\n * time (configurable by the timeout property of the options argument), or when\n * this instance is closed via the close method.\n *\n * If a valid datafile was provided in the constructor, the returned Promise is\n * immediately fulfilled. If an sdkKey was provided, a manager will be used to\n * fetch  a datafile, and the returned promise will fulfill if that fetch\n * succeeds or fails before the timeout. The default timeout is 30 seconds,\n * which will be used if no timeout is provided in the argument options object.\n *\n * The returned Promise is fulfilled with a result object containing these\n * properties:\n *    - success (boolean): True if this instance is ready to use with a valid\n *                         datafile, or false if this instance failed to become\n *                         ready or was closed prior to becoming ready.\n *    - reason (string=):  If success is false, this is a string property with\n *                         an explanatory message. Failure could be due to\n *                         expiration of the timeout, network errors,\n *                         unsuccessful responses, datafile parse errors,\n *                         datafile validation errors, or the instance being\n *                         closed\n * @param  {Object=}          options\n * @param  {number|undefined} options.timeout\n * @return {Promise}\n */\n\n\nOptimizely.prototype.onReady = function (options) {\n  var timeout;\n\n  if (typeof options === 'object' && options !== null) {\n    timeout = options.timeout;\n  }\n\n  if (!fns.isFinite(timeout)) {\n    timeout = DEFAULT_ONREADY_TIMEOUT;\n  }\n\n  var resolveTimeoutPromise;\n  var timeoutPromise = new Promise(function (resolve) {\n    resolveTimeoutPromise = resolve;\n  });\n  var timeoutId = this.__nextReadyTimeoutId;\n  this.__nextReadyTimeoutId++;\n\n  var onReadyTimeout = function () {\n    delete this.__readyTimeouts[timeoutId];\n    resolveTimeoutPromise({\n      success: false,\n      reason: sprintf('onReady timeout expired after %s ms', timeout)\n    });\n  }.bind(this);\n\n  var readyTimeout = setTimeout(onReadyTimeout, timeout);\n\n  var onClose = function () {\n    resolveTimeoutPromise({\n      success: false,\n      reason: 'Instance closed'\n    });\n  };\n\n  this.__readyTimeouts[timeoutId] = {\n    readyTimeout: readyTimeout,\n    onClose: onClose\n  };\n\n  this.__readyPromise.then(function () {\n    clearTimeout(readyTimeout);\n    delete this.__readyTimeouts[timeoutId];\n    resolveTimeoutPromise({\n      success: true\n    });\n  }.bind(this));\n\n  return Promise.race([this.__readyPromise, timeoutPromise]);\n};\n\nmodule.exports = Optimizely;","map":{"version":3,"sources":["/home/abhishek/Music/contentstack-reactjs-ab-testing/node_modules/@optimizely/optimizely-sdk/lib/optimizely/index.js"],"names":["fns","require","attributesValidator","decisionService","enums","eventBuilder","eventHelpers","eventProcessor","eventTagsValidator","notificationCenter","projectConfig","sprintf","userProfileServiceValidator","stringValidator","projectConfigManager","ERROR_MESSAGES","LOG_LEVEL","LOG_MESSAGES","MODULE_NAME","DECISION_SOURCES","FEATURE_VARIABLE_TYPES","DECISION_NOTIFICATION_TYPES","NOTIFICATION_TYPES","DEFAULT_ONREADY_TIMEOUT","Optimizely","config","clientEngine","VALID_CLIENT_ENGINES","indexOf","logger","log","INFO","INVALID_CLIENT_ENGINE","NODE_CLIENT_ENGINE","clientVersion","NODE_CLIENT_VERSION","errorHandler","eventDispatcher","__isOptimizelyConfigValid","isValidInstance","ProjectConfigManager","datafile","datafileOptions","jsonSchemaValidator","sdkKey","skipJSONValidation","__disposeOnUpdate","onUpdate","configObj","UPDATED_OPTIMIZELY_CONFIG","revision","projectId","sendNotifications","OPTIMIZELY_CONFIG_UPDATE","bind","__readyPromise","onReady","userProfileService","validate","VALID_USER_PROFILE_SERVICE","ex","WARNING","message","createDecisionService","UNSTABLE_conditionEvaluators","createNotificationCenter","LogTierV1EventProcessor","dispatcher","flushInterval","eventFlushInterval","maxQueueSize","eventBatchSize","start","__readyTimeouts","__nextReadyTimeoutId","prototype","__isValidInstance","getConfig","activate","experimentKey","userId","attributes","ERROR","INVALID_OBJECT","__validateInputs","experiment_key","user_id","__notActivatingExperiment","variationKey","getVariation","isRunning","shouldNotDispatchActivateLogMessage","SHOULD_NOT_DISPATCH_ACTIVATE","DEBUG","_sendImpressionEvent","failedActivationLogMessage","NOT_ACTIVATING_USER","handleError","e","impressionEvent","buildImpressionEvent","userAttributes","process","__emitNotificationCenterActivate","variationId","getVariationIdFromExperimentAndVariationKey","experimentId","getExperimentId","impressionEventOptions","getImpressionEvent","experiment","experimentKeyMap","variation","variationKeyMap","ACTIVATE","logEvent","track","eventKey","eventTags","event_key","eventWithKeyExists","Error","INVALID_EVENT_KEY","__filterEmptyValues","conversionEvent","buildConversionEvent","TRACK_EVENT","__emitNotificationCenterTrack","failedTrackLogMessage","NOT_TRACKING_USER","conversionEventOptions","getConversionEvent","TRACK","isEmpty","INVALID_EXPERIMENT_KEY","decisionNotificationType","isFeatureExperiment","id","FEATURE_TEST","AB_TEST","DECISION","type","decisionInfo","setForcedVariation","getForcedVariation","stringInputs","hasOwnProperty","INVALID_INPUT_FORMAT","inputKeys","Object","keys","index","length","key","map","undefined","isFeatureEnabled","featureKey","feature_key","feature","getFeatureFromKey","featureEnabled","decision","getVariationForFeature","sourceInfo","decisionSource","FEATURE_ENABLED_FOR_USER","FEATURE_NOT_ENABLED_FOR_USER","featureInfo","source","FEATURE","getEnabledFeatures","enabledFeatures","forOwn","featureKeyMap","push","getFeatureVariable","variableKey","_getFeatureVariableForType","variableType","apiName","charAt","toUpperCase","slice","variable_key","featureFlag","variable","getVariableForFeature","VARIABLE_REQUESTED_WITH_WRONG_TYPE","variableValue","defaultValue","value","getVariableValueForVariation","USER_RECEIVED_VARIABLE_VALUE","FEATURE_NOT_ENABLED_RETURN_DEFAULT_VARIABLE_VALUE","VARIABLE_NOT_USED_RETURN_DEFAULT_VARIABLE_VALUE","USER_RECEIVED_DEFAULT_VARIABLE_VALUE","typeCastedValue","getTypeCastValue","FEATURE_VARIABLE","getFeatureVariableBoolean","BOOLEAN","getFeatureVariableDouble","DOUBLE","getFeatureVariableInteger","INTEGER","getFeatureVariableString","STRING","getOptimizelyConfig","close","eventProcessorStoppedPromise","stop","forEach","readyTimeoutId","readyTimeoutRecord","clearTimeout","readyTimeout","onClose","then","success","err","reason","String","Promise","resolve","options","timeout","isFinite","resolveTimeoutPromise","timeoutPromise","timeoutId","onReadyTimeout","setTimeout","race","module","exports"],"mappings":"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","sourcesContent":["/****************************************************************************\n * Copyright 2016-2019, Optimizely, Inc. and contributors                   *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\n\nvar fns = require('../utils/fns');\nvar attributesValidator = require('../utils/attributes_validator');\nvar decisionService = require('../core/decision_service');\nvar enums = require('../utils/enums');\nvar eventBuilder = require('../core/event_builder/index.js');\nvar eventHelpers = require('../core/event_builder/event_helpers');\nvar eventProcessor = require('@optimizely/js-sdk-event-processor');\nvar eventTagsValidator = require('../utils/event_tags_validator');\nvar notificationCenter = require('../core/notification_center');\nvar projectConfig = require('../core/project_config');\nvar sprintf = require('@optimizely/js-sdk-utils').sprintf;\nvar userProfileServiceValidator = require('../utils/user_profile_service_validator');\nvar stringValidator = require('../utils/string_value_validator');\nvar projectConfigManager = require('../core/project_config/project_config_manager');\n\nvar ERROR_MESSAGES = enums.ERROR_MESSAGES;\nvar LOG_LEVEL = enums.LOG_LEVEL;\nvar LOG_MESSAGES = enums.LOG_MESSAGES;\nvar MODULE_NAME = 'OPTIMIZELY';\nvar DECISION_SOURCES = enums.DECISION_SOURCES;\nvar FEATURE_VARIABLE_TYPES = enums.FEATURE_VARIABLE_TYPES;\nvar DECISION_NOTIFICATION_TYPES = enums.DECISION_NOTIFICATION_TYPES;\nvar NOTIFICATION_TYPES = enums.NOTIFICATION_TYPES;\n\nvar DEFAULT_ONREADY_TIMEOUT = 30000;\n\n/**\n * The Optimizely class\n * @param {Object} config\n * @param {string} config.clientEngine\n * @param {string} config.clientVersion\n * @param {Object} config.datafile\n * @param {Object} config.errorHandler\n * @param {Object} config.eventDispatcher\n * @param {Object} config.logger\n * @param {Object} config.skipJSONValidation\n * @param {Object} config.userProfileService\n * @param {Object} config.eventBatchSize\n * @param {Object} config.eventFlushInterval\n */\nfunction Optimizely(config) {\n  var clientEngine = config.clientEngine;\n  if (enums.VALID_CLIENT_ENGINES.indexOf(clientEngine) === -1) {\n    config.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.INVALID_CLIENT_ENGINE, MODULE_NAME, clientEngine));\n    clientEngine = enums.NODE_CLIENT_ENGINE;\n  }\n\n  this.clientEngine = clientEngine;\n  this.clientVersion = config.clientVersion || enums.NODE_CLIENT_VERSION;\n  this.errorHandler = config.errorHandler;\n  this.eventDispatcher = config.eventDispatcher;\n  this.__isOptimizelyConfigValid = config.isValidInstance;\n  this.logger = config.logger;\n\n  this.projectConfigManager = new projectConfigManager.ProjectConfigManager({\n    datafile: config.datafile,\n    datafileOptions: config.datafileOptions,\n    jsonSchemaValidator: config.jsonSchemaValidator,\n    sdkKey: config.sdkKey,\n    skipJSONValidation: config.skipJSONValidation,\n  });\n\n  this.__disposeOnUpdate = this.projectConfigManager.onUpdate(function(configObj) {\n    this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.UPDATED_OPTIMIZELY_CONFIG, MODULE_NAME, configObj.revision, configObj.projectId));\n    this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.OPTIMIZELY_CONFIG_UPDATE);\n  }.bind(this));\n\n  this.__readyPromise = this.projectConfigManager.onReady();\n\n  var userProfileService = null;\n  if (config.userProfileService) {\n    try {\n      if (userProfileServiceValidator.validate(config.userProfileService)) {\n        userProfileService = config.userProfileService;\n        this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.VALID_USER_PROFILE_SERVICE, MODULE_NAME));\n      }\n    } catch (ex) {\n      this.logger.log(LOG_LEVEL.WARNING, ex.message);\n    }\n  }\n\n  this.decisionService = decisionService.createDecisionService({\n    userProfileService: userProfileService,\n    logger: this.logger,\n    UNSTABLE_conditionEvaluators: config.UNSTABLE_conditionEvaluators\n  });\n\n  this.notificationCenter = notificationCenter.createNotificationCenter({\n    logger: this.logger,\n    errorHandler: this.errorHandler,\n  });\n\n  this.eventProcessor = new eventProcessor.LogTierV1EventProcessor({\n    dispatcher: this.eventDispatcher,\n    flushInterval: config.eventFlushInterval,\n    maxQueueSize: config.eventBatchSize,\n    notificationCenter: this.notificationCenter,\n  });\n  this.eventProcessor.start();\n\n  this.__readyTimeouts = {};\n  this.__nextReadyTimeoutId = 0;\n}\n\n/**\n * Returns a truthy value if this instance currently has a valid project config\n * object, and the initial configuration object that was passed into the\n * constructor was also valid.\n * @return {*}\n */\nOptimizely.prototype.__isValidInstance = function() {\n  return this.__isOptimizelyConfigValid && this.projectConfigManager.getConfig();\n};\n\n/**\n * Buckets visitor and sends impression event to Optimizely.\n * @param  {string}      experimentKey\n * @param  {string}      userId\n * @param  {Object}      attributes\n * @return {string|null} variation key\n */\nOptimizely.prototype.activate = function(experimentKey, userId, attributes) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'activate'));\n      return null;\n    }\n\n    if (!this.__validateInputs({ experiment_key: experimentKey, user_id: userId }, attributes)) {\n      return this.__notActivatingExperiment(experimentKey, userId);\n    }\n\n    var configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return null;\n    }\n\n    try {\n      var variationKey = this.getVariation(experimentKey, userId, attributes);\n      if (variationKey === null) {\n        return this.__notActivatingExperiment(experimentKey, userId);\n      }\n\n      // If experiment is not set to 'Running' status, log accordingly and return variation key\n      if (!projectConfig.isRunning(configObj, experimentKey)) {\n        var shouldNotDispatchActivateLogMessage = sprintf(\n          LOG_MESSAGES.SHOULD_NOT_DISPATCH_ACTIVATE,\n          MODULE_NAME,\n          experimentKey\n        );\n        this.logger.log(LOG_LEVEL.DEBUG, shouldNotDispatchActivateLogMessage);\n        return variationKey;\n      }\n\n      this._sendImpressionEvent(experimentKey, variationKey, userId, attributes);\n\n      return variationKey;\n    } catch (ex) {\n      this.logger.log(LOG_LEVEL.ERROR, ex.message);\n      var failedActivationLogMessage = sprintf(LOG_MESSAGES.NOT_ACTIVATING_USER, MODULE_NAME, userId, experimentKey);\n      this.logger.log(LOG_LEVEL.INFO, failedActivationLogMessage);\n      this.errorHandler.handleError(ex);\n      return null;\n    }\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Create an impression event and call the event dispatcher's dispatch method to\n * send this event to Optimizely. Then use the notification center to trigger\n * any notification listeners for the ACTIVATE notification type.\n * @param {string} experimentKey  Key of experiment that was activated\n * @param {string} variationKey   Key of variation shown in experiment that was activated\n * @param {string} userId         ID of user to whom the variation was shown\n * @param {Object} attributes     Optional user attributes\n */\nOptimizely.prototype._sendImpressionEvent = function(experimentKey, variationKey, userId, attributes) {\n  var configObj = this.projectConfigManager.getConfig();\n  if (!configObj) {\n    return;\n  }\n\n  var impressionEvent = eventHelpers.buildImpressionEvent({\n    experimentKey: experimentKey,\n    variationKey: variationKey,\n    userId: userId,\n    userAttributes: attributes,\n    clientEngine: this.clientEngine,\n    clientVersion: this.clientVersion,\n    configObj: configObj,\n  });\n  // TODO is it okay to not pass a projectConfig as second argument\n  this.eventProcessor.process(impressionEvent);\n  this.__emitNotificationCenterActivate(experimentKey, variationKey, userId, attributes);\n};\n\n/**\n * Emit the ACTIVATE notification on the notificationCenter\n * @param {string} experimentKey  Key of experiment that was activated\n * @param {string} variationKey   Key of variation shown in experiment that was activated\n * @param {string} userId         ID of user to whom the variation was shown\n * @param {Object} attributes     Optional user attributes\n */\nOptimizely.prototype.__emitNotificationCenterActivate = function(experimentKey, variationKey, userId, attributes) {\n  var configObj = this.projectConfigManager.getConfig();\n  if (!configObj) {\n    return;\n  }\n\n  var variationId = projectConfig.getVariationIdFromExperimentAndVariationKey(\n    configObj,\n    experimentKey,\n    variationKey\n  );\n  var experimentId = projectConfig.getExperimentId(configObj, experimentKey);\n  var impressionEventOptions = {\n    attributes: attributes,\n    clientEngine: this.clientEngine,\n    clientVersion: this.clientVersion,\n    configObj: configObj,\n    experimentId: experimentId,\n    userId: userId,\n    variationId: variationId,\n    logger: this.logger,\n  };\n  var impressionEvent = eventBuilder.getImpressionEvent(impressionEventOptions);\n  var experiment = configObj.experimentKeyMap[experimentKey];\n  var variation;\n  if (experiment && experiment.variationKeyMap) {\n    variation = experiment.variationKeyMap[variationKey];\n  }\n  this.notificationCenter.sendNotifications(\n    NOTIFICATION_TYPES.ACTIVATE,\n    {\n      experiment: experiment,\n      userId: userId,\n      attributes: attributes,\n      variation: variation,\n      logEvent: impressionEvent\n    }\n  );\n};\n\n/**\n * Sends conversion event to Optimizely.\n * @param  {string} eventKey\n * @param  {string} userId\n * @param  {string} attributes\n * @param  {Object} eventTags Values associated with the event.\n */\nOptimizely.prototype.track = function(eventKey, userId, attributes, eventTags) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'track'));\n      return;\n    }\n\n    if (!this.__validateInputs({ user_id: userId, event_key: eventKey }, attributes, eventTags)) {\n      return;\n    }\n\n    var configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return;\n    }\n\n    if (!projectConfig.eventWithKeyExists(configObj, eventKey)) {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_EVENT_KEY, MODULE_NAME, eventKey));\n    }\n\n    // remove null values from eventTags\n    eventTags = this.__filterEmptyValues(eventTags);\n    var conversionEvent = eventHelpers.buildConversionEvent({\n      eventKey: eventKey,\n      eventTags: eventTags,\n      userId: userId,\n      userAttributes: attributes,\n      clientEngine: this.clientEngine,\n      clientVersion: this.clientVersion,\n      configObj: configObj,\n    });\n    this.logger.log(LOG_LEVEL.INFO, sprintf(enums.LOG_MESSAGES.TRACK_EVENT, MODULE_NAME, eventKey, userId));\n    // TODO is it okay to not pass a projectConfig as second argument\n    this.eventProcessor.process(conversionEvent);\n    this.__emitNotificationCenterTrack(eventKey, userId, attributes, eventTags);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    var failedTrackLogMessage = sprintf(LOG_MESSAGES.NOT_TRACKING_USER, MODULE_NAME, userId);\n    this.logger.log(LOG_LEVEL.INFO, failedTrackLogMessage);\n  }\n};\n\n/**\n * Send TRACK event to notificationCenter\n * @param  {string} eventKey\n * @param  {string} userId\n * @param  {string} attributes\n * @param  {Object} eventTags Values associated with the event.\n */\nOptimizely.prototype.__emitNotificationCenterTrack = function(eventKey, userId, attributes, eventTags) {\n  try {\n    var configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return;\n    }\n\n    var conversionEventOptions = {\n      attributes: attributes,\n      clientEngine: this.clientEngine,\n      clientVersion: this.clientVersion,\n      configObj: configObj,\n      eventKey: eventKey,\n      eventTags: eventTags,\n      logger: this.logger,\n      userId: userId,\n    };\n    var conversionEvent = eventBuilder.getConversionEvent(conversionEventOptions);\n\n    this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.TRACK, {\n      eventKey: eventKey,\n      userId: userId,\n      attributes: attributes,\n      eventTags: eventTags,\n      logEvent: conversionEvent,\n    });\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    this.errorHandler.handleError(ex);\n  }\n};\n\n/**\n * Gets variation where visitor will be bucketed.\n * @param  {string}      experimentKey\n * @param  {string}      userId\n * @param  {Object}      attributes\n * @return {string|null} variation key\n */\nOptimizely.prototype.getVariation = function(experimentKey, userId, attributes) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getVariation'));\n      return null;\n    }\n\n    try {\n      if (!this.__validateInputs({ experiment_key: experimentKey, user_id: userId }, attributes)) {\n        return null;\n      }\n\n      var configObj = this.projectConfigManager.getConfig();\n      if (!configObj) {\n        return null;\n      }\n\n      var experiment = configObj.experimentKeyMap[experimentKey];\n      if (fns.isEmpty(experiment)) {\n        this.logger.log(LOG_LEVEL.DEBUG, sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME, experimentKey));\n        return null;\n      }\n\n      var variationKey = this.decisionService.getVariation(configObj, experimentKey, userId, attributes);\n      var decisionNotificationType = projectConfig.isFeatureExperiment(configObj, experiment.id) ? DECISION_NOTIFICATION_TYPES.FEATURE_TEST :\n        DECISION_NOTIFICATION_TYPES.AB_TEST;\n\n      this.notificationCenter.sendNotifications(\n        NOTIFICATION_TYPES.DECISION,\n        {\n          type: decisionNotificationType,\n          userId: userId,\n          attributes: attributes || {},\n          decisionInfo: {\n            experimentKey: experimentKey,\n            variationKey: variationKey,\n          }\n        }\n      );\n\n      return variationKey;\n    } catch (ex) {\n      this.logger.log(LOG_LEVEL.ERROR, ex.message);\n      this.errorHandler.handleError(ex);\n      return null;\n    }\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Force a user into a variation for a given experiment.\n * @param {string} experimentKey\n * @param {string} userId\n * @param {string|null} variationKey user will be forced into. If null, then clear the existing experiment-to-variation mapping.\n * @return boolean A boolean value that indicates if the set completed successfully.\n */\nOptimizely.prototype.setForcedVariation = function(experimentKey, userId, variationKey) {\n  if (!this.__validateInputs({ experiment_key: experimentKey, user_id: userId })) {\n    return false;\n  }\n\n  var configObj = this.projectConfigManager.getConfig();\n  if (!configObj) {\n    return false;\n  }\n\n  try {\n    return this.decisionService.setForcedVariation(configObj, experimentKey, userId, variationKey);\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    this.errorHandler.handleError(ex);\n    return false;\n  }\n};\n\n/**\n * Gets the forced variation for a given user and experiment.\n * @param  {string} experimentKey\n * @param  {string} userId\n * @return {string|null} The forced variation key.\n */\nOptimizely.prototype.getForcedVariation = function(experimentKey, userId) {\n  if (!this.__validateInputs({ experiment_key: experimentKey, user_id: userId })) {\n    return null;\n  }\n\n  var configObj = this.projectConfigManager.getConfig();\n  if (!configObj) {\n    return null;\n  }\n\n  try {\n    return this.decisionService.getForcedVariation(configObj, experimentKey, userId);\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    this.errorHandler.handleError(ex);\n    return null;\n  }\n};\n\n/**\n * Validate string inputs, user attributes and event tags.\n * @param  {string}  stringInputs   Map of string keys and associated values\n * @param  {Object}  userAttributes Optional parameter for user's attributes\n * @param  {Object}  eventTags      Optional parameter for event tags\n * @return {boolean} True if inputs are valid\n *\n */\nOptimizely.prototype.__validateInputs = function(stringInputs, userAttributes, eventTags) {\n  try {\n    // Null, undefined or non-string user Id is invalid.\n    if (stringInputs.hasOwnProperty('user_id')) {\n      var userId = stringInputs.user_id;\n      if (typeof userId !== 'string' || userId === null || userId === 'undefined') {\n        throw new Error(sprintf(ERROR_MESSAGES.INVALID_INPUT_FORMAT, MODULE_NAME, 'user_id'));\n      }\n\n      delete stringInputs.user_id;\n    }\n\n    var inputKeys = Object.keys(stringInputs);\n    for (var index = 0; index < inputKeys.length; index++) {\n      var key = inputKeys[index];\n      if (!stringValidator.validate(stringInputs[key])) {\n        throw new Error(sprintf(ERROR_MESSAGES.INVALID_INPUT_FORMAT, MODULE_NAME, key));\n      }\n    }\n    if (userAttributes) {\n      attributesValidator.validate(userAttributes);\n    }\n    if (eventTags) {\n      eventTagsValidator.validate(eventTags);\n    }\n    return true;\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    this.errorHandler.handleError(ex);\n    return false;\n  }\n};\n\n/**\n * Shows failed activation log message and returns null when user is not activated in experiment\n * @param  experimentKey\n * @param  userId\n * @return {null}\n */\nOptimizely.prototype.__notActivatingExperiment = function(experimentKey, userId) {\n  var failedActivationLogMessage = sprintf(LOG_MESSAGES.NOT_ACTIVATING_USER, MODULE_NAME, userId, experimentKey);\n  this.logger.log(LOG_LEVEL.INFO, failedActivationLogMessage);\n  return null;\n};\n\n/**\n * Filters out attributes/eventTags with null or undefined values\n * @param  map\n * @returns {Object} map\n */\nOptimizely.prototype.__filterEmptyValues = function(map) {\n  for (var key in map) {\n    if (map.hasOwnProperty(key) && (map[key] === null || map[key] === undefined)) {\n      delete map[key];\n    }\n  }\n  return map;\n};\n\n/**\n * Returns true if the feature is enabled for the given user.\n * @param {string} featureKey   Key of feature which will be checked\n * @param {string} userId       ID of user which will be checked\n * @param {Object} attributes   Optional user attributes\n * @return {boolean}            True if the feature is enabled for the user, false otherwise\n */\nOptimizely.prototype.isFeatureEnabled = function(featureKey, userId, attributes) {\n  try {\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'isFeatureEnabled'));\n      return false;\n    }\n\n    if (!this.__validateInputs({ feature_key: featureKey, user_id: userId }, attributes)) {\n      return false;\n    }\n\n    var configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return false;\n    }\n\n    var feature = projectConfig.getFeatureFromKey(configObj, featureKey, this.logger);\n    if (!feature) {\n      return false;\n    }\n\n    var featureEnabled = false;\n    var decision = this.decisionService.getVariationForFeature(configObj, feature, userId, attributes);\n    var variation = decision.variation;\n    var sourceInfo = {};\n\n    if (variation) {\n      featureEnabled = variation.featureEnabled;\n      if (decision.decisionSource === DECISION_SOURCES.FEATURE_TEST) {\n        sourceInfo = {\n          experimentKey: decision.experiment.key,\n          variationKey: decision.variation.key,\n        }\n        // got a variation from the exp, so we track the impression\n        this._sendImpressionEvent(decision.experiment.key, decision.variation.key, userId, attributes);\n      }\n    }\n\n    if (featureEnabled === true) {\n      this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.FEATURE_ENABLED_FOR_USER, MODULE_NAME, featureKey, userId));\n    } else {\n      this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.FEATURE_NOT_ENABLED_FOR_USER, MODULE_NAME, featureKey, userId));\n      featureEnabled = false;\n    }\n\n    var featureInfo = {\n      featureKey: featureKey,\n      featureEnabled: featureEnabled,\n      source: decision.decisionSource,\n      sourceInfo: sourceInfo\n    };\n\n    this.notificationCenter.sendNotifications(\n      NOTIFICATION_TYPES.DECISION,\n      {\n        type: DECISION_NOTIFICATION_TYPES.FEATURE,\n        userId: userId,\n        attributes: attributes || {},\n        decisionInfo: featureInfo,\n      }\n    );\n\n    return featureEnabled;\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return false;\n  }\n};\n\n/**\n * Returns an Array containing the keys of all features in the project that are\n * enabled for the given user.\n * @param {string} userId\n * @param {Object} attributes\n * @return {Array} Array of feature keys (strings)\n */\nOptimizely.prototype.getEnabledFeatures = function(userId, attributes) {\n  try {\n    var enabledFeatures = [];\n    if (!this.__isValidInstance()) {\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, 'getEnabledFeatures'));\n      return enabledFeatures;\n    }\n\n    if (!this.__validateInputs({ user_id: userId })) {\n      return enabledFeatures;\n    }\n\n    var configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return enabledFeatures;\n    }\n\n    fns.forOwn(\n      configObj.featureKeyMap,\n      function(feature) {\n        if (this.isFeatureEnabled(feature.key, userId, attributes)) {\n          enabledFeatures.push(feature.key);\n        }\n      }.bind(this)\n    );\n\n    return enabledFeatures;\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return [];\n  }\n};\n\n/**\n * Returns dynamically-typed value of the variable attached to the given\n * feature flag. Returns null if the feature key or variable key is invalid.\n *\n * @param {string} featureKey           Key of the feature whose variable's\n *                                      value is being accessed\n * @param {string} variableKey          Key of the variable whose value is\n *                                      being accessed\n * @param {string} userId               ID for the user\n * @param {Object} attributes           Optional user attributes\n * @return {string|boolean|number|null} Value of the variable cast to the appropriate\n *                                      type, or null if the feature key is invalid or\n *                                      the variable key is invalid\n */\n\nOptimizely.prototype.getFeatureVariable = function(featureKey, variableKey, userId, attributes) {\n  try {\n    return this._getFeatureVariableForType(featureKey, variableKey, null, userId, attributes);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Helper method to get the value for a variable of a certain type attached to a\n * feature flag. Returns null if the feature key is invalid, the variable key is\n * invalid, the given variable type does not match the variable's actual type,\n * or the variable value cannot be cast to the required type. If the given variable\n * type is null, the value of the variable cast to the appropriate type is returned.\n *\n * @param {string} featureKey           Key of the feature whose variable's value is\n *                                      being accessed\n * @param {string} variableKey          Key of the variable whose value is being\n *                                      accessed\n * @param {string|null} variableType    Type of the variable whose value is being\n *                                      accessed (must be one of FEATURE_VARIABLE_TYPES\n *                                      in lib/utils/enums/index.js), or null to return the\n *                                      value of the variable cast to the appropriate type\n * @param {string} userId               ID for the user\n * @param {Object} attributes           Optional user attributes\n * @return {string|boolean|number|null} Value of the variable cast to the appropriate\n *                                      type, or null if the feature key is invalid, the\n *                                      variable key is invalid, or there is a mismatch\n *                                      with the type of the variable\n */\nOptimizely.prototype._getFeatureVariableForType = function(featureKey, variableKey, variableType, userId, attributes) {\n  if (!this.__isValidInstance()) {\n    var apiName = (variableType) ? 'getFeatureVariable' + variableType.charAt(0).toUpperCase() + variableType.slice(1) : 'getFeatureVariable';\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME, apiName));\n    return null;\n  }\n\n  if (!this.__validateInputs({ feature_key: featureKey, variable_key: variableKey, user_id: userId }, attributes)) {\n    return null;\n  }\n\n  var configObj = this.projectConfigManager.getConfig();\n  if (!configObj) {\n    return null;\n  }\n\n  var featureFlag = projectConfig.getFeatureFromKey(configObj, featureKey, this.logger);\n  if (!featureFlag) {\n    return null;\n  }\n\n  var variable = projectConfig.getVariableForFeature(configObj, featureKey, variableKey, this.logger);\n  if (!variable) {\n    return null;\n  }\n\n  if (!variableType) {\n    variableType = variable.type;\n  } else if (variable.type !== variableType) {\n    this.logger.log(\n      LOG_LEVEL.WARNING,\n      sprintf(LOG_MESSAGES.VARIABLE_REQUESTED_WITH_WRONG_TYPE, MODULE_NAME, variableType, variable.type)\n    );\n    return null;\n  }\n\n  var featureEnabled = false;\n  var variableValue = variable.defaultValue;\n  var decision = this.decisionService.getVariationForFeature(configObj, featureFlag, userId, attributes);\n\n  if (decision.variation !== null) {\n    featureEnabled = decision.variation.featureEnabled;\n    var value = projectConfig.getVariableValueForVariation(configObj, variable, decision.variation, this.logger);\n    if (value !== null) {\n      if (featureEnabled === true) {\n        variableValue = value;\n        this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.USER_RECEIVED_VARIABLE_VALUE, MODULE_NAME, variableKey, featureFlag.key, variableValue, userId));\n      } else {\n        this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.FEATURE_NOT_ENABLED_RETURN_DEFAULT_VARIABLE_VALUE, MODULE_NAME,\n          featureFlag.key, userId, variableKey));\n      }\n    } else {\n      this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.VARIABLE_NOT_USED_RETURN_DEFAULT_VARIABLE_VALUE, MODULE_NAME, variableKey, decision.variation.key));\n    }\n  } else {\n    this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.USER_RECEIVED_DEFAULT_VARIABLE_VALUE, MODULE_NAME, userId,\n      variableKey, featureFlag.key));\n  }\n\n  var sourceInfo = {};\n  if (decision.decisionSource === DECISION_SOURCES.FEATURE_TEST) {\n    sourceInfo = {\n      experimentKey: decision.experiment.key,\n      variationKey: decision.variation.key,\n    }\n  }\n\n  var typeCastedValue = projectConfig.getTypeCastValue(variableValue, variableType, this.logger);\n  this.notificationCenter.sendNotifications(\n    NOTIFICATION_TYPES.DECISION,\n    {\n      type: DECISION_NOTIFICATION_TYPES.FEATURE_VARIABLE,\n      userId: userId,\n      attributes: attributes || {},\n      decisionInfo: {\n        featureKey: featureKey,\n        featureEnabled: featureEnabled,\n        source: decision.decisionSource,\n        variableKey: variableKey,\n        variableValue: typeCastedValue,\n        variableType: variableType,\n        sourceInfo: sourceInfo,\n      }\n    }\n  );\n  return typeCastedValue;\n};\n\n/**\n * Returns value for the given boolean variable attached to the given feature\n * flag.\n * @param {string} featureKey   Key of the feature whose variable's value is\n *                              being accessed\n * @param {string} variableKey  Key of the variable whose value is being\n *                              accessed\n * @param {string} userId       ID for the user\n * @param {Object} attributes   Optional user attributes\n * @return {boolean|null}       Boolean value of the variable, or null if the\n *                              feature key is invalid, the variable key is\n *                              invalid, or there is a mismatch with the type\n *                              of the variable\n */\nOptimizely.prototype.getFeatureVariableBoolean = function(featureKey, variableKey, userId, attributes) {\n  try {\n    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.BOOLEAN, userId, attributes);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Returns value for the given double variable attached to the given feature\n * flag.\n * @param {string} featureKey   Key of the feature whose variable's value is\n *                              being accessed\n * @param {string} variableKey  Key of the variable whose value is being\n *                              accessed\n * @param {string} userId       ID for the user\n * @param {Object} attributes   Optional user attributes\n * @return {number|null}        Number value of the variable, or null if the\n *                              feature key is invalid, the variable key is\n *                              invalid, or there is a mismatch with the type\n *                              of the variable\n */\nOptimizely.prototype.getFeatureVariableDouble = function(featureKey, variableKey, userId, attributes) {\n  try {\n    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.DOUBLE, userId, attributes);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Returns value for the given integer variable attached to the given feature\n * flag.\n * @param {string} featureKey   Key of the feature whose variable's value is\n *                              being accessed\n * @param {string} variableKey  Key of the variable whose value is being\n *                              accessed\n * @param {string} userId       ID for the user\n * @param {Object} attributes   Optional user attributes\n * @return {number|null}        Number value of the variable, or null if the\n *                              feature key is invalid, the variable key is\n *                              invalid, or there is a mismatch with the type\n *                              of the variable\n */\nOptimizely.prototype.getFeatureVariableInteger = function(featureKey, variableKey, userId, attributes) {\n  try {\n    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.INTEGER, userId, attributes);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Returns value for the given string variable attached to the given feature\n * flag.\n * @param {string} featureKey   Key of the feature whose variable's value is\n *                              being accessed\n * @param {string} variableKey  Key of the variable whose value is being\n *                              accessed\n * @param {string} userId       ID for the user\n * @param {Object} attributes   Optional user attributes\n * @return {string|null}        String value of the variable, or null if the\n *                              feature key is invalid, the variable key is\n *                              invalid, or there is a mismatch with the type\n *                              of the variable\n */\nOptimizely.prototype.getFeatureVariableString = function(featureKey, variableKey, userId, attributes) {\n  try {\n    return this._getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.STRING, userId, attributes);\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n};\n\n/**\n * Returns OptimizelyConfig object containing experiments and features data\n * @return {Object}\n *\n * OptimizelyConfig Object Schema\n * {\n *   'experimentsMap': {\n *     'my-fist-experiment': {\n *       'id': '111111',\n *       'key': 'my-fist-experiment'\n *       'variationsMap': {\n *         'variation_1': {\n *           'id': '121212',\n *           'key': 'variation_1',\n *           'variablesMap': {\n *             'age': {\n *               'id': '222222',\n *               'key': 'age',\n *               'type': 'integer',\n *               'value': '0',\n *             }\n *           }\n *         }\n *       }\n *     }\n *   },\n *   'featuresMap': {\n *     'awesome-feature': {\n *       'id': '333333',\n *       'key': 'awesome-feature',\n *       'experimentsMap': Object,\n *       'variationsMap': Object,\n *     }\n *   }\n * }\n */\nOptimizely.prototype.getOptimizelyConfig = function() {\n  try {\n    var configObj = this.projectConfigManager.getConfig();\n    if (!configObj) {\n      return null;\n    }\n    return this.projectConfigManager.getOptimizelyConfig();\n  } catch (e) {\n    this.logger.log(LOG_LEVEL.ERROR, e.message);\n    this.errorHandler.handleError(e);\n    return null;\n  }\n}\n\n/**\n * Stop background processes belonging to this instance, including:\n *\n * - Active datafile requests\n * - Pending datafile requests\n * - Pending event queue flushes\n *\n * In-flight datafile requests will be aborted. Any events waiting to be sent\n * as part of a batched event request will be immediately batched and sent to\n * the event dispatcher.\n *\n * If any such requests were sent to the event dispatcher, returns a Promise\n * that fulfills after the event dispatcher calls the response callback for each\n * request. Otherwise, returns an immediately-fulfilled Promise.\n *\n * Returned Promises are fulfilled with result objects containing these\n * properties:\n *    - success (boolean): true if all events in the queue at the time close was\n *                         called were combined into requests, sent to the\n *                         event dispatcher, and the event dispatcher called the\n *                         callbacks for each request. false if an unexpected\n *                         error was encountered during the close process.\n *    - reason (string=):  If success is false, this is a string property with\n *                         an explanatory message.\n *\n * NOTE: After close is called, this instance is no longer usable - any events\n * generated will no longer be sent to the event dispatcher.\n *\n * @return {Promise}\n */\nOptimizely.prototype.close = function() {\n  try {\n    var eventProcessorStoppedPromise = this.eventProcessor.stop();\n    if (this.__disposeOnUpdate) {\n      this.__disposeOnUpdate();\n      this.__disposeOnUpdate = null;\n    }\n    if (this.projectConfigManager) {\n      this.projectConfigManager.stop();\n    }\n    Object.keys(this.__readyTimeouts).forEach(function(readyTimeoutId) {\n      var readyTimeoutRecord = this.__readyTimeouts[readyTimeoutId];\n      clearTimeout(readyTimeoutRecord.readyTimeout);\n      readyTimeoutRecord.onClose();\n    }.bind(this));\n    this.__readyTimeouts = {};\n    return eventProcessorStoppedPromise.then(\n      function() {\n        return {\n          success: true,\n        };\n      },\n      function(err) {\n        return {\n          success: false,\n          reason: String(err),\n        };\n      }\n    );\n  } catch (err) {\n    this.logger.log(LOG_LEVEL.ERROR, err.message);\n    this.errorHandler.handleError(err);\n    return Promise.resolve({\n      success: false,\n      reason: String(err),\n    });\n  }\n};\n\n/**\n * Returns a Promise that fulfills when this instance is ready to use (meaning\n * it has a valid datafile), or has failed to become ready within a period of\n * time (configurable by the timeout property of the options argument), or when\n * this instance is closed via the close method.\n *\n * If a valid datafile was provided in the constructor, the returned Promise is\n * immediately fulfilled. If an sdkKey was provided, a manager will be used to\n * fetch  a datafile, and the returned promise will fulfill if that fetch\n * succeeds or fails before the timeout. The default timeout is 30 seconds,\n * which will be used if no timeout is provided in the argument options object.\n *\n * The returned Promise is fulfilled with a result object containing these\n * properties:\n *    - success (boolean): True if this instance is ready to use with a valid\n *                         datafile, or false if this instance failed to become\n *                         ready or was closed prior to becoming ready.\n *    - reason (string=):  If success is false, this is a string property with\n *                         an explanatory message. Failure could be due to\n *                         expiration of the timeout, network errors,\n *                         unsuccessful responses, datafile parse errors,\n *                         datafile validation errors, or the instance being\n *                         closed\n * @param  {Object=}          options\n * @param  {number|undefined} options.timeout\n * @return {Promise}\n */\nOptimizely.prototype.onReady = function(options) {\n  var timeout;\n  if (typeof options === 'object' && options !== null) {\n    timeout = options.timeout;\n  }\n  if (!fns.isFinite(timeout)) {\n    timeout = DEFAULT_ONREADY_TIMEOUT;\n  }\n\n  var resolveTimeoutPromise;\n  var timeoutPromise = new Promise(function(resolve) {\n    resolveTimeoutPromise = resolve;\n  });\n\n  var timeoutId = this.__nextReadyTimeoutId;\n  this.__nextReadyTimeoutId++;\n\n  var onReadyTimeout = function() {\n    delete this.__readyTimeouts[timeoutId];\n    resolveTimeoutPromise({\n      success: false,\n      reason: sprintf('onReady timeout expired after %s ms', timeout),\n    });\n  }.bind(this);\n  var readyTimeout = setTimeout(onReadyTimeout, timeout);\n  var onClose = function() {\n    resolveTimeoutPromise({\n      success: false,\n      reason: 'Instance closed',\n    });\n  };\n\n  this.__readyTimeouts[timeoutId] = {\n    readyTimeout: readyTimeout,\n    onClose: onClose,\n  };\n\n  this.__readyPromise.then(function() {\n    clearTimeout(readyTimeout);\n    delete this.__readyTimeouts[timeoutId];\n    resolveTimeoutPromise({\n      success: true,\n    });\n  }.bind(this));\n\n  return Promise.race([this.__readyPromise, timeoutPromise]);\n};\n\nmodule.exports = Optimizely;\n"]},"metadata":{},"sourceType":"script"}