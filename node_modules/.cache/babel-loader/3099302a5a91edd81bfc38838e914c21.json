{"ast":null,"code":"/**\n * Copyright 2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar projectConfig = require('../project_config'); // Get Experiment Ids which are part of rollouts\n\n\nfunction getRolloutExperimentIds(rollouts) {\n  return (rollouts || []).reduce(function (experimentIds, rollout) {\n    rollout.experiments.forEach(function (e) {\n      experimentIds[e.id] = true;\n    });\n    return experimentIds;\n  }, {});\n} // Gets Map of all experiments except rollouts\n\n\nfunction getExperimentsMap(configObj) {\n  var rolloutExperimentIds = getRolloutExperimentIds(configObj.rollouts);\n  var featureVariablesMap = (configObj.featureFlags || []).reduce(function (resultMap, feature) {\n    resultMap[feature.id] = feature.variables;\n    return resultMap;\n  }, {});\n  return (configObj.experiments || []).reduce(function (experiments, experiment) {\n    // skip experiments that are part of a rollout\n    if (!rolloutExperimentIds[experiment.id]) {\n      experiments[experiment.key] = {\n        id: experiment.id,\n        key: experiment.key,\n        variationsMap: (experiment.variations || []).reduce(function (variations, variation) {\n          variations[variation.key] = {\n            id: variation.id,\n            key: variation.key,\n            variablesMap: getMergedVariablesMap(configObj, variation, experiment.id, featureVariablesMap)\n          };\n\n          if (projectConfig.isFeatureExperiment(configObj, experiment.id)) {\n            variations[variation.key].featureEnabled = variation.featureEnabled;\n          }\n\n          return variations;\n        }, {})\n      };\n    }\n\n    return experiments;\n  }, {});\n} // Merges feature key and type from feature variables to variation variables.\n\n\nfunction getMergedVariablesMap(configObj, variation, experimentId, featureVariablesMap) {\n  var featureId = configObj.experimentFeatureMap[experimentId];\n  var variablesObject = {};\n\n  if (featureId) {\n    var experimentFeatureVariables = featureVariablesMap[featureId]; // Temporary variation variables map to get values to merge.\n\n    var tempVariablesIdMap = (variation.variables || []).reduce(function (variablesMap, variable) {\n      variablesMap[variable.id] = {\n        id: variable.id,\n        value: variable.value\n      };\n      return variablesMap;\n    }, {});\n    variablesObject = (experimentFeatureVariables || []).reduce(function (variablesMap, featureVariable) {\n      var variationVariable = tempVariablesIdMap[featureVariable.id];\n      var variableValue = variation.featureEnabled && variationVariable ? variationVariable.value : featureVariable.defaultValue;\n      variablesMap[featureVariable.key] = {\n        id: featureVariable.id,\n        key: featureVariable.key,\n        type: featureVariable.type,\n        value: variableValue\n      };\n      return variablesMap;\n    }, {});\n  }\n\n  return variablesObject;\n} // Gets map of all experiments\n\n\nfunction getFeaturesMap(configObj, allExperiments) {\n  return (configObj.featureFlags || []).reduce(function (features, feature) {\n    features[feature.key] = {\n      id: feature.id,\n      key: feature.key,\n      experimentsMap: (feature.experimentIds || []).reduce(function (experiments, experimentId) {\n        var experimentKey = configObj.experimentIdMap[experimentId].key;\n        experiments[experimentKey] = allExperiments[experimentKey];\n        return experiments;\n      }, {}),\n      variablesMap: (feature.variables || []).reduce(function (variables, variable) {\n        variables[variable.key] = {\n          id: variable.id,\n          key: variable.key,\n          type: variable.type,\n          value: variable.defaultValue\n        };\n        return variables;\n      }, {})\n    };\n    return features;\n  }, {});\n}\n\nmodule.exports = {\n  getOptimizelyConfig: function (configObj) {\n    // Fetch all feature variables from feature flags to merge them with variation variables\n    var experimentsMap = getExperimentsMap(configObj);\n    return {\n      experimentsMap: experimentsMap,\n      featuresMap: getFeaturesMap(configObj, experimentsMap),\n      revision: configObj.revision\n    };\n  }\n};","map":{"version":3,"sources":["/home/abhishek/Music/contentstack-reactjs-ab-testing/node_modules/@optimizely/optimizely-sdk/lib/core/optimizely_config/index.js"],"names":["projectConfig","require","getRolloutExperimentIds","rollouts","reduce","experimentIds","rollout","experiments","forEach","e","id","getExperimentsMap","configObj","rolloutExperimentIds","featureVariablesMap","featureFlags","resultMap","feature","variables","experiment","key","variationsMap","variations","variation","variablesMap","getMergedVariablesMap","isFeatureExperiment","featureEnabled","experimentId","featureId","experimentFeatureMap","variablesObject","experimentFeatureVariables","tempVariablesIdMap","variable","value","featureVariable","variationVariable","variableValue","defaultValue","type","getFeaturesMap","allExperiments","features","experimentsMap","experimentKey","experimentIdMap","module","exports","getOptimizelyConfig","featuresMap","revision"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,IAAIA,aAAa,GAAGC,OAAO,CAAC,mBAAD,CAA3B,C,CAEA;;;AACA,SAASC,uBAAT,CAAiCC,QAAjC,EAA2C;AACzC,SAAO,CAACA,QAAQ,IAAI,EAAb,EAAiBC,MAAjB,CAAwB,UAASC,aAAT,EAAwBC,OAAxB,EAAiC;AAC9DA,IAAAA,OAAO,CAACC,WAAR,CAAoBC,OAApB,CAA4B,UAASC,CAAT,EAAY;AACtCJ,MAAAA,aAAa,CAACI,CAAC,CAACC,EAAH,CAAb,GAAsB,IAAtB;AACD,KAFD;AAGA,WAAOL,aAAP;AACD,GALM,EAKJ,EALI,CAAP;AAMD,C,CAED;;;AACA,SAASM,iBAAT,CAA2BC,SAA3B,EAAsC;AACpC,MAAIC,oBAAoB,GAAGX,uBAAuB,CAACU,SAAS,CAACT,QAAX,CAAlD;AACA,MAAIW,mBAAmB,GAAG,CAACF,SAAS,CAACG,YAAV,IAA0B,EAA3B,EAA+BX,MAA/B,CAAsC,UAASY,SAAT,EAAoBC,OAApB,EAA4B;AAC1FD,IAAAA,SAAS,CAACC,OAAO,CAACP,EAAT,CAAT,GAAwBO,OAAO,CAACC,SAAhC;AACA,WAAOF,SAAP;AACD,GAHyB,EAGvB,EAHuB,CAA1B;AAIA,SAAO,CAACJ,SAAS,CAACL,WAAV,IAAyB,EAA1B,EAA8BH,MAA9B,CAAqC,UAASG,WAAT,EAAsBY,UAAtB,EAAkC;AAC5E;AACA,QAAI,CAACN,oBAAoB,CAACM,UAAU,CAACT,EAAZ,CAAzB,EAA0C;AACxCH,MAAAA,WAAW,CAACY,UAAU,CAACC,GAAZ,CAAX,GAA8B;AAC5BV,QAAAA,EAAE,EAAES,UAAU,CAACT,EADa;AAE5BU,QAAAA,GAAG,EAAED,UAAU,CAACC,GAFY;AAG5BC,QAAAA,aAAa,EAAE,CAACF,UAAU,CAACG,UAAX,IAAyB,EAA1B,EAA8BlB,MAA9B,CAAqC,UAASkB,UAAT,EAAqBC,SAArB,EAAgC;AAClFD,UAAAA,UAAU,CAACC,SAAS,CAACH,GAAX,CAAV,GAA4B;AAC1BV,YAAAA,EAAE,EAAEa,SAAS,CAACb,EADY;AAE1BU,YAAAA,GAAG,EAAEG,SAAS,CAACH,GAFW;AAG1BI,YAAAA,YAAY,EAAEC,qBAAqB,CAACb,SAAD,EAAYW,SAAZ,EAAuBJ,UAAU,CAACT,EAAlC,EAAsCI,mBAAtC;AAHT,WAA5B;;AAKA,cAAId,aAAa,CAAC0B,mBAAd,CAAkCd,SAAlC,EAA6CO,UAAU,CAACT,EAAxD,CAAJ,EAAiE;AAC/DY,YAAAA,UAAU,CAACC,SAAS,CAACH,GAAX,CAAV,CAA0BO,cAA1B,GAA2CJ,SAAS,CAACI,cAArD;AACD;;AACD,iBAAOL,UAAP;AACD,SAVc,EAUZ,EAVY;AAHa,OAA9B;AAeD;;AACD,WAAOf,WAAP;AACD,GApBM,EAoBJ,EApBI,CAAP;AAqBD,C,CAED;;;AACA,SAASkB,qBAAT,CAA+Bb,SAA/B,EAA0CW,SAA1C,EAAqDK,YAArD,EAAmEd,mBAAnE,EAAwF;AACtF,MAAIe,SAAS,GAAGjB,SAAS,CAACkB,oBAAV,CAA+BF,YAA/B,CAAhB;AACA,MAAIG,eAAe,GAAG,EAAtB;;AACA,MAAIF,SAAJ,EAAe;AACb,QAAIG,0BAA0B,GAAGlB,mBAAmB,CAACe,SAAD,CAApD,CADa,CAEb;;AACA,QAAII,kBAAkB,GAAG,CAACV,SAAS,CAACL,SAAV,IAAuB,EAAxB,EAA4Bd,MAA5B,CAAmC,UAASoB,YAAT,EAAuBU,QAAvB,EAAiC;AAC3FV,MAAAA,YAAY,CAACU,QAAQ,CAACxB,EAAV,CAAZ,GAA4B;AAC1BA,QAAAA,EAAE,EAAEwB,QAAQ,CAACxB,EADa;AAE1ByB,QAAAA,KAAK,EAAED,QAAQ,CAACC;AAFU,OAA5B;AAIA,aAAOX,YAAP;AACD,KANwB,EAMtB,EANsB,CAAzB;AAOAO,IAAAA,eAAe,GAAG,CAACC,0BAA0B,IAAI,EAA/B,EAAmC5B,MAAnC,CAA0C,UAASoB,YAAT,EAAuBY,eAAvB,EAAwC;AAClG,UAAIC,iBAAiB,GAAGJ,kBAAkB,CAACG,eAAe,CAAC1B,EAAjB,CAA1C;AACA,UAAI4B,aAAa,GAAGf,SAAS,CAACI,cAAV,IAA4BU,iBAA5B,GAAgDA,iBAAiB,CAACF,KAAlE,GAA0EC,eAAe,CAACG,YAA9G;AACAf,MAAAA,YAAY,CAACY,eAAe,CAAChB,GAAjB,CAAZ,GAAoC;AAClCV,QAAAA,EAAE,EAAE0B,eAAe,CAAC1B,EADc;AAElCU,QAAAA,GAAG,EAAEgB,eAAe,CAAChB,GAFa;AAGlCoB,QAAAA,IAAI,EAAEJ,eAAe,CAACI,IAHY;AAIlCL,QAAAA,KAAK,EAAEG;AAJ2B,OAApC;AAMA,aAAOd,YAAP;AACD,KAViB,EAUf,EAVe,CAAlB;AAWD;;AACD,SAAOO,eAAP;AACD,C,CAED;;;AACA,SAASU,cAAT,CAAwB7B,SAAxB,EAAmC8B,cAAnC,EAAmD;AACjD,SAAO,CAAC9B,SAAS,CAACG,YAAV,IAA0B,EAA3B,EAA+BX,MAA/B,CAAsC,UAASuC,QAAT,EAAmB1B,OAAnB,EAA4B;AACvE0B,IAAAA,QAAQ,CAAC1B,OAAO,CAACG,GAAT,CAAR,GAAwB;AACtBV,MAAAA,EAAE,EAAEO,OAAO,CAACP,EADU;AAEtBU,MAAAA,GAAG,EAAEH,OAAO,CAACG,GAFS;AAGtBwB,MAAAA,cAAc,EAAE,CAAC3B,OAAO,CAACZ,aAAR,IAAyB,EAA1B,EAA8BD,MAA9B,CAAqC,UAASG,WAAT,EAAsBqB,YAAtB,EAAoC;AACvF,YAAIiB,aAAa,GAAGjC,SAAS,CAACkC,eAAV,CAA0BlB,YAA1B,EAAwCR,GAA5D;AACAb,QAAAA,WAAW,CAACsC,aAAD,CAAX,GAA6BH,cAAc,CAACG,aAAD,CAA3C;AACA,eAAOtC,WAAP;AACD,OAJe,EAIb,EAJa,CAHM;AAQtBiB,MAAAA,YAAY,EAAE,CAACP,OAAO,CAACC,SAAR,IAAqB,EAAtB,EAA0Bd,MAA1B,CAAiC,UAASc,SAAT,EAAoBgB,QAApB,EAA8B;AAC3EhB,QAAAA,SAAS,CAACgB,QAAQ,CAACd,GAAV,CAAT,GAA0B;AACxBV,UAAAA,EAAE,EAAEwB,QAAQ,CAACxB,EADW;AAExBU,UAAAA,GAAG,EAAEc,QAAQ,CAACd,GAFU;AAGxBoB,UAAAA,IAAI,EAAEN,QAAQ,CAACM,IAHS;AAIxBL,UAAAA,KAAK,EAAED,QAAQ,CAACK;AAJQ,SAA1B;AAMA,eAAOrB,SAAP;AACD,OARa,EAQX,EARW;AARQ,KAAxB;AAkBA,WAAOyB,QAAP;AACD,GApBM,EAoBJ,EApBI,CAAP;AAqBD;;AAEDI,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,mBAAmB,EAAE,UAASrC,SAAT,EAAoB;AACvC;AACA,QAAIgC,cAAc,GAAGjC,iBAAiB,CAACC,SAAD,CAAtC;AACA,WAAO;AACLgC,MAAAA,cAAc,EAAEA,cADX;AAELM,MAAAA,WAAW,EAAET,cAAc,CAAC7B,SAAD,EAAYgC,cAAZ,CAFtB;AAGLO,MAAAA,QAAQ,EAAEvC,SAAS,CAACuC;AAHf,KAAP;AAKD;AATc,CAAjB","sourcesContent":["/**\n * Copyright 2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar projectConfig = require('../project_config');\n\n// Get Experiment Ids which are part of rollouts\nfunction getRolloutExperimentIds(rollouts) {\n  return (rollouts || []).reduce(function(experimentIds, rollout) {\n    rollout.experiments.forEach(function(e) {\n      experimentIds[e.id] = true;\n    });\n    return experimentIds;\n  }, {});\n}\n\n// Gets Map of all experiments except rollouts\nfunction getExperimentsMap(configObj) {\n  var rolloutExperimentIds = getRolloutExperimentIds(configObj.rollouts);\n  var featureVariablesMap = (configObj.featureFlags || []).reduce(function(resultMap, feature){\n    resultMap[feature.id] = feature.variables;\n    return resultMap;\n  }, {});\n  return (configObj.experiments || []).reduce(function(experiments, experiment) {\n    // skip experiments that are part of a rollout\n    if (!rolloutExperimentIds[experiment.id]) {\n      experiments[experiment.key] = {\n        id: experiment.id,\n        key: experiment.key,\n        variationsMap: (experiment.variations || []).reduce(function(variations, variation) {\n          variations[variation.key] = {\n            id: variation.id,\n            key: variation.key,\n            variablesMap: getMergedVariablesMap(configObj, variation, experiment.id, featureVariablesMap)\n          };\n          if (projectConfig.isFeatureExperiment(configObj, experiment.id)) {\n            variations[variation.key].featureEnabled = variation.featureEnabled;\n          }\n          return variations;\n        }, {}),\n      };\n    }\n    return experiments;\n  }, {});\n}\n\n// Merges feature key and type from feature variables to variation variables.\nfunction getMergedVariablesMap(configObj, variation, experimentId, featureVariablesMap) {\n  var featureId = configObj.experimentFeatureMap[experimentId];\n  var variablesObject = {};\n  if (featureId) {\n    var experimentFeatureVariables = featureVariablesMap[featureId];\n    // Temporary variation variables map to get values to merge.\n    var tempVariablesIdMap = (variation.variables || []).reduce(function(variablesMap, variable) {\n      variablesMap[variable.id] = {\n        id: variable.id,\n        value: variable.value,\n      };\n      return variablesMap;\n    }, {});\n    variablesObject = (experimentFeatureVariables || []).reduce(function(variablesMap, featureVariable) {\n      var variationVariable = tempVariablesIdMap[featureVariable.id];\n      var variableValue = variation.featureEnabled && variationVariable ? variationVariable.value : featureVariable.defaultValue;\n      variablesMap[featureVariable.key] = {\n        id: featureVariable.id,\n        key: featureVariable.key,\n        type: featureVariable.type,\n        value: variableValue,\n      };\n      return variablesMap;\n    }, {});\n  }\n  return variablesObject;\n}\n\n// Gets map of all experiments\nfunction getFeaturesMap(configObj, allExperiments) {\n  return (configObj.featureFlags || []).reduce(function(features, feature) {\n    features[feature.key] = {\n      id: feature.id,\n      key: feature.key,\n      experimentsMap: (feature.experimentIds || []).reduce(function(experiments, experimentId) {\n        var experimentKey = configObj.experimentIdMap[experimentId].key;\n        experiments[experimentKey] = allExperiments[experimentKey];\n        return experiments;\n      }, {}),\n      variablesMap: (feature.variables || []).reduce(function(variables, variable) {\n        variables[variable.key] = {\n          id: variable.id,\n          key: variable.key,\n          type: variable.type,\n          value: variable.defaultValue,\n        };\n        return variables;\n      }, {}),\n    };\n    return features;\n  }, {});\n}\n\nmodule.exports = {\n  getOptimizelyConfig: function(configObj) {\n    // Fetch all feature variables from feature flags to merge them with variation variables\n    var experimentsMap = getExperimentsMap(configObj);\n    return {\n      experimentsMap: experimentsMap,\n      featuresMap: getFeaturesMap(configObj, experimentsMap),\n      revision: configObj.revision,\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}