{"ast":null,"code":"/**\n * Copyright 2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar logging = require('@optimizely/js-sdk-logging');\n\nvar attributesValidator = require('../../utils/attributes_validator');\n\nvar fns = require('../../utils/fns');\n\nvar eventTagUtils = require('../../utils/event_tag_utils');\n\nvar projectConfig = require('../project_config');\n\nvar logger = logging.getLogger('EVENT_BUILDER');\n/**\n * Creates an ImpressionEvent object from decision data\n * @param {Object} config\n * @param {Object} config.configObj\n * @param {String} config.experimentKey\n * @param {String} config.variationKey\n * @param {String} config.userId\n * @param {Object} config.userAttributes\n * @param {String} config.clientEngine\n * @param {String} config.clientVersion\n * @return {Object} an ImpressionEvent object\n */\n\nexports.buildImpressionEvent = function buildImpressionEvent(config) {\n  var configObj = config.configObj;\n  var experimentKey = config.experimentKey;\n  var variationKey = config.variationKey;\n  var userId = config.userId;\n  var userAttributes = config.userAttributes;\n  var clientEngine = config.clientEngine;\n  var clientVersion = config.clientVersion;\n  var variationId = projectConfig.getVariationIdFromExperimentAndVariationKey(configObj, experimentKey, variationKey);\n  var experimentId = projectConfig.getExperimentId(configObj, experimentKey);\n  var layerId = projectConfig.getLayerId(configObj, experimentId);\n  return {\n    type: 'impression',\n    timestamp: fns.currentTimestamp(),\n    uuid: fns.uuid(),\n    user: {\n      id: userId,\n      attributes: buildVisitorAttributes(configObj, userAttributes)\n    },\n    context: {\n      accountId: configObj.accountId,\n      projectId: configObj.projectId,\n      revision: configObj.revision,\n      clientName: clientEngine,\n      clientVersion: clientVersion,\n      anonymizeIP: configObj.anonymizeIP || false,\n      botFiltering: configObj.botFiltering\n    },\n    layer: {\n      id: layerId\n    },\n    experiment: {\n      id: experimentId,\n      key: experimentKey\n    },\n    variation: {\n      id: variationId,\n      key: variationKey\n    }\n  };\n};\n/**\n * Creates a ConversionEvent object from track\n * @param {Object} config\n * @param {Object} config.configObj\n * @param {String} config.eventKey\n * @param {Object|undefined} config.eventTags\n * @param {String} config.userId\n * @param {Object} config.userAttributes\n * @param {String} config.clientEngine\n * @param {String} config.clientVersion\n * @return {Object} a ConversionEvent object\n */\n\n\nexports.buildConversionEvent = function buildConversionEvent(config) {\n  var configObj = config.configObj;\n  var userId = config.userId;\n  var userAttributes = config.userAttributes;\n  var clientEngine = config.clientEngine;\n  var clientVersion = config.clientVersion;\n  var eventKey = config.eventKey;\n  var eventTags = config.eventTags;\n  var eventId = projectConfig.getEventId(configObj, eventKey);\n  return {\n    type: 'conversion',\n    timestamp: fns.currentTimestamp(),\n    uuid: fns.uuid(),\n    user: {\n      id: userId,\n      attributes: buildVisitorAttributes(configObj, userAttributes)\n    },\n    context: {\n      accountId: configObj.accountId,\n      projectId: configObj.projectId,\n      revision: configObj.revision,\n      clientName: clientEngine,\n      clientVersion: clientVersion,\n      anonymizeIP: configObj.anonymizeIP || false,\n      botFiltering: configObj.botFiltering\n    },\n    event: {\n      id: eventId,\n      key: eventKey\n    },\n    revenue: eventTagUtils.getRevenueValue(eventTags, logger),\n    value: eventTagUtils.getEventValue(eventTags, logger),\n    tags: eventTags\n  };\n};\n\nfunction buildVisitorAttributes(configObj, attributes) {\n  var builtAttributes = []; // Omit attribute values that are not supported by the log endpoint.\n\n  fns.forOwn(attributes, function (attributeValue, attributeKey) {\n    if (attributesValidator.isAttributeValid(attributeKey, attributeValue)) {\n      var attributeId = projectConfig.getAttributeId(configObj, attributeKey, logger);\n\n      if (attributeId) {\n        builtAttributes.push({\n          entityId: attributeId,\n          key: attributeKey,\n          value: attributes[attributeKey]\n        });\n      }\n    }\n  });\n  return builtAttributes;\n}","map":{"version":3,"sources":["/home/abhishek/Music/contentstack-reactjs-ab-testing/node_modules/@optimizely/optimizely-sdk/lib/core/event_builder/event_helpers.js"],"names":["logging","require","attributesValidator","fns","eventTagUtils","projectConfig","logger","getLogger","exports","buildImpressionEvent","config","configObj","experimentKey","variationKey","userId","userAttributes","clientEngine","clientVersion","variationId","getVariationIdFromExperimentAndVariationKey","experimentId","getExperimentId","layerId","getLayerId","type","timestamp","currentTimestamp","uuid","user","id","attributes","buildVisitorAttributes","context","accountId","projectId","revision","clientName","anonymizeIP","botFiltering","layer","experiment","key","variation","buildConversionEvent","eventKey","eventTags","eventId","getEventId","event","revenue","getRevenueValue","value","getEventValue","tags","builtAttributes","forOwn","attributeValue","attributeKey","isAttributeValid","attributeId","getAttributeId","push","entityId"],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar logging = require('@optimizely/js-sdk-logging');\n\nvar attributesValidator = require('../../utils/attributes_validator');\nvar fns = require('../../utils/fns');\nvar eventTagUtils = require('../../utils/event_tag_utils');\nvar projectConfig = require('../project_config');\n\nvar logger = logging.getLogger('EVENT_BUILDER');\n\n/**\n * Creates an ImpressionEvent object from decision data\n * @param {Object} config\n * @param {Object} config.configObj\n * @param {String} config.experimentKey\n * @param {String} config.variationKey\n * @param {String} config.userId\n * @param {Object} config.userAttributes\n * @param {String} config.clientEngine\n * @param {String} config.clientVersion\n * @return {Object} an ImpressionEvent object\n */\nexports.buildImpressionEvent = function buildImpressionEvent(config) {\n  var configObj = config.configObj;\n  var experimentKey = config.experimentKey;\n  var variationKey = config.variationKey;\n  var userId = config.userId;\n  var userAttributes = config.userAttributes;\n  var clientEngine = config.clientEngine;\n  var clientVersion = config.clientVersion;\n\n  var variationId = projectConfig.getVariationIdFromExperimentAndVariationKey(configObj, experimentKey, variationKey);\n  var experimentId = projectConfig.getExperimentId(configObj, experimentKey);\n  var layerId = projectConfig.getLayerId(configObj, experimentId);\n\n  return {\n    type: 'impression',\n    timestamp: fns.currentTimestamp(),\n    uuid: fns.uuid(),\n\n    user: {\n      id: userId,\n      attributes: buildVisitorAttributes(configObj, userAttributes),\n    },\n\n    context: {\n      accountId: configObj.accountId,\n      projectId: configObj.projectId,\n      revision: configObj.revision,\n      clientName: clientEngine,\n      clientVersion: clientVersion,\n      anonymizeIP: configObj.anonymizeIP || false,\n      botFiltering: configObj.botFiltering,\n    },\n\n    layer: {\n      id: layerId,\n    },\n\n    experiment: {\n      id: experimentId,\n      key: experimentKey,\n    },\n\n    variation: {\n      id: variationId,\n      key: variationKey,\n    },\n  };\n};\n\n/**\n * Creates a ConversionEvent object from track\n * @param {Object} config\n * @param {Object} config.configObj\n * @param {String} config.eventKey\n * @param {Object|undefined} config.eventTags\n * @param {String} config.userId\n * @param {Object} config.userAttributes\n * @param {String} config.clientEngine\n * @param {String} config.clientVersion\n * @return {Object} a ConversionEvent object\n */\nexports.buildConversionEvent = function buildConversionEvent(config) {\n  var configObj = config.configObj;\n  var userId = config.userId;\n  var userAttributes = config.userAttributes;\n  var clientEngine = config.clientEngine;\n  var clientVersion = config.clientVersion;\n\n  var eventKey = config.eventKey;\n  var eventTags = config.eventTags;\n  var eventId = projectConfig.getEventId(configObj, eventKey);\n\n  return {\n    type: 'conversion',\n    timestamp: fns.currentTimestamp(),\n    uuid: fns.uuid(),\n\n    user: {\n      id: userId,\n      attributes: buildVisitorAttributes(configObj, userAttributes),\n    },\n\n    context: {\n      accountId: configObj.accountId,\n      projectId: configObj.projectId,\n      revision: configObj.revision,\n      clientName: clientEngine,\n      clientVersion: clientVersion,\n      anonymizeIP: configObj.anonymizeIP || false,\n      botFiltering: configObj.botFiltering,\n    },\n\n    event: {\n      id: eventId,\n      key: eventKey,\n    },\n\n    revenue: eventTagUtils.getRevenueValue(eventTags, logger),\n    value: eventTagUtils.getEventValue(eventTags, logger),\n    tags: eventTags,\n  };\n};\n\nfunction buildVisitorAttributes(configObj, attributes) {\n  var builtAttributes = [];\n  // Omit attribute values that are not supported by the log endpoint.\n  fns.forOwn(attributes, function(attributeValue, attributeKey) {\n    if (attributesValidator.isAttributeValid(attributeKey, attributeValue)) {\n      var attributeId = projectConfig.getAttributeId(configObj, attributeKey, logger);\n      if (attributeId) {\n        builtAttributes.push({\n          entityId: attributeId,\n          key: attributeKey,\n          value: attributes[attributeKey],\n        });\n      }\n    }\n  });\n\n  return builtAttributes;\n}\n"]},"metadata":{},"sourceType":"script"}