{"ast":null,"code":"/**\n * Copyright 2016-2017, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar fns = require('../../utils/fns');\n\nvar POST_METHOD = 'POST';\nvar GET_METHOD = 'GET';\nvar READYSTATE_COMPLETE = 4;\nmodule.exports = {\n  /**\n   * Sample event dispatcher implementation for tracking impression and conversions\n   * Users of the SDK can provide their own implementation\n   * @param  {Object} eventObj\n   * @param  {Function} callback\n   */\n  dispatchEvent: function (eventObj, callback) {\n    var url = eventObj.url;\n    var params = eventObj.params;\n    var req;\n\n    if (eventObj.httpVerb === POST_METHOD) {\n      req = new XMLHttpRequest();\n      req.open(POST_METHOD, url, true);\n      req.setRequestHeader('Content-Type', 'application/json');\n\n      req.onreadystatechange = function () {\n        if (req.readyState === READYSTATE_COMPLETE && callback && typeof callback === 'function') {\n          try {\n            callback(params);\n          } catch (e) {// TODO: Log this somehow (consider adding a logger to the EventDispatcher interface)\n          }\n        }\n      };\n\n      req.send(JSON.stringify(params));\n    } else {\n      // add param for cors headers to be sent by the log endpoint\n      url += '?wxhr=true';\n\n      if (params) {\n        url += '&' + toQueryString(params);\n      }\n\n      req = new XMLHttpRequest();\n      req.open(GET_METHOD, url, true);\n\n      req.onreadystatechange = function () {\n        if (req.readyState === READYSTATE_COMPLETE && callback && typeof callback === 'function') {\n          try {\n            callback();\n          } catch (e) {// TODO: Log this somehow (consider adding a logger to the EventDispatcher interface)\n          }\n        }\n      };\n\n      req.send();\n    }\n  }\n};\n\nvar toQueryString = function (obj) {\n  return fns.map(obj, function (v, k) {\n    return encodeURIComponent(k) + '=' + encodeURIComponent(v);\n  }).join('&');\n};","map":{"version":3,"sources":["/home/abhishek/Music/contentstack-reactjs-ab-testing/node_modules/@optimizely/optimizely-sdk/lib/plugins/event_dispatcher/index.browser.js"],"names":["fns","require","POST_METHOD","GET_METHOD","READYSTATE_COMPLETE","module","exports","dispatchEvent","eventObj","callback","url","params","req","httpVerb","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","e","send","JSON","stringify","toQueryString","obj","map","v","k","encodeURIComponent","join"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,IAAIA,GAAG,GAAGC,OAAO,CAAC,iBAAD,CAAjB;;AAEA,IAAIC,WAAW,GAAG,MAAlB;AACA,IAAIC,UAAU,GAAG,KAAjB;AACA,IAAIC,mBAAmB,GAAG,CAA1B;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACf;;;;;;AAMAC,EAAAA,aAAa,EAAE,UAASC,QAAT,EAAmBC,QAAnB,EAA6B;AAC1C,QAAIC,GAAG,GAAGF,QAAQ,CAACE,GAAnB;AACA,QAAIC,MAAM,GAAGH,QAAQ,CAACG,MAAtB;AACA,QAAIC,GAAJ;;AACA,QAAIJ,QAAQ,CAACK,QAAT,KAAsBX,WAA1B,EAAuC;AACrCU,MAAAA,GAAG,GAAG,IAAIE,cAAJ,EAAN;AACAF,MAAAA,GAAG,CAACG,IAAJ,CAASb,WAAT,EAAsBQ,GAAtB,EAA2B,IAA3B;AACAE,MAAAA,GAAG,CAACI,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;;AACAJ,MAAAA,GAAG,CAACK,kBAAJ,GAAyB,YAAW;AAClC,YAAIL,GAAG,CAACM,UAAJ,KAAmBd,mBAAnB,IAA0CK,QAA1C,IAAsD,OAAOA,QAAP,KAAoB,UAA9E,EAA0F;AACxF,cAAI;AACFA,YAAAA,QAAQ,CAACE,MAAD,CAAR;AACD,WAFD,CAEE,OAAOQ,CAAP,EAAU,CACV;AACD;AACF;AACF,OARD;;AASAP,MAAAA,GAAG,CAACQ,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeX,MAAf,CAAT;AACD,KAdD,MAcO;AACL;AACAD,MAAAA,GAAG,IAAI,YAAP;;AACA,UAAIC,MAAJ,EAAY;AACVD,QAAAA,GAAG,IAAI,MAAMa,aAAa,CAACZ,MAAD,CAA1B;AACD;;AAEDC,MAAAA,GAAG,GAAG,IAAIE,cAAJ,EAAN;AACAF,MAAAA,GAAG,CAACG,IAAJ,CAASZ,UAAT,EAAqBO,GAArB,EAA0B,IAA1B;;AACAE,MAAAA,GAAG,CAACK,kBAAJ,GAAyB,YAAW;AAClC,YAAIL,GAAG,CAACM,UAAJ,KAAmBd,mBAAnB,IAA0CK,QAA1C,IAAsD,OAAOA,QAAP,KAAoB,UAA9E,EAA0F;AACxF,cAAI;AACFA,YAAAA,QAAQ;AACT,WAFD,CAEE,OAAOU,CAAP,EAAU,CACV;AACD;AACF;AACF,OARD;;AASAP,MAAAA,GAAG,CAACQ,IAAJ;AACD;AACF;AA7Cc,CAAjB;;AAgDA,IAAIG,aAAa,GAAG,UAASC,GAAT,EAAc;AAChC,SAAOxB,GAAG,CAACyB,GAAJ,CAAQD,GAAR,EAAa,UAASE,CAAT,EAAYC,CAAZ,EAAe;AACjC,WAAOC,kBAAkB,CAACD,CAAD,CAAlB,GAAwB,GAAxB,GAA8BC,kBAAkB,CAACF,CAAD,CAAvD;AACD,GAFM,EAEJG,IAFI,CAEC,GAFD,CAAP;AAGD,CAJD","sourcesContent":["/**\n * Copyright 2016-2017, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar fns = require('../../utils/fns');\n\nvar POST_METHOD = 'POST';\nvar GET_METHOD = 'GET';\nvar READYSTATE_COMPLETE = 4;\n\nmodule.exports = {\n  /**\n   * Sample event dispatcher implementation for tracking impression and conversions\n   * Users of the SDK can provide their own implementation\n   * @param  {Object} eventObj\n   * @param  {Function} callback\n   */\n  dispatchEvent: function(eventObj, callback) {\n    var url = eventObj.url;\n    var params = eventObj.params;\n    var req;\n    if (eventObj.httpVerb === POST_METHOD) {\n      req = new XMLHttpRequest();\n      req.open(POST_METHOD, url, true);\n      req.setRequestHeader('Content-Type', 'application/json');\n      req.onreadystatechange = function() {\n        if (req.readyState === READYSTATE_COMPLETE && callback && typeof callback === 'function') {\n          try {\n            callback(params);\n          } catch (e) {\n            // TODO: Log this somehow (consider adding a logger to the EventDispatcher interface)\n          }\n        }\n      };\n      req.send(JSON.stringify(params));\n    } else {\n      // add param for cors headers to be sent by the log endpoint\n      url += '?wxhr=true';\n      if (params) {\n        url += '&' + toQueryString(params);\n      }\n\n      req = new XMLHttpRequest();\n      req.open(GET_METHOD, url, true);\n      req.onreadystatechange = function() {\n        if (req.readyState === READYSTATE_COMPLETE && callback && typeof callback === 'function') {\n          try {\n            callback();\n          } catch (e) {\n            // TODO: Log this somehow (consider adding a logger to the EventDispatcher interface)\n          }\n        }\n      };\n      req.send();\n    }\n  },\n};\n\nvar toQueryString = function(obj) {\n  return fns.map(obj, function(v, k) {\n    return encodeURIComponent(k) + '=' + encodeURIComponent(v);\n  }).join('&');\n};\n"]},"metadata":{},"sourceType":"script"}