{"ast":null,"code":"/**\n * Copyright 2016-2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar enums = require('../../utils/enums');\n\nvar fns = require('../../utils/fns');\n\nvar eventTagUtils = require('../../utils/event_tag_utils');\n\nvar projectConfig = require('../project_config');\n\nvar attributeValidator = require('../../utils/attributes_validator');\n\nvar ACTIVATE_EVENT_KEY = 'campaign_activated';\nvar CUSTOM_ATTRIBUTE_FEATURE_TYPE = 'custom';\nvar ENDPOINT = 'https://logx.optimizely.com/v1/events';\nvar HTTP_VERB = 'POST';\n/**\n * Get params which are used same in both conversion and impression events\n * @param  {Object} options.attributes    Object representing user attributes and values which need to be recorded\n * @param  {string} options.clientEngine  The client we are using: node or javascript\n * @param  {string} options.clientVersion The version of the client\n * @param  {Object} options.configObj     Object representing project configuration, including datafile information and mappings for quick lookup\n * @param  {string} options.userId        ID for user\n * @param  {Object} options.Logger        logger\n * @return {Object}                       Common params with properties that are used in both conversion and impression events\n */\n\nfunction getCommonEventParams(options) {\n  var attributes = options.attributes;\n  var configObj = options.configObj;\n  var anonymize_ip = configObj.anonymizeIP;\n  var botFiltering = configObj.botFiltering;\n\n  if (anonymize_ip === null || anonymize_ip === undefined) {\n    anonymize_ip = false;\n  }\n\n  var visitor = {\n    snapshots: [],\n    visitor_id: options.userId,\n    attributes: []\n  };\n  var commonParams = {\n    account_id: configObj.accountId,\n    project_id: configObj.projectId,\n    visitors: [visitor],\n    revision: configObj.revision,\n    client_name: options.clientEngine,\n    client_version: options.clientVersion,\n    anonymize_ip: anonymize_ip,\n    enrich_decisions: true\n  }; // Omit attribute values that are not supported by the log endpoint.\n\n  fns.forOwn(attributes, function (attributeValue, attributeKey) {\n    if (attributeValidator.isAttributeValid(attributeKey, attributeValue)) {\n      var attributeId = projectConfig.getAttributeId(options.configObj, attributeKey, options.logger);\n\n      if (attributeId) {\n        commonParams.visitors[0].attributes.push({\n          entity_id: attributeId,\n          key: attributeKey,\n          type: CUSTOM_ATTRIBUTE_FEATURE_TYPE,\n          value: attributes[attributeKey]\n        });\n      }\n    }\n  });\n\n  if (typeof botFiltering === 'boolean') {\n    commonParams.visitors[0].attributes.push({\n      entity_id: enums.CONTROL_ATTRIBUTES.BOT_FILTERING,\n      key: enums.CONTROL_ATTRIBUTES.BOT_FILTERING,\n      type: CUSTOM_ATTRIBUTE_FEATURE_TYPE,\n      value: botFiltering\n    });\n  }\n\n  return commonParams;\n}\n/**\n * Creates object of params specific to impression events\n * @param  {Object} configObj    Object representing project configuration\n * @param  {string} experimentId ID of experiment for which impression needs to be recorded\n * @param  {string} variationId  ID for variation which would be presented to user\n * @return {Object}              Impression event params\n */\n\n\nfunction getImpressionEventParams(configObj, experimentId, variationId) {\n  var impressionEventParams = {\n    decisions: [{\n      campaign_id: projectConfig.getLayerId(configObj, experimentId),\n      experiment_id: experimentId,\n      variation_id: variationId\n    }],\n    events: [{\n      entity_id: projectConfig.getLayerId(configObj, experimentId),\n      timestamp: fns.currentTimestamp(),\n      key: ACTIVATE_EVENT_KEY,\n      uuid: fns.uuid()\n    }]\n  };\n  return impressionEventParams;\n}\n/**\n * Creates object of params specific to conversion events\n * @param  {Object} configObj                 Object representing project configuration\n * @param  {string} eventKey                  Event key representing the event which needs to be recorded\n * @param  {Object} eventTags                 Values associated with the event.\n * @param  {Object} logger                    Logger object\n * @return {Object}                           Conversion event params\n */\n\n\nfunction getVisitorSnapshot(configObj, eventKey, eventTags, logger) {\n  var snapshot = {\n    events: []\n  };\n  var eventDict = {\n    entity_id: projectConfig.getEventId(configObj, eventKey),\n    timestamp: fns.currentTimestamp(),\n    uuid: fns.uuid(),\n    key: eventKey\n  };\n\n  if (eventTags) {\n    var revenue = eventTagUtils.getRevenueValue(eventTags, logger);\n\n    if (revenue !== null) {\n      eventDict[enums.RESERVED_EVENT_KEYWORDS.REVENUE] = revenue;\n    }\n\n    var eventValue = eventTagUtils.getEventValue(eventTags, logger);\n\n    if (eventValue !== null) {\n      eventDict[enums.RESERVED_EVENT_KEYWORDS.VALUE] = eventValue;\n    }\n\n    eventDict['tags'] = eventTags;\n  }\n\n  snapshot.events.push(eventDict);\n  return snapshot;\n}\n\nmodule.exports = {\n  /**\n   * Create impression event params to be sent to the logging endpoint\n   * @param  {Object} options               Object containing values needed to build impression event\n   * @param  {Object} options.attributes    Object representing user attributes and values which need to be recorded\n   * @param  {string} options.clientEngine  The client we are using: node or javascript\n   * @param  {string} options.clientVersion The version of the client\n   * @param  {Object} options.configObj     Object representing project configuration, including datafile information and mappings for quick lookup\n   * @param  {string} options.experimentId  Experiment for which impression needs to be recorded\n   * @param  {string} options.userId        ID for user\n   * @param  {string} options.variationId   ID for variation which would be presented to user\n   * @return {Object}                       Params to be used in impression event logging endpoint call\n   */\n  getImpressionEvent: function (options) {\n    var impressionEvent = {\n      httpVerb: HTTP_VERB\n    };\n    var commonParams = getCommonEventParams(options);\n    impressionEvent.url = ENDPOINT;\n    var impressionEventParams = getImpressionEventParams(options.configObj, options.experimentId, options.variationId); // combine Event params into visitor obj\n\n    commonParams.visitors[0].snapshots.push(impressionEventParams);\n    impressionEvent.params = commonParams;\n    return impressionEvent;\n  },\n\n  /**\n   * Create conversion event params to be sent to the logging endpoint\n   * @param  {Object} options                           Object containing values needed to build conversion event\n   * @param  {Object} options.attributes                Object representing user attributes and values which need to be recorded\n   * @param  {string} options.clientEngine              The client we are using: node or javascript\n   * @param  {string} options.clientVersion             The version of the client\n   * @param  {Object} options.configObj                 Object representing project configuration, including datafile information and mappings for quick lookup\n   * @param  {string} options.eventKey                  Event key representing the event which needs to be recorded\n   * @param  {Object} options.eventTags                 Object with event-specific tags\n   * @param  {Object} options.logger                    Logger object\n   * @param  {string} options.userId                    ID for user\n   * @return {Object}                                   Params to be used in conversion event logging endpoint call\n   */\n  getConversionEvent: function (options) {\n    var conversionEvent = {\n      httpVerb: HTTP_VERB\n    };\n    var commonParams = getCommonEventParams(options);\n    conversionEvent.url = ENDPOINT;\n    var snapshot = getVisitorSnapshot(options.configObj, options.eventKey, options.eventTags, options.logger);\n    commonParams.visitors[0].snapshots = [snapshot];\n    conversionEvent.params = commonParams;\n    return conversionEvent;\n  }\n};","map":{"version":3,"sources":["/home/abhishek/Music/contentstack-reactjs-ab-testing/node_modules/@optimizely/optimizely-sdk/lib/core/event_builder/index.js"],"names":["enums","require","fns","eventTagUtils","projectConfig","attributeValidator","ACTIVATE_EVENT_KEY","CUSTOM_ATTRIBUTE_FEATURE_TYPE","ENDPOINT","HTTP_VERB","getCommonEventParams","options","attributes","configObj","anonymize_ip","anonymizeIP","botFiltering","undefined","visitor","snapshots","visitor_id","userId","commonParams","account_id","accountId","project_id","projectId","visitors","revision","client_name","clientEngine","client_version","clientVersion","enrich_decisions","forOwn","attributeValue","attributeKey","isAttributeValid","attributeId","getAttributeId","logger","push","entity_id","key","type","value","CONTROL_ATTRIBUTES","BOT_FILTERING","getImpressionEventParams","experimentId","variationId","impressionEventParams","decisions","campaign_id","getLayerId","experiment_id","variation_id","events","timestamp","currentTimestamp","uuid","getVisitorSnapshot","eventKey","eventTags","snapshot","eventDict","getEventId","revenue","getRevenueValue","RESERVED_EVENT_KEYWORDS","REVENUE","eventValue","getEventValue","VALUE","module","exports","getImpressionEvent","impressionEvent","httpVerb","url","params","getConversionEvent","conversionEvent"],"mappings":"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","sourcesContent":["/**\n * Copyright 2016-2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar enums = require('../../utils/enums');\nvar fns = require('../../utils/fns');\nvar eventTagUtils = require('../../utils/event_tag_utils');\nvar projectConfig = require('../project_config');\nvar attributeValidator = require('../../utils/attributes_validator');\n\nvar ACTIVATE_EVENT_KEY = 'campaign_activated';\nvar CUSTOM_ATTRIBUTE_FEATURE_TYPE = 'custom';\nvar ENDPOINT = 'https://logx.optimizely.com/v1/events';\nvar HTTP_VERB = 'POST';\n\n/**\n * Get params which are used same in both conversion and impression events\n * @param  {Object} options.attributes    Object representing user attributes and values which need to be recorded\n * @param  {string} options.clientEngine  The client we are using: node or javascript\n * @param  {string} options.clientVersion The version of the client\n * @param  {Object} options.configObj     Object representing project configuration, including datafile information and mappings for quick lookup\n * @param  {string} options.userId        ID for user\n * @param  {Object} options.Logger        logger\n * @return {Object}                       Common params with properties that are used in both conversion and impression events\n */\nfunction getCommonEventParams(options) {\n  var attributes = options.attributes;\n  var configObj = options.configObj;\n  var anonymize_ip = configObj.anonymizeIP;\n  var botFiltering = configObj.botFiltering;\n  if (anonymize_ip === null || anonymize_ip === undefined) {\n    anonymize_ip = false;\n  }\n\n  var visitor = {\n    snapshots: [],\n    visitor_id: options.userId,\n    attributes: []\n  };\n\n  var commonParams = {\n    account_id: configObj.accountId,\n    project_id: configObj.projectId,\n    visitors: [visitor],\n    revision: configObj.revision,\n    client_name: options.clientEngine,\n    client_version: options.clientVersion,\n    anonymize_ip: anonymize_ip,\n    enrich_decisions: true,\n  };\n\n  // Omit attribute values that are not supported by the log endpoint.\n  fns.forOwn(attributes, function(attributeValue, attributeKey) {\n    if (attributeValidator.isAttributeValid(attributeKey, attributeValue)) {\n      var attributeId = projectConfig.getAttributeId(options.configObj, attributeKey, options.logger);\n      if (attributeId) {\n        commonParams.visitors[0].attributes.push({\n          entity_id: attributeId,\n          key: attributeKey,\n          type: CUSTOM_ATTRIBUTE_FEATURE_TYPE,\n          value: attributes[attributeKey],\n        });\n      }\n    }\n  });\n\n  if (typeof botFiltering === 'boolean') {\n    commonParams.visitors[0].attributes.push({\n      entity_id: enums.CONTROL_ATTRIBUTES.BOT_FILTERING,\n      key: enums.CONTROL_ATTRIBUTES.BOT_FILTERING,\n      type: CUSTOM_ATTRIBUTE_FEATURE_TYPE,\n      value: botFiltering,\n    });\n  }\n  return commonParams;\n}\n\n/**\n * Creates object of params specific to impression events\n * @param  {Object} configObj    Object representing project configuration\n * @param  {string} experimentId ID of experiment for which impression needs to be recorded\n * @param  {string} variationId  ID for variation which would be presented to user\n * @return {Object}              Impression event params\n */\nfunction getImpressionEventParams(configObj, experimentId, variationId) {\n  var impressionEventParams = {\n      decisions: [{\n        campaign_id: projectConfig.getLayerId(configObj, experimentId),\n        experiment_id: experimentId,\n        variation_id: variationId,\n      }],\n      events: [{\n        entity_id: projectConfig.getLayerId(configObj, experimentId),\n        timestamp: fns.currentTimestamp(),\n        key: ACTIVATE_EVENT_KEY,\n        uuid: fns.uuid(),\n      }]\n\n    };\n  return impressionEventParams;\n}\n\n/**\n * Creates object of params specific to conversion events\n * @param  {Object} configObj                 Object representing project configuration\n * @param  {string} eventKey                  Event key representing the event which needs to be recorded\n * @param  {Object} eventTags                 Values associated with the event.\n * @param  {Object} logger                    Logger object\n * @return {Object}                           Conversion event params\n */\nfunction getVisitorSnapshot(configObj, eventKey, eventTags, logger) {\n  var snapshot = {\n    events: []\n  };\n\n  var eventDict = {\n    entity_id: projectConfig.getEventId(configObj, eventKey),\n    timestamp: fns.currentTimestamp(),\n    uuid: fns.uuid(),\n    key: eventKey,\n  };\n\n  if (eventTags) {\n    var revenue = eventTagUtils.getRevenueValue(eventTags, logger);\n    if (revenue !== null) {\n      eventDict[enums.RESERVED_EVENT_KEYWORDS.REVENUE] = revenue;\n    }\n\n    var eventValue = eventTagUtils.getEventValue(eventTags, logger);\n    if (eventValue !== null) {\n      eventDict[enums.RESERVED_EVENT_KEYWORDS.VALUE] = eventValue;\n    }\n\n    eventDict['tags'] = eventTags;\n  }\n  snapshot.events.push(eventDict);\n\n  return snapshot;\n}\n\nmodule.exports = {\n  /**\n   * Create impression event params to be sent to the logging endpoint\n   * @param  {Object} options               Object containing values needed to build impression event\n   * @param  {Object} options.attributes    Object representing user attributes and values which need to be recorded\n   * @param  {string} options.clientEngine  The client we are using: node or javascript\n   * @param  {string} options.clientVersion The version of the client\n   * @param  {Object} options.configObj     Object representing project configuration, including datafile information and mappings for quick lookup\n   * @param  {string} options.experimentId  Experiment for which impression needs to be recorded\n   * @param  {string} options.userId        ID for user\n   * @param  {string} options.variationId   ID for variation which would be presented to user\n   * @return {Object}                       Params to be used in impression event logging endpoint call\n   */\n  getImpressionEvent: function(options) {\n    var impressionEvent = {\n      httpVerb: HTTP_VERB\n    };\n\n    var commonParams = getCommonEventParams(options);\n    impressionEvent.url = ENDPOINT;\n\n    var impressionEventParams = getImpressionEventParams(options.configObj, options.experimentId, options.variationId);\n    // combine Event params into visitor obj\n    commonParams.visitors[0].snapshots.push(impressionEventParams);\n\n    impressionEvent.params = commonParams;\n\n    return impressionEvent;\n  },\n\n  /**\n   * Create conversion event params to be sent to the logging endpoint\n   * @param  {Object} options                           Object containing values needed to build conversion event\n   * @param  {Object} options.attributes                Object representing user attributes and values which need to be recorded\n   * @param  {string} options.clientEngine              The client we are using: node or javascript\n   * @param  {string} options.clientVersion             The version of the client\n   * @param  {Object} options.configObj                 Object representing project configuration, including datafile information and mappings for quick lookup\n   * @param  {string} options.eventKey                  Event key representing the event which needs to be recorded\n   * @param  {Object} options.eventTags                 Object with event-specific tags\n   * @param  {Object} options.logger                    Logger object\n   * @param  {string} options.userId                    ID for user\n   * @return {Object}                                   Params to be used in conversion event logging endpoint call\n   */\n  getConversionEvent: function(options) {\n    var conversionEvent = {\n      httpVerb: HTTP_VERB,\n    };\n\n    var commonParams = getCommonEventParams(options);\n    conversionEvent.url = ENDPOINT;\n\n    var snapshot = getVisitorSnapshot(options.configObj,\n                                            options.eventKey,\n                                            options.eventTags,\n                                            options.logger);\n\n    commonParams.visitors[0].snapshots = [snapshot];\n    conversionEvent.params = commonParams;\n\n    return conversionEvent;\n  },\n};\n"]},"metadata":{},"sourceType":"script"}