{"ast":null,"code":"/****************************************************************************\n * Copyright 2018-2019, Optimizely, Inc. and contributors                        *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\nvar fns = require('../../utils/fns');\n\nvar enums = require('../../utils/enums');\n\nvar sprintf = require('@optimizely/js-sdk-utils').sprintf;\n\nvar LOG_LEVEL = enums.LOG_LEVEL;\nvar LOG_MESSAGES = enums.LOG_MESSAGES;\nvar MODULE_NAME = 'CUSTOM_ATTRIBUTE_CONDITION_EVALUATOR';\nvar EXACT_MATCH_TYPE = 'exact';\nvar EXISTS_MATCH_TYPE = 'exists';\nvar GREATER_THAN_MATCH_TYPE = 'gt';\nvar LESS_THAN_MATCH_TYPE = 'lt';\nvar SUBSTRING_MATCH_TYPE = 'substring';\nvar MATCH_TYPES = [EXACT_MATCH_TYPE, EXISTS_MATCH_TYPE, GREATER_THAN_MATCH_TYPE, LESS_THAN_MATCH_TYPE, SUBSTRING_MATCH_TYPE];\nvar EVALUATORS_BY_MATCH_TYPE = {};\nEVALUATORS_BY_MATCH_TYPE[EXACT_MATCH_TYPE] = exactEvaluator;\nEVALUATORS_BY_MATCH_TYPE[EXISTS_MATCH_TYPE] = existsEvaluator;\nEVALUATORS_BY_MATCH_TYPE[GREATER_THAN_MATCH_TYPE] = greaterThanEvaluator;\nEVALUATORS_BY_MATCH_TYPE[LESS_THAN_MATCH_TYPE] = lessThanEvaluator;\nEVALUATORS_BY_MATCH_TYPE[SUBSTRING_MATCH_TYPE] = substringEvaluator;\n/**\n * Given a custom attribute audience condition and user attributes, evaluate the\n * condition against the attributes.\n * @param  {Object}     condition\n * @param  {Object}     userAttributes\n * @param  {Object}     logger\n * @return {?Boolean}   true/false if the given user attributes match/don't match the given condition,\n *                                      null if the given user attributes and condition can't be evaluated\n * TODO: Change to accept and object with named properties\n */\n\nfunction evaluate(condition, userAttributes, logger) {\n  var conditionMatch = condition.match;\n\n  if (typeof conditionMatch !== 'undefined' && MATCH_TYPES.indexOf(conditionMatch) === -1) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME, JSON.stringify(condition)));\n    return null;\n  }\n\n  var attributeKey = condition.name;\n\n  if (!userAttributes.hasOwnProperty(attributeKey) && conditionMatch != EXISTS_MATCH_TYPE) {\n    logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.MISSING_ATTRIBUTE_VALUE, MODULE_NAME, JSON.stringify(condition), attributeKey));\n    return null;\n  }\n\n  var evaluatorForMatch = EVALUATORS_BY_MATCH_TYPE[conditionMatch] || exactEvaluator;\n  return evaluatorForMatch(condition, userAttributes, logger);\n}\n/**\n * Returns true if the value is valid for exact conditions. Valid values include\n * strings, booleans, and numbers that aren't NaN, -Infinity, or Infinity.\n * @param value\n * @returns {Boolean}\n */\n\n\nfunction isValueTypeValidForExactConditions(value) {\n  return typeof value === 'string' || typeof value === 'boolean' || fns.isNumber(value);\n}\n/**\n * Evaluate the given exact match condition for the given user attributes\n * @param   {Object}    condition\n * @param   {Object}    userAttributes\n * @param   {Object}    logger\n * @return  {?Boolean}  true if the user attribute value is equal (===) to the condition value,\n *                      false if the user attribute value is not equal (!==) to the condition value,\n *                      null if the condition value or user attribute value has an invalid type, or\n *                      if there is a mismatch between the user attribute type and the condition value\n *                      type\n */\n\n\nfunction exactEvaluator(condition, userAttributes, logger) {\n  var conditionValue = condition.value;\n  var conditionValueType = typeof conditionValue;\n  var conditionName = condition.name;\n  var userValue = userAttributes[conditionName];\n  var userValueType = typeof userValue;\n\n  if (!isValueTypeValidForExactConditions(conditionValue) || fns.isNumber(conditionValue) && !fns.isFinite(conditionValue)) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME, JSON.stringify(condition)));\n    return null;\n  }\n\n  if (userValue === null) {\n    logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME, JSON.stringify(condition), conditionName));\n    return null;\n  }\n\n  if (!isValueTypeValidForExactConditions(userValue) || conditionValueType !== userValueType) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME, JSON.stringify(condition), userValueType, conditionName));\n    return null;\n  }\n\n  if (fns.isNumber(userValue) && !fns.isFinite(userValue)) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME, JSON.stringify(condition), conditionName));\n    return null;\n  }\n\n  return conditionValue === userValue;\n}\n/**\n * Evaluate the given exists match condition for the given user attributes\n * @param   {Object}  condition\n * @param   {Object}  userAttributes\n * @returns {Boolean} true if both:\n *                      1) the user attributes have a value for the given condition, and\n *                      2) the user attribute value is neither null nor undefined\n *                    Returns false otherwise\n */\n\n\nfunction existsEvaluator(condition, userAttributes) {\n  var userValue = userAttributes[condition.name];\n  return typeof userValue !== 'undefined' && userValue !== null;\n}\n/**\n * Evaluate the given greater than match condition for the given user attributes\n * @param   {Object}    condition\n * @param   {Object}    userAttributes\n * @param   {Object}    logger\n * @returns {?Boolean}  true if the user attribute value is greater than the condition value,\n *                      false if the user attribute value is less than or equal to the condition value,\n *                      null if the condition value isn't a number or the user attribute value\n *                      isn't a number\n */\n\n\nfunction greaterThanEvaluator(condition, userAttributes, logger) {\n  var conditionName = condition.name;\n  var userValue = userAttributes[conditionName];\n  var userValueType = typeof userValue;\n  var conditionValue = condition.value;\n\n  if (!fns.isFinite(conditionValue)) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME, JSON.stringify(condition)));\n    return null;\n  }\n\n  if (userValue === null) {\n    logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME, JSON.stringify(condition), conditionName));\n    return null;\n  }\n\n  if (!fns.isNumber(userValue)) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME, JSON.stringify(condition), userValueType, conditionName));\n    return null;\n  }\n\n  if (!fns.isFinite(userValue)) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME, JSON.stringify(condition), conditionName));\n    return null;\n  }\n\n  return userValue > conditionValue;\n}\n/**\n * Evaluate the given less than match condition for the given user attributes\n * @param   {Object}    condition\n * @param   {Object}    userAttributes\n * @param   {Object}    logger\n * @returns {?Boolean}  true if the user attribute value is less than the condition value,\n *                      false if the user attribute value is greater than or equal to the condition value,\n *                      null if the condition value isn't a number or the user attribute value isn't a\n *                      number\n */\n\n\nfunction lessThanEvaluator(condition, userAttributes, logger) {\n  var conditionName = condition.name;\n  var userValue = userAttributes[condition.name];\n  var userValueType = typeof userValue;\n  var conditionValue = condition.value;\n\n  if (!fns.isFinite(conditionValue)) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME, JSON.stringify(condition)));\n    return null;\n  }\n\n  if (userValue === null) {\n    logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME, JSON.stringify(condition), conditionName));\n    return null;\n  }\n\n  if (!fns.isNumber(userValue)) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME, JSON.stringify(condition), userValueType, conditionName));\n    return null;\n  }\n\n  if (!fns.isFinite(userValue)) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME, JSON.stringify(condition), conditionName));\n    return null;\n  }\n\n  return userValue < conditionValue;\n}\n/**\n * Evaluate the given substring match condition for the given user attributes\n * @param   {Object}    condition\n * @param   {Object}    userAttributes\n * @param   {Object}    logger\n * @returns {?Boolean}  true if the condition value is a substring of the user attribute value,\n *                      false if the condition value is not a substring of the user attribute value,\n *                      null if the condition value isn't a string or the user attribute value\n *                      isn't a string\n */\n\n\nfunction substringEvaluator(condition, userAttributes, logger) {\n  var conditionName = condition.name;\n  var userValue = userAttributes[condition.name];\n  var userValueType = typeof userValue;\n  var conditionValue = condition.value;\n\n  if (typeof conditionValue !== 'string') {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME, JSON.stringify(condition)));\n    return null;\n  }\n\n  if (userValue === null) {\n    logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME, JSON.stringify(condition), conditionName));\n    return null;\n  }\n\n  if (typeof userValue !== 'string') {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME, JSON.stringify(condition), userValueType, conditionName));\n    return null;\n  }\n\n  return userValue.indexOf(conditionValue) !== -1;\n}\n\nmodule.exports = {\n  evaluate: evaluate\n};","map":{"version":3,"sources":["/home/abhishek/Music/contentstack-reactjs-ab-testing/node_modules/@optimizely/optimizely-sdk/lib/core/custom_attribute_condition_evaluator/index.js"],"names":["fns","require","enums","sprintf","LOG_LEVEL","LOG_MESSAGES","MODULE_NAME","EXACT_MATCH_TYPE","EXISTS_MATCH_TYPE","GREATER_THAN_MATCH_TYPE","LESS_THAN_MATCH_TYPE","SUBSTRING_MATCH_TYPE","MATCH_TYPES","EVALUATORS_BY_MATCH_TYPE","exactEvaluator","existsEvaluator","greaterThanEvaluator","lessThanEvaluator","substringEvaluator","evaluate","condition","userAttributes","logger","conditionMatch","match","indexOf","log","WARNING","UNKNOWN_MATCH_TYPE","JSON","stringify","attributeKey","name","hasOwnProperty","DEBUG","MISSING_ATTRIBUTE_VALUE","evaluatorForMatch","isValueTypeValidForExactConditions","value","isNumber","conditionValue","conditionValueType","conditionName","userValue","userValueType","isFinite","UNEXPECTED_CONDITION_VALUE","UNEXPECTED_TYPE_NULL","UNEXPECTED_TYPE","OUT_OF_BOUNDS","module","exports"],"mappings":"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","sourcesContent":["/****************************************************************************\n * Copyright 2018-2019, Optimizely, Inc. and contributors                        *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\n\nvar fns = require('../../utils/fns');\nvar enums = require('../../utils/enums');\nvar sprintf = require('@optimizely/js-sdk-utils').sprintf;\n\nvar LOG_LEVEL = enums.LOG_LEVEL;\nvar LOG_MESSAGES = enums.LOG_MESSAGES;\nvar MODULE_NAME = 'CUSTOM_ATTRIBUTE_CONDITION_EVALUATOR';\n\nvar EXACT_MATCH_TYPE = 'exact';\nvar EXISTS_MATCH_TYPE = 'exists';\nvar GREATER_THAN_MATCH_TYPE = 'gt';\nvar LESS_THAN_MATCH_TYPE = 'lt';\nvar SUBSTRING_MATCH_TYPE = 'substring';\n\nvar MATCH_TYPES = [\n  EXACT_MATCH_TYPE,\n  EXISTS_MATCH_TYPE,\n  GREATER_THAN_MATCH_TYPE,\n  LESS_THAN_MATCH_TYPE,\n  SUBSTRING_MATCH_TYPE,\n];\n\nvar EVALUATORS_BY_MATCH_TYPE = {};\nEVALUATORS_BY_MATCH_TYPE[EXACT_MATCH_TYPE] = exactEvaluator;\nEVALUATORS_BY_MATCH_TYPE[EXISTS_MATCH_TYPE] = existsEvaluator;\nEVALUATORS_BY_MATCH_TYPE[GREATER_THAN_MATCH_TYPE] = greaterThanEvaluator;\nEVALUATORS_BY_MATCH_TYPE[LESS_THAN_MATCH_TYPE] = lessThanEvaluator;\nEVALUATORS_BY_MATCH_TYPE[SUBSTRING_MATCH_TYPE] = substringEvaluator;\n\n/**\n * Given a custom attribute audience condition and user attributes, evaluate the\n * condition against the attributes.\n * @param  {Object}     condition\n * @param  {Object}     userAttributes\n * @param  {Object}     logger\n * @return {?Boolean}   true/false if the given user attributes match/don't match the given condition,\n *                                      null if the given user attributes and condition can't be evaluated\n * TODO: Change to accept and object with named properties\n */\nfunction evaluate(condition, userAttributes, logger) {\n  var conditionMatch = condition.match;\n  if (typeof conditionMatch !== 'undefined' && MATCH_TYPES.indexOf(conditionMatch) === -1) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME, JSON.stringify(condition)));\n    return null;\n  }\n\n  var attributeKey = condition.name;\n  if (!userAttributes.hasOwnProperty(attributeKey) && conditionMatch != EXISTS_MATCH_TYPE) {\n    logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.MISSING_ATTRIBUTE_VALUE, MODULE_NAME, JSON.stringify(condition), attributeKey));\n    return null;\n  }\n\n  var evaluatorForMatch = EVALUATORS_BY_MATCH_TYPE[conditionMatch] || exactEvaluator;\n  return evaluatorForMatch(condition, userAttributes, logger);\n}\n\n/**\n * Returns true if the value is valid for exact conditions. Valid values include\n * strings, booleans, and numbers that aren't NaN, -Infinity, or Infinity.\n * @param value\n * @returns {Boolean}\n */\nfunction isValueTypeValidForExactConditions(value) {\n  return typeof value === 'string' || typeof value === 'boolean' ||\n    fns.isNumber(value);\n}\n\n/**\n * Evaluate the given exact match condition for the given user attributes\n * @param   {Object}    condition\n * @param   {Object}    userAttributes\n * @param   {Object}    logger\n * @return  {?Boolean}  true if the user attribute value is equal (===) to the condition value,\n *                      false if the user attribute value is not equal (!==) to the condition value,\n *                      null if the condition value or user attribute value has an invalid type, or\n *                      if there is a mismatch between the user attribute type and the condition value\n *                      type\n */\nfunction exactEvaluator(condition, userAttributes, logger) {\n  var conditionValue = condition.value;\n  var conditionValueType = typeof conditionValue;\n  var conditionName = condition.name;\n  var userValue = userAttributes[conditionName];\n  var userValueType = typeof userValue;\n\n  if (!isValueTypeValidForExactConditions(conditionValue) || (fns.isNumber(conditionValue) && !fns.isFinite(conditionValue))) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME, JSON.stringify(condition)));\n    return null;\n  }\n\n  if (userValue === null) {\n    logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME, JSON.stringify(condition), conditionName));\n    return null;\n  }\n\n  if (!isValueTypeValidForExactConditions(userValue) || conditionValueType !== userValueType) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME, JSON.stringify(condition), userValueType, conditionName));\n    return null;\n  }\n\n  if (fns.isNumber(userValue) && !fns.isFinite(userValue)) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME, JSON.stringify(condition), conditionName));\n    return null;\n  }\n\n  return conditionValue === userValue;\n}\n\n/**\n * Evaluate the given exists match condition for the given user attributes\n * @param   {Object}  condition\n * @param   {Object}  userAttributes\n * @returns {Boolean} true if both:\n *                      1) the user attributes have a value for the given condition, and\n *                      2) the user attribute value is neither null nor undefined\n *                    Returns false otherwise\n */\nfunction existsEvaluator(condition, userAttributes) {\n  var userValue = userAttributes[condition.name];\n  return typeof userValue !== 'undefined' && userValue !== null;\n}\n\n/**\n * Evaluate the given greater than match condition for the given user attributes\n * @param   {Object}    condition\n * @param   {Object}    userAttributes\n * @param   {Object}    logger\n * @returns {?Boolean}  true if the user attribute value is greater than the condition value,\n *                      false if the user attribute value is less than or equal to the condition value,\n *                      null if the condition value isn't a number or the user attribute value\n *                      isn't a number\n */\nfunction greaterThanEvaluator(condition, userAttributes, logger) {\n  var conditionName = condition.name;\n  var userValue = userAttributes[conditionName];\n  var userValueType = typeof userValue;\n  var conditionValue = condition.value;\n\n  if (!fns.isFinite(conditionValue)) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME, JSON.stringify(condition)));\n    return null;\n  }\n\n  if (userValue === null) {\n    logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME, JSON.stringify(condition), conditionName));\n    return null;\n  }\n\n  if (!fns.isNumber(userValue)) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME, JSON.stringify(condition), userValueType, conditionName));\n    return null;\n  }\n\n  if (!fns.isFinite(userValue)) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME, JSON.stringify(condition), conditionName));\n    return null;\n  }\n\n  return userValue > conditionValue;\n}\n\n/**\n * Evaluate the given less than match condition for the given user attributes\n * @param   {Object}    condition\n * @param   {Object}    userAttributes\n * @param   {Object}    logger\n * @returns {?Boolean}  true if the user attribute value is less than the condition value,\n *                      false if the user attribute value is greater than or equal to the condition value,\n *                      null if the condition value isn't a number or the user attribute value isn't a\n *                      number\n */\nfunction lessThanEvaluator(condition, userAttributes, logger) {\n  var conditionName = condition.name;\n  var userValue = userAttributes[condition.name];\n  var userValueType = typeof userValue;\n  var conditionValue = condition.value;\n\n  if (!fns.isFinite(conditionValue)) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME, JSON.stringify(condition)));\n    return null;\n  }\n\n  if (userValue === null) {\n    logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME, JSON.stringify(condition), conditionName));\n    return null;\n  }\n\n  if (!fns.isNumber(userValue)) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME, JSON.stringify(condition), userValueType, conditionName));\n    return null;\n  }\n\n  if (!fns.isFinite(userValue)) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME, JSON.stringify(condition), conditionName));\n    return null;\n  }\n\n  return userValue < conditionValue;\n}\n\n/**\n * Evaluate the given substring match condition for the given user attributes\n * @param   {Object}    condition\n * @param   {Object}    userAttributes\n * @param   {Object}    logger\n * @returns {?Boolean}  true if the condition value is a substring of the user attribute value,\n *                      false if the condition value is not a substring of the user attribute value,\n *                      null if the condition value isn't a string or the user attribute value\n *                      isn't a string\n */\nfunction substringEvaluator(condition, userAttributes, logger) {\n  var conditionName = condition.name;\n  var userValue = userAttributes[condition.name];\n  var userValueType = typeof userValue;\n  var conditionValue = condition.value;\n\n  if (typeof conditionValue !== 'string') {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME, JSON.stringify(condition)));\n    return null;\n  }\n\n  if (userValue === null) {\n    logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME, JSON.stringify(condition), conditionName));\n    return null;\n  }\n\n  if (typeof userValue !== 'string') {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME, JSON.stringify(condition), userValueType, conditionName));\n    return null;\n  }\n\n  return userValue.indexOf(conditionValue) !== -1;\n}\n\nmodule.exports = {\n  evaluate: evaluate\n};\n"]},"metadata":{},"sourceType":"script"}