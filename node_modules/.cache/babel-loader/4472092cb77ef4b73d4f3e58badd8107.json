{"ast":null,"code":"/**\n * Copyright 2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar fns = require('../../utils/fns');\n\nvar sprintf = require('@optimizely/js-sdk-utils').sprintf;\n\nvar logging = require('@optimizely/js-sdk-logging');\n\nvar configValidator = require('../../utils/config_validator');\n\nvar datafileManager = require('@optimizely/js-sdk-datafile-manager');\n\nvar enums = require('../../utils/enums');\n\nvar projectConfig = require('../../core/project_config');\n\nvar optimizelyConfig = require('../optimizely_config');\n\nvar logger = logging.getLogger();\nvar ERROR_MESSAGES = enums.ERROR_MESSAGES;\nvar MODULE_NAME = 'PROJECT_CONFIG_MANAGER';\n/**\n * Return an error message derived from a thrown value. If the thrown value is\n * an error, return the error's message property. Otherwise, return a default\n * provided by the second argument.\n * @param {*} maybeError\n * @param {String=} defaultMessage\n * @return {String}\n */\n\nfunction getErrorMessage(maybeError, defaultMessage) {\n  if (maybeError instanceof Error) {\n    return maybeError.message;\n  }\n\n  return defaultMessage || 'Unknown error';\n}\n/**\n * ProjectConfigManager provides project config objects via its methods\n * getConfig and onUpdate. It uses a DatafileManager to fetch datafiles. It is\n * responsible for parsing and validating datafiles, and converting datafile\n * JSON objects into project config objects.\n * @param {Object}         config\n * @param {Object|string=} config.datafile\n * @param {Object=}        config.datafileOptions\n * @param {Object=}        config.jsonSchemaValidator\n * @param {string=}        config.sdkKey\n * @param {boolean=}       config.skipJSONValidation\n */\n\n\nfunction ProjectConfigManager(config) {\n  try {\n    this.__initialize(config);\n  } catch (ex) {\n    logger.error(ex);\n    this.__updateListeners = [];\n    this.__configObj = null;\n    this.__optimizelyConfigObj = null;\n    this.__readyPromise = Promise.resolve({\n      success: false,\n      reason: getErrorMessage(ex, 'Error in initialize')\n    });\n  }\n}\n/**\n * Initialize internal properties including __updateListeners, __configObj, and\n * __readyPromise, using the argument config. Create and subscribe to a datafile\n * manager if appropriate.\n * @param {Object}         config\n * @param {Object|string=} config.datafile\n * @param {Object=}        config.datafileOptions\n * @param {Object=}        config.jsonSchemaValidator\n * @param {string=}        config.sdkKey\n * @param {boolean=}       config.skipJSONValidation\n */\n\n\nProjectConfigManager.prototype.__initialize = function (config) {\n  this.__updateListeners = [];\n  this.jsonSchemaValidator = config.jsonSchemaValidator;\n  this.skipJSONValidation = config.skipJSONValidation;\n\n  if (!config.datafile && !config.sdkKey) {\n    this.__configObj = null;\n    var datafileAndSdkKeyMissingError = new Error(sprintf(ERROR_MESSAGES.DATAFILE_AND_SDK_KEY_MISSING, MODULE_NAME));\n    this.__readyPromise = Promise.resolve({\n      success: false,\n      reason: getErrorMessage(datafileAndSdkKeyMissingError)\n    });\n    logger.error(datafileAndSdkKeyMissingError);\n    return;\n  }\n\n  var initialDatafile = this.__getDatafileFromConfig(config);\n\n  var projectConfigCreationEx;\n\n  if (initialDatafile) {\n    try {\n      this.__configObj = projectConfig.tryCreatingProjectConfig({\n        datafile: initialDatafile,\n        jsonSchemaValidator: this.jsonSchemaValidator,\n        logger: logger,\n        skipJSONValidation: this.skipJSONValidation\n      });\n      this.__optimizelyConfigObj = optimizelyConfig.getOptimizelyConfig(this.__configObj);\n    } catch (ex) {\n      logger.error(ex);\n      projectConfigCreationEx = ex;\n      this.__configObj = null;\n    }\n  } else {\n    this.__configObj = null;\n  }\n\n  if (config.sdkKey) {\n    var datafileManagerConfig = {\n      sdkKey: config.sdkKey\n    };\n\n    if (this.__validateDatafileOptions(config.datafileOptions)) {\n      fns.assign(datafileManagerConfig, config.datafileOptions);\n    }\n\n    if (initialDatafile && this.__configObj) {\n      datafileManagerConfig.datafile = initialDatafile;\n    }\n\n    this.datafileManager = new datafileManager.HttpPollingDatafileManager(datafileManagerConfig);\n    this.datafileManager.start();\n    this.__readyPromise = this.datafileManager.onReady().then(this.__onDatafileManagerReadyFulfill.bind(this), this.__onDatafileManagerReadyReject.bind(this));\n    this.datafileManager.on('update', this.__onDatafileManagerUpdate.bind(this));\n  } else if (this.__configObj) {\n    this.__readyPromise = Promise.resolve({\n      success: true\n    });\n  } else {\n    this.__readyPromise = Promise.resolve({\n      success: false,\n      reason: getErrorMessage(projectConfigCreationEx, 'Invalid datafile')\n    });\n  }\n};\n/**\n * Respond to datafile manager's onReady promise becoming fulfilled.\n * If there are validation or parse failures using the datafile provided by\n * DatafileManager, ProjectConfigManager's ready promise is resolved with an\n * unsuccessful result. Otherwise, ProjectConfigManager updates its own project\n * config object from the new datafile, and its ready promise is resolved with a\n * successful result.\n */\n\n\nProjectConfigManager.prototype.__onDatafileManagerReadyFulfill = function () {\n  var newDatafile = this.datafileManager.get();\n  var newConfigObj;\n\n  try {\n    newConfigObj = projectConfig.tryCreatingProjectConfig({\n      datafile: newDatafile,\n      jsonSchemaValidator: this.jsonSchemaValidator,\n      logger: logger,\n      skipJSONValidation: this.skipJSONValidation\n    });\n  } catch (ex) {\n    logger.error(ex);\n    return {\n      success: false,\n      reason: getErrorMessage(ex)\n    };\n  }\n\n  this.__handleNewConfigObj(newConfigObj);\n\n  return {\n    success: true\n  };\n};\n/**\n * Respond to datafile manager's onReady promise becoming rejected.\n * When DatafileManager's onReady promise is rejected, there is no possibility\n * of obtaining a datafile. In this case, ProjectConfigManager's ready promise\n * is fulfilled with an unsuccessful result.\n * @param {Error} err\n */\n\n\nProjectConfigManager.prototype.__onDatafileManagerReadyReject = function (err) {\n  return {\n    success: false,\n    reason: getErrorMessage(err, 'Failed to become ready')\n  };\n};\n/**\n * Respond to datafile manager's update event. Attempt to update own config\n * object using latest datafile from datafile manager. Call own registered\n * update listeners if successful\n */\n\n\nProjectConfigManager.prototype.__onDatafileManagerUpdate = function () {\n  var newDatafile = this.datafileManager.get();\n  var newConfigObj;\n\n  try {\n    newConfigObj = projectConfig.tryCreatingProjectConfig({\n      datafile: newDatafile,\n      jsonSchemaValidator: this.jsonSchemaValidator,\n      logger: logger,\n      skipJSONValidation: this.skipJSONValidation\n    });\n  } catch (ex) {\n    logger.error(ex);\n  }\n\n  if (newConfigObj) {\n    this.__handleNewConfigObj(newConfigObj);\n  }\n};\n/**\n * If the argument config contains a valid datafile object or string,\n * return a datafile object based on that provided datafile, otherwise\n * return null.\n * @param {Object}         config\n * @param {Object|string=} config.datafile\n * @return {Object|null}\n */\n\n\nProjectConfigManager.prototype.__getDatafileFromConfig = function (config) {\n  var initialDatafile = null;\n\n  try {\n    if (config.datafile) {\n      configValidator.validateDatafile(config.datafile);\n\n      if (typeof config.datafile === 'string' || config.datafile instanceof String) {\n        initialDatafile = JSON.parse(config.datafile);\n      } else {\n        initialDatafile = config.datafile;\n      }\n    }\n  } catch (ex) {\n    logger.error(ex);\n  }\n\n  return initialDatafile;\n};\n/**\n * Validate user-provided datafileOptions. It should be an object or undefined.\n * @param {*} datafileOptions\n * @returns {boolean}\n */\n\n\nProjectConfigManager.prototype.__validateDatafileOptions = function (datafileOptions) {\n  if (typeof datafileOptions === 'undefined') {\n    return true;\n  }\n\n  if (typeof datafileOptions === 'object') {\n    return datafileOptions !== null;\n  }\n\n  return false;\n};\n/**\n * Update internal project config object to be argument object when the argument\n * object has a different revision than the current internal project config\n * object. If the internal object is updated, call update listeners.\n * @param {Object} newConfigObj\n */\n\n\nProjectConfigManager.prototype.__handleNewConfigObj = function (newConfigObj) {\n  var oldConfigObj = this.__configObj;\n  var oldRevision = oldConfigObj ? oldConfigObj.revision : 'null';\n\n  if (oldRevision === newConfigObj.revision) {\n    return;\n  }\n\n  this.__configObj = newConfigObj;\n  this.__optimizelyConfigObj = optimizelyConfig.getOptimizelyConfig(newConfigObj);\n\n  this.__updateListeners.forEach(function (listener) {\n    listener(newConfigObj);\n  });\n};\n/**\n * Returns the current project config object, or null if no project config object\n * is available\n * @return {Object|null}\n */\n\n\nProjectConfigManager.prototype.getConfig = function () {\n  return this.__configObj;\n};\n/**\n * Returns the optimizely config object\n * @return {Object}\n */\n\n\nProjectConfigManager.prototype.getOptimizelyConfig = function () {\n  return this.__optimizelyConfigObj;\n};\n/**\n * Returns a Promise that fulfills when this ProjectConfigManager is ready to\n * use (meaning it has a valid project config object), or has failed to become\n * ready.\n *\n * Failure can be caused by the following:\n * - At least one of sdkKey or datafile is not provided in the constructor argument\n * - The provided datafile was invalid\n * - The datafile provided by the datafile manager was invalid\n * - The datafile manager failed to fetch a datafile\n *\n * The returned Promise is fulfilled with a result object containing these\n * properties:\n *    - success (boolean): True if this instance is ready to use with a valid\n *                         project config object, or false if it failed to\n *                         become ready\n *    - reason (string=):  If success is false, this is a string property with\n *                         an explanatory message.\n * @return {Promise}\n */\n\n\nProjectConfigManager.prototype.onReady = function () {\n  return this.__readyPromise;\n};\n/**\n * Add a listener for project config updates. The listener will be called\n * whenever this instance has a new project config object available.\n * Returns a dispose function that removes the subscription\n * @param {Function} listener\n * @return {Function}\n */\n\n\nProjectConfigManager.prototype.onUpdate = function (listener) {\n  this.__updateListeners.push(listener);\n\n  return function () {\n    var index = this.__updateListeners.indexOf(listener);\n\n    if (index > -1) {\n      this.__updateListeners.splice(index, 1);\n    }\n  }.bind(this);\n};\n/**\n * Stop the internal datafile manager and remove all update listeners\n */\n\n\nProjectConfigManager.prototype.stop = function () {\n  if (this.datafileManager) {\n    this.datafileManager.stop();\n  }\n\n  this.__updateListeners = [];\n};\n\nmodule.exports = {\n  ProjectConfigManager: ProjectConfigManager\n};","map":{"version":3,"sources":["/home/abhishek/Music/contentstack-reactjs-ab-testing/node_modules/@optimizely/optimizely-sdk/lib/core/project_config/project_config_manager.js"],"names":["fns","require","sprintf","logging","configValidator","datafileManager","enums","projectConfig","optimizelyConfig","logger","getLogger","ERROR_MESSAGES","MODULE_NAME","getErrorMessage","maybeError","defaultMessage","Error","message","ProjectConfigManager","config","__initialize","ex","error","__updateListeners","__configObj","__optimizelyConfigObj","__readyPromise","Promise","resolve","success","reason","prototype","jsonSchemaValidator","skipJSONValidation","datafile","sdkKey","datafileAndSdkKeyMissingError","DATAFILE_AND_SDK_KEY_MISSING","initialDatafile","__getDatafileFromConfig","projectConfigCreationEx","tryCreatingProjectConfig","getOptimizelyConfig","datafileManagerConfig","__validateDatafileOptions","datafileOptions","assign","HttpPollingDatafileManager","start","onReady","then","__onDatafileManagerReadyFulfill","bind","__onDatafileManagerReadyReject","on","__onDatafileManagerUpdate","newDatafile","get","newConfigObj","__handleNewConfigObj","err","validateDatafile","String","JSON","parse","oldConfigObj","oldRevision","revision","forEach","listener","getConfig","onUpdate","push","index","indexOf","splice","stop","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar fns = require('../../utils/fns');\nvar sprintf = require('@optimizely/js-sdk-utils').sprintf;\nvar logging = require('@optimizely/js-sdk-logging');\nvar configValidator = require('../../utils/config_validator');\nvar datafileManager = require('@optimizely/js-sdk-datafile-manager');\nvar enums = require('../../utils/enums');\nvar projectConfig = require('../../core/project_config');\nvar optimizelyConfig = require('../optimizely_config');\n\nvar logger = logging.getLogger();\n\nvar ERROR_MESSAGES = enums.ERROR_MESSAGES;\n\nvar MODULE_NAME = 'PROJECT_CONFIG_MANAGER';\n\n/**\n * Return an error message derived from a thrown value. If the thrown value is\n * an error, return the error's message property. Otherwise, return a default\n * provided by the second argument.\n * @param {*} maybeError\n * @param {String=} defaultMessage\n * @return {String}\n */\nfunction getErrorMessage(maybeError, defaultMessage) {\n  if (maybeError instanceof Error) {\n    return maybeError.message;\n  }\n  return defaultMessage || 'Unknown error';\n}\n\n/**\n * ProjectConfigManager provides project config objects via its methods\n * getConfig and onUpdate. It uses a DatafileManager to fetch datafiles. It is\n * responsible for parsing and validating datafiles, and converting datafile\n * JSON objects into project config objects.\n * @param {Object}         config\n * @param {Object|string=} config.datafile\n * @param {Object=}        config.datafileOptions\n * @param {Object=}        config.jsonSchemaValidator\n * @param {string=}        config.sdkKey\n * @param {boolean=}       config.skipJSONValidation\n */\nfunction ProjectConfigManager(config) {\n  try {\n    this.__initialize(config);\n  } catch (ex) {\n    logger.error(ex);\n    this.__updateListeners = [];\n    this.__configObj = null;\n    this.__optimizelyConfigObj = null;\n    this.__readyPromise = Promise.resolve({\n      success: false,\n      reason: getErrorMessage(ex, 'Error in initialize'),\n    });\n  }\n}\n\n/**\n * Initialize internal properties including __updateListeners, __configObj, and\n * __readyPromise, using the argument config. Create and subscribe to a datafile\n * manager if appropriate.\n * @param {Object}         config\n * @param {Object|string=} config.datafile\n * @param {Object=}        config.datafileOptions\n * @param {Object=}        config.jsonSchemaValidator\n * @param {string=}        config.sdkKey\n * @param {boolean=}       config.skipJSONValidation\n */\nProjectConfigManager.prototype.__initialize = function(config) {\n  this.__updateListeners = [];\n  this.jsonSchemaValidator = config.jsonSchemaValidator;\n  this.skipJSONValidation = config.skipJSONValidation;\n\n  if (!config.datafile && !config.sdkKey) {\n    this.__configObj = null;\n    var datafileAndSdkKeyMissingError = new Error(sprintf(ERROR_MESSAGES.DATAFILE_AND_SDK_KEY_MISSING, MODULE_NAME));\n    this.__readyPromise = Promise.resolve({\n      success: false,\n      reason: getErrorMessage(datafileAndSdkKeyMissingError),\n    });\n    logger.error(datafileAndSdkKeyMissingError);\n    return;\n  }\n\n  var initialDatafile = this.__getDatafileFromConfig(config);\n  var projectConfigCreationEx;\n  if (initialDatafile) {\n    try {\n      this.__configObj = projectConfig.tryCreatingProjectConfig({\n        datafile: initialDatafile,\n        jsonSchemaValidator: this.jsonSchemaValidator,\n        logger: logger,\n        skipJSONValidation: this.skipJSONValidation,\n      });\n      this.__optimizelyConfigObj = optimizelyConfig.getOptimizelyConfig(this.__configObj);\n    } catch (ex) {\n      logger.error(ex);\n      projectConfigCreationEx = ex;\n      this.__configObj = null;\n    }\n  } else {\n    this.__configObj = null;\n  }\n\n  if (config.sdkKey) {\n    var datafileManagerConfig = {\n      sdkKey: config.sdkKey,\n    };\n    if (this.__validateDatafileOptions(config.datafileOptions)) {\n      fns.assign(datafileManagerConfig, config.datafileOptions);\n    }\n    if (initialDatafile && this.__configObj) {\n      datafileManagerConfig.datafile = initialDatafile;\n    }\n    this.datafileManager = new datafileManager.HttpPollingDatafileManager(datafileManagerConfig);\n    this.datafileManager.start();\n    this.__readyPromise = this.datafileManager.onReady().then(\n      this.__onDatafileManagerReadyFulfill.bind(this),\n      this.__onDatafileManagerReadyReject.bind(this)\n    );\n    this.datafileManager.on('update', this.__onDatafileManagerUpdate.bind(this));\n  } else if (this.__configObj) {\n    this.__readyPromise = Promise.resolve({\n      success: true,\n    });\n  } else {\n    this.__readyPromise = Promise.resolve({\n      success: false,\n      reason: getErrorMessage(projectConfigCreationEx, 'Invalid datafile'),\n    });\n  }\n};\n\n/**\n * Respond to datafile manager's onReady promise becoming fulfilled.\n * If there are validation or parse failures using the datafile provided by\n * DatafileManager, ProjectConfigManager's ready promise is resolved with an\n * unsuccessful result. Otherwise, ProjectConfigManager updates its own project\n * config object from the new datafile, and its ready promise is resolved with a\n * successful result.\n */\nProjectConfigManager.prototype.__onDatafileManagerReadyFulfill = function() {\n  var newDatafile = this.datafileManager.get();\n  var newConfigObj;\n  try {\n    newConfigObj = projectConfig.tryCreatingProjectConfig({\n      datafile: newDatafile,\n      jsonSchemaValidator: this.jsonSchemaValidator,\n      logger: logger,\n      skipJSONValidation: this.skipJSONValidation,\n    });\n  } catch (ex) {\n    logger.error(ex);\n    return {\n      success: false,\n      reason: getErrorMessage(ex),\n    };\n  }\n  this.__handleNewConfigObj(newConfigObj);\n  return {\n    success: true,\n  };\n};\n\n/**\n * Respond to datafile manager's onReady promise becoming rejected.\n * When DatafileManager's onReady promise is rejected, there is no possibility\n * of obtaining a datafile. In this case, ProjectConfigManager's ready promise\n * is fulfilled with an unsuccessful result.\n * @param {Error} err\n */\nProjectConfigManager.prototype.__onDatafileManagerReadyReject = function(err) {\n  return {\n    success: false,\n    reason: getErrorMessage(err, 'Failed to become ready'),\n  };\n};\n\n/**\n * Respond to datafile manager's update event. Attempt to update own config\n * object using latest datafile from datafile manager. Call own registered\n * update listeners if successful\n */\nProjectConfigManager.prototype.__onDatafileManagerUpdate = function() {\n  var newDatafile = this.datafileManager.get();\n  var newConfigObj;\n  try {\n    newConfigObj = projectConfig.tryCreatingProjectConfig({\n      datafile: newDatafile,\n      jsonSchemaValidator: this.jsonSchemaValidator,\n      logger: logger,\n      skipJSONValidation: this.skipJSONValidation,\n    });\n  } catch (ex) {\n    logger.error(ex);\n  }\n  if (newConfigObj) {\n    this.__handleNewConfigObj(newConfigObj);\n  }\n};\n\n/**\n * If the argument config contains a valid datafile object or string,\n * return a datafile object based on that provided datafile, otherwise\n * return null.\n * @param {Object}         config\n * @param {Object|string=} config.datafile\n * @return {Object|null}\n */\nProjectConfigManager.prototype.__getDatafileFromConfig = function(config) {\n  var initialDatafile = null;\n  try {\n    if (config.datafile) {\n      configValidator.validateDatafile(config.datafile);\n      if (typeof config.datafile === 'string' || config.datafile instanceof String) {\n        initialDatafile = JSON.parse(config.datafile);\n      } else {\n        initialDatafile = config.datafile;\n      }\n    }\n  } catch (ex) {\n    logger.error(ex);\n  }\n  return initialDatafile;\n};\n\n/**\n * Validate user-provided datafileOptions. It should be an object or undefined.\n * @param {*} datafileOptions\n * @returns {boolean}\n */\nProjectConfigManager.prototype.__validateDatafileOptions = function(datafileOptions) {\n  if (typeof datafileOptions === 'undefined') {\n    return true;\n  }\n\n  if (typeof datafileOptions === 'object') {\n    return datafileOptions !== null;\n  }\n\n  return false;\n};\n\n/**\n * Update internal project config object to be argument object when the argument\n * object has a different revision than the current internal project config\n * object. If the internal object is updated, call update listeners.\n * @param {Object} newConfigObj\n */\nProjectConfigManager.prototype.__handleNewConfigObj = function(newConfigObj) {\n  var oldConfigObj = this.__configObj;\n\n  var oldRevision = oldConfigObj ? oldConfigObj.revision : 'null';\n  if (oldRevision === newConfigObj.revision) {\n    return;\n  }\n\n  this.__configObj = newConfigObj;\n  this.__optimizelyConfigObj = optimizelyConfig.getOptimizelyConfig(newConfigObj);\n\n  this.__updateListeners.forEach(function(listener) {\n    listener(newConfigObj);\n  });\n};\n\n/**\n * Returns the current project config object, or null if no project config object\n * is available\n * @return {Object|null}\n */\nProjectConfigManager.prototype.getConfig = function() {\n  return this.__configObj;\n}\n\n/**\n * Returns the optimizely config object\n * @return {Object}\n */\nProjectConfigManager.prototype.getOptimizelyConfig = function() {\n  return this.__optimizelyConfigObj;\n};\n\n/**\n * Returns a Promise that fulfills when this ProjectConfigManager is ready to\n * use (meaning it has a valid project config object), or has failed to become\n * ready.\n *\n * Failure can be caused by the following:\n * - At least one of sdkKey or datafile is not provided in the constructor argument\n * - The provided datafile was invalid\n * - The datafile provided by the datafile manager was invalid\n * - The datafile manager failed to fetch a datafile\n *\n * The returned Promise is fulfilled with a result object containing these\n * properties:\n *    - success (boolean): True if this instance is ready to use with a valid\n *                         project config object, or false if it failed to\n *                         become ready\n *    - reason (string=):  If success is false, this is a string property with\n *                         an explanatory message.\n * @return {Promise}\n */\nProjectConfigManager.prototype.onReady = function() {\n  return this.__readyPromise;\n};\n\n/**\n * Add a listener for project config updates. The listener will be called\n * whenever this instance has a new project config object available.\n * Returns a dispose function that removes the subscription\n * @param {Function} listener\n * @return {Function}\n */\nProjectConfigManager.prototype.onUpdate = function(listener) {\n  this.__updateListeners.push(listener);\n  return function() {\n    var index = this.__updateListeners.indexOf(listener);\n    if (index > -1) {\n      this.__updateListeners.splice(index, 1);\n    }\n  }.bind(this);\n};\n\n/**\n * Stop the internal datafile manager and remove all update listeners\n */\nProjectConfigManager.prototype.stop = function() {\n  if (this.datafileManager) {\n    this.datafileManager.stop();\n  }\n  this.__updateListeners = [];\n};\n\nmodule.exports = {\n  ProjectConfigManager: ProjectConfigManager,\n};\n"]},"metadata":{},"sourceType":"script"}