{"ast":null,"code":"/**\n * Copyright 2016, 2018-2019 Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar conditionTreeEvaluator = require('../condition_tree_evaluator');\n\nvar customAttributeConditionEvaluator = require('../custom_attribute_condition_evaluator');\n\nvar enums = require('../../utils/enums');\n\nvar fns = require('../../utils/fns');\n\nvar sprintf = require('@optimizely/js-sdk-utils').sprintf;\n\nvar logging = require('@optimizely/js-sdk-logging');\n\nvar logger = logging.getLogger();\nvar ERROR_MESSAGES = enums.ERROR_MESSAGES;\nvar LOG_LEVEL = enums.LOG_LEVEL;\nvar LOG_MESSAGES = enums.LOG_MESSAGES;\nvar MODULE_NAME = 'AUDIENCE_EVALUATOR';\n/**\n * Construct an instance of AudienceEvaluator with given options\n * @param {Object=} UNSTABLE_conditionEvaluators A map of condition evaluators provided by the consumer. This enables matching\n *                                                   condition types which are not supported natively by the SDK. Note that built in\n *                                                   Optimizely evaluators cannot be overridden.\n * @constructor\n */\n\nfunction AudienceEvaluator(UNSTABLE_conditionEvaluators) {\n  this.typeToEvaluatorMap = fns.assignIn({}, UNSTABLE_conditionEvaluators, {\n    'custom_attribute': customAttributeConditionEvaluator\n  });\n}\n/**\n * Determine if the given user attributes satisfy the given audience conditions\n * @param  {Array|String|null|undefined}  audienceConditions    Audience conditions to match the user attributes against - can be an array\n *                                                              of audience IDs, a nested array of conditions, or a single leaf condition.\n *                                                              Examples: [\"5\", \"6\"], [\"and\", [\"or\", \"1\", \"2\"], \"3\"], \"1\"\n * @param  {Object}                       audiencesById         Object providing access to full audience objects for audience IDs\n *                                                              contained in audienceConditions. Keys should be audience IDs, values\n *                                                              should be full audience objects with conditions properties\n * @param  {Object}                       [userAttributes]      User attributes which will be used in determining if audience conditions\n *                                                              are met. If not provided, defaults to an empty object\n * @return {Boolean}                                            true if the user attributes match the given audience conditions, false\n *                                                              otherwise\n */\n\n\nAudienceEvaluator.prototype.evaluate = function (audienceConditions, audiencesById, userAttributes) {\n  // if there are no audiences, return true because that means ALL users are included in the experiment\n  if (!audienceConditions || audienceConditions.length === 0) {\n    return true;\n  }\n\n  if (!userAttributes) {\n    userAttributes = {};\n  }\n\n  var evaluateAudience = function (audienceId) {\n    var audience = audiencesById[audienceId];\n\n    if (audience) {\n      logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.EVALUATING_AUDIENCE, MODULE_NAME, audienceId, JSON.stringify(audience.conditions)));\n      var result = conditionTreeEvaluator.evaluate(audience.conditions, this.evaluateConditionWithUserAttributes.bind(this, userAttributes));\n      var resultText = result === null ? 'UNKNOWN' : result.toString().toUpperCase();\n      logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.AUDIENCE_EVALUATION_RESULT, MODULE_NAME, audienceId, resultText));\n      return result;\n    }\n\n    return null;\n  }.bind(this);\n\n  return conditionTreeEvaluator.evaluate(audienceConditions, evaluateAudience) || false;\n};\n/**\n * Wrapper around evaluator.evaluate that is passed to the conditionTreeEvaluator.\n * Evaluates the condition provided given the user attributes if an evaluator has been defined for the condition type.\n * @param  {Object} userAttributes     A map of user attributes.\n * @param  {Object} condition          A single condition object to evaluate.\n * @return {Boolean|null}              true if the condition is satisfied, null if a matcher is not found.\n */\n\n\nAudienceEvaluator.prototype.evaluateConditionWithUserAttributes = function (userAttributes, condition) {\n  var evaluator = this.typeToEvaluatorMap[condition.type];\n\n  if (!evaluator) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNKNOWN_CONDITION_TYPE, MODULE_NAME, JSON.stringify(condition)));\n    return null;\n  }\n\n  try {\n    return evaluator.evaluate(condition, userAttributes, logger);\n  } catch (err) {\n    logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.CONDITION_EVALUATOR_ERROR, MODULE_NAME, condition.type, err.message));\n  }\n\n  return null;\n};\n\nmodule.exports = AudienceEvaluator;","map":{"version":3,"sources":["/home/abhishek/Music/contentstack-reactjs-ab-testing/node_modules/@optimizely/optimizely-sdk/lib/core/audience_evaluator/index.js"],"names":["conditionTreeEvaluator","require","customAttributeConditionEvaluator","enums","fns","sprintf","logging","logger","getLogger","ERROR_MESSAGES","LOG_LEVEL","LOG_MESSAGES","MODULE_NAME","AudienceEvaluator","UNSTABLE_conditionEvaluators","typeToEvaluatorMap","assignIn","prototype","evaluate","audienceConditions","audiencesById","userAttributes","length","evaluateAudience","audienceId","audience","log","DEBUG","EVALUATING_AUDIENCE","JSON","stringify","conditions","result","evaluateConditionWithUserAttributes","bind","resultText","toString","toUpperCase","INFO","AUDIENCE_EVALUATION_RESULT","condition","evaluator","type","WARNING","UNKNOWN_CONDITION_TYPE","err","ERROR","CONDITION_EVALUATOR_ERROR","message","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2016, 2018-2019 Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar conditionTreeEvaluator = require('../condition_tree_evaluator');\nvar customAttributeConditionEvaluator = require('../custom_attribute_condition_evaluator');\nvar enums = require('../../utils/enums');\nvar fns = require('../../utils/fns');\nvar sprintf = require('@optimizely/js-sdk-utils').sprintf;\nvar logging = require('@optimizely/js-sdk-logging');\nvar logger = logging.getLogger();\n\nvar ERROR_MESSAGES = enums.ERROR_MESSAGES;\nvar LOG_LEVEL = enums.LOG_LEVEL;\nvar LOG_MESSAGES = enums.LOG_MESSAGES;\nvar MODULE_NAME = 'AUDIENCE_EVALUATOR';\n\n\n/**\n * Construct an instance of AudienceEvaluator with given options\n * @param {Object=} UNSTABLE_conditionEvaluators A map of condition evaluators provided by the consumer. This enables matching\n *                                                   condition types which are not supported natively by the SDK. Note that built in\n *                                                   Optimizely evaluators cannot be overridden.\n * @constructor\n */\nfunction AudienceEvaluator(UNSTABLE_conditionEvaluators) {\n  this.typeToEvaluatorMap = fns.assignIn({}, UNSTABLE_conditionEvaluators, {\n    'custom_attribute': customAttributeConditionEvaluator\n  });\n}\n\n/**\n * Determine if the given user attributes satisfy the given audience conditions\n * @param  {Array|String|null|undefined}  audienceConditions    Audience conditions to match the user attributes against - can be an array\n *                                                              of audience IDs, a nested array of conditions, or a single leaf condition.\n *                                                              Examples: [\"5\", \"6\"], [\"and\", [\"or\", \"1\", \"2\"], \"3\"], \"1\"\n * @param  {Object}                       audiencesById         Object providing access to full audience objects for audience IDs\n *                                                              contained in audienceConditions. Keys should be audience IDs, values\n *                                                              should be full audience objects with conditions properties\n * @param  {Object}                       [userAttributes]      User attributes which will be used in determining if audience conditions\n *                                                              are met. If not provided, defaults to an empty object\n * @return {Boolean}                                            true if the user attributes match the given audience conditions, false\n *                                                              otherwise\n */\nAudienceEvaluator.prototype.evaluate = function(audienceConditions, audiencesById, userAttributes) {\n  // if there are no audiences, return true because that means ALL users are included in the experiment\n  if (!audienceConditions || audienceConditions.length === 0) {\n    return true;\n  }\n\n  if (!userAttributes) {\n    userAttributes = {};\n  }\n\n  var evaluateAudience = function(audienceId) {\n    var audience = audiencesById[audienceId];\n    if (audience) {\n      logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.EVALUATING_AUDIENCE, MODULE_NAME, audienceId, JSON.stringify(audience.conditions)));\n      var result = conditionTreeEvaluator.evaluate(audience.conditions, this.evaluateConditionWithUserAttributes.bind(this, userAttributes));\n      var resultText = result === null ? 'UNKNOWN' : result.toString().toUpperCase();\n      logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.AUDIENCE_EVALUATION_RESULT, MODULE_NAME, audienceId, resultText));\n      return result;\n    }\n\n    return null;\n  }.bind(this);\n\n  return conditionTreeEvaluator.evaluate(audienceConditions, evaluateAudience) || false;\n};\n\n/**\n * Wrapper around evaluator.evaluate that is passed to the conditionTreeEvaluator.\n * Evaluates the condition provided given the user attributes if an evaluator has been defined for the condition type.\n * @param  {Object} userAttributes     A map of user attributes.\n * @param  {Object} condition          A single condition object to evaluate.\n * @return {Boolean|null}              true if the condition is satisfied, null if a matcher is not found.\n */\nAudienceEvaluator.prototype.evaluateConditionWithUserAttributes = function(userAttributes, condition) {\n  var evaluator = this.typeToEvaluatorMap[condition.type];\n  if (!evaluator) {\n    logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.UNKNOWN_CONDITION_TYPE, MODULE_NAME, JSON.stringify(condition)));\n    return null;\n  }\n  try {\n    return evaluator.evaluate(condition, userAttributes, logger);\n  } catch (err) {\n    logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.CONDITION_EVALUATOR_ERROR, MODULE_NAME, condition.type, err.message));\n  }\n  return null;\n};\n\nmodule.exports = AudienceEvaluator;\n"]},"metadata":{},"sourceType":"script"}