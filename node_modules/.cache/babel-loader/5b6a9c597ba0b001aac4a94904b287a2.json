{"ast":null,"code":"/**\n * Copyright 2017, 2019 Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides utility method for parsing event tag values\n */\nvar enums = require('../enums');\n\nvar sprintf = require('@optimizely/js-sdk-utils').sprintf;\n\nvar LOG_LEVEL = enums.LOG_LEVEL;\nvar LOG_MESSAGES = enums.LOG_MESSAGES;\nvar MODULE_NAME = 'EVENT_TAG_UTILS';\nvar REVENUE_EVENT_METRIC_NAME = enums.RESERVED_EVENT_KEYWORDS.REVENUE;\nvar VALUE_EVENT_METRIC_NAME = enums.RESERVED_EVENT_KEYWORDS.VALUE;\nmodule.exports = {\n  /**\n   * Grab the revenue value from the event tags. \"revenue\" is a reserved keyword.\n   * @param {Object} eventTags\n   * @param {Object} logger\n   * @return {Integer|null}\n   */\n  getRevenueValue: function (eventTags, logger) {\n    if (eventTags && eventTags.hasOwnProperty(REVENUE_EVENT_METRIC_NAME)) {\n      var rawValue = eventTags[REVENUE_EVENT_METRIC_NAME];\n      var parsedRevenueValue = parseInt(rawValue, 10);\n\n      if (isNaN(parsedRevenueValue)) {\n        logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.FAILED_TO_PARSE_REVENUE, MODULE_NAME, rawValue));\n        return null;\n      }\n\n      logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.PARSED_REVENUE_VALUE, MODULE_NAME, parsedRevenueValue));\n      return parsedRevenueValue;\n    }\n\n    return null;\n  },\n\n  /**\n   * Grab the event value from the event tags. \"value\" is a reserved keyword.\n   * @param {Object} eventTags\n   * @param {Object} logger\n   * @return {Number|null}\n   */\n  getEventValue: function (eventTags, logger) {\n    if (eventTags && eventTags.hasOwnProperty(VALUE_EVENT_METRIC_NAME)) {\n      var rawValue = eventTags[VALUE_EVENT_METRIC_NAME];\n      var parsedEventValue = parseFloat(rawValue);\n\n      if (isNaN(parsedEventValue)) {\n        logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.FAILED_TO_PARSE_VALUE, MODULE_NAME, rawValue));\n        return null;\n      }\n\n      logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.PARSED_NUMERIC_VALUE, MODULE_NAME, parsedEventValue));\n      return parsedEventValue;\n    }\n\n    return null;\n  }\n};","map":{"version":3,"sources":["/home/abhishek/Music/contentstack-reactjs-ab-testing/node_modules/@optimizely/optimizely-sdk/lib/utils/event_tag_utils/index.js"],"names":["enums","require","sprintf","LOG_LEVEL","LOG_MESSAGES","MODULE_NAME","REVENUE_EVENT_METRIC_NAME","RESERVED_EVENT_KEYWORDS","REVENUE","VALUE_EVENT_METRIC_NAME","VALUE","module","exports","getRevenueValue","eventTags","logger","hasOwnProperty","rawValue","parsedRevenueValue","parseInt","isNaN","log","INFO","FAILED_TO_PARSE_REVENUE","PARSED_REVENUE_VALUE","getEventValue","parsedEventValue","parseFloat","FAILED_TO_PARSE_VALUE","PARSED_NUMERIC_VALUE"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA;;;AAGA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,0BAAD,CAAP,CAAoCC,OAAlD;;AAEA,IAAIC,SAAS,GAAGH,KAAK,CAACG,SAAtB;AACA,IAAIC,YAAY,GAAGJ,KAAK,CAACI,YAAzB;AACA,IAAIC,WAAW,GAAG,iBAAlB;AACA,IAAIC,yBAAyB,GAAGN,KAAK,CAACO,uBAAN,CAA8BC,OAA9D;AACA,IAAIC,uBAAuB,GAAGT,KAAK,CAACO,uBAAN,CAA8BG,KAA5D;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACf;;;;;;AAMAC,EAAAA,eAAe,EAAE,UAASC,SAAT,EAAoBC,MAApB,EAA4B;AAC3C,QAAID,SAAS,IAAIA,SAAS,CAACE,cAAV,CAAyBV,yBAAzB,CAAjB,EAAsE;AACpE,UAAIW,QAAQ,GAAGH,SAAS,CAACR,yBAAD,CAAxB;AACA,UAAIY,kBAAkB,GAAGC,QAAQ,CAACF,QAAD,EAAW,EAAX,CAAjC;;AACA,UAAIG,KAAK,CAACF,kBAAD,CAAT,EAA+B;AAC7BH,QAAAA,MAAM,CAACM,GAAP,CAAWlB,SAAS,CAACmB,IAArB,EAA2BpB,OAAO,CAACE,YAAY,CAACmB,uBAAd,EAAuClB,WAAvC,EAAoDY,QAApD,CAAlC;AACA,eAAO,IAAP;AACD;;AACDF,MAAAA,MAAM,CAACM,GAAP,CAAWlB,SAAS,CAACmB,IAArB,EAA2BpB,OAAO,CAACE,YAAY,CAACoB,oBAAd,EAAoCnB,WAApC,EAAiDa,kBAAjD,CAAlC;AACA,aAAOA,kBAAP;AACD;;AACD,WAAO,IAAP;AACD,GAnBc;;AAqBf;;;;;;AAMAO,EAAAA,aAAa,EAAE,UAASX,SAAT,EAAoBC,MAApB,EAA4B;AACzC,QAAID,SAAS,IAAIA,SAAS,CAACE,cAAV,CAAyBP,uBAAzB,CAAjB,EAAoE;AAClE,UAAIQ,QAAQ,GAAGH,SAAS,CAACL,uBAAD,CAAxB;AACA,UAAIiB,gBAAgB,GAAGC,UAAU,CAACV,QAAD,CAAjC;;AACA,UAAIG,KAAK,CAACM,gBAAD,CAAT,EAA6B;AAC3BX,QAAAA,MAAM,CAACM,GAAP,CAAWlB,SAAS,CAACmB,IAArB,EAA2BpB,OAAO,CAACE,YAAY,CAACwB,qBAAd,EAAqCvB,WAArC,EAAkDY,QAAlD,CAAlC;AACA,eAAO,IAAP;AACD;;AACDF,MAAAA,MAAM,CAACM,GAAP,CAAWlB,SAAS,CAACmB,IAArB,EAA2BpB,OAAO,CAACE,YAAY,CAACyB,oBAAd,EAAoCxB,WAApC,EAAiDqB,gBAAjD,CAAlC;AACA,aAAOA,gBAAP;AACD;;AACD,WAAO,IAAP;AACD;AAvCc,CAAjB","sourcesContent":["/**\n * Copyright 2017, 2019 Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides utility method for parsing event tag values\n */\nvar enums = require('../enums');\nvar sprintf = require('@optimizely/js-sdk-utils').sprintf;\n\nvar LOG_LEVEL = enums.LOG_LEVEL;\nvar LOG_MESSAGES = enums.LOG_MESSAGES;\nvar MODULE_NAME = 'EVENT_TAG_UTILS';\nvar REVENUE_EVENT_METRIC_NAME = enums.RESERVED_EVENT_KEYWORDS.REVENUE;\nvar VALUE_EVENT_METRIC_NAME = enums.RESERVED_EVENT_KEYWORDS.VALUE;\n\nmodule.exports = {\n  /**\n   * Grab the revenue value from the event tags. \"revenue\" is a reserved keyword.\n   * @param {Object} eventTags\n   * @param {Object} logger\n   * @return {Integer|null}\n   */\n  getRevenueValue: function(eventTags, logger) {\n    if (eventTags && eventTags.hasOwnProperty(REVENUE_EVENT_METRIC_NAME)) {\n      var rawValue = eventTags[REVENUE_EVENT_METRIC_NAME];\n      var parsedRevenueValue = parseInt(rawValue, 10);\n      if (isNaN(parsedRevenueValue)) {\n        logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.FAILED_TO_PARSE_REVENUE, MODULE_NAME, rawValue));\n        return null;\n      }\n      logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.PARSED_REVENUE_VALUE, MODULE_NAME, parsedRevenueValue));\n      return parsedRevenueValue;\n    }\n    return null;\n  },\n\n  /**\n   * Grab the event value from the event tags. \"value\" is a reserved keyword.\n   * @param {Object} eventTags\n   * @param {Object} logger\n   * @return {Number|null}\n   */\n  getEventValue: function(eventTags, logger) {\n    if (eventTags && eventTags.hasOwnProperty(VALUE_EVENT_METRIC_NAME)) {\n      var rawValue = eventTags[VALUE_EVENT_METRIC_NAME];\n      var parsedEventValue = parseFloat(rawValue);\n      if (isNaN(parsedEventValue)) {\n        logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.FAILED_TO_PARSE_VALUE, MODULE_NAME, rawValue));\n        return null;\n      }\n      logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.PARSED_NUMERIC_VALUE, MODULE_NAME, parsedEventValue));\n      return parsedEventValue;\n    }\n    return null;\n  },\n};\n"]},"metadata":{},"sourceType":"script"}