{"ast":null,"code":"/****************************************************************************\n * Copyright 2017-2019, Optimizely, Inc. and contributors                   *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\nvar AudienceEvaluator = require('../audience_evaluator');\n\nvar bucketer = require('../bucketer');\n\nvar enums = require('../../utils/enums');\n\nvar fns = require('../../utils/fns');\n\nvar projectConfig = require('../project_config');\n\nvar stringValidator = require('../../utils/string_value_validator');\n\nvar sprintf = require('@optimizely/js-sdk-utils').sprintf;\n\nvar MODULE_NAME = 'DECISION_SERVICE';\nvar ERROR_MESSAGES = enums.ERROR_MESSAGES;\nvar LOG_LEVEL = enums.LOG_LEVEL;\nvar LOG_MESSAGES = enums.LOG_MESSAGES;\nvar DECISION_SOURCES = enums.DECISION_SOURCES;\n/**\n * Optimizely's decision service that determines which variation of an experiment the user will be allocated to.\n *\n * The decision service contains all logic around how a user decision is made. This includes all of the following (in order):\n *   1. Checking experiment status\n *   2. Checking forced bucketing\n *   3. Checking whitelisting\n *   4. Checking user profile service for past bucketing decisions (sticky bucketing)\n *   5. Checking audience targeting\n *   6. Using Murmurhash3 to bucket the user.\n *\n * @constructor\n * @param   {Object} options\n * @param   {Object} options.userProfileService An instance of the user profile service for sticky bucketing.\n * @param   {Object} options.logger An instance of a logger to log messages.\n * @returns {Object}\n */\n\nfunction DecisionService(options) {\n  this.audienceEvaluator = new AudienceEvaluator(options.UNSTABLE_conditionEvaluators);\n  this.forcedVariationMap = {};\n  this.logger = options.logger;\n  this.userProfileService = options.userProfileService || null;\n}\n/**\n * Gets variation where visitor will be bucketed.\n * @param  {Object}      configObj      The parsed project configuration object\n * @param  {string}      experimentKey\n * @param  {string}      userId\n * @param  {Object}      attributes\n * @return {string|null} the variation the user is bucketed into.\n */\n\n\nDecisionService.prototype.getVariation = function (configObj, experimentKey, userId, attributes) {\n  // by default, the bucketing ID should be the user ID\n  var bucketingId = this._getBucketingId(userId, attributes);\n\n  if (!this.__checkIfExperimentIsActive(configObj, experimentKey)) {\n    return null;\n  }\n\n  var experiment = configObj.experimentKeyMap[experimentKey];\n  var forcedVariationKey = this.getForcedVariation(configObj, experimentKey, userId);\n\n  if (forcedVariationKey) {\n    return forcedVariationKey;\n  }\n\n  var variation = this.__getWhitelistedVariation(experiment, userId);\n\n  if (variation) {\n    return variation.key;\n  } // check for sticky bucketing\n\n\n  var experimentBucketMap = this.__resolveExperimentBucketMap(userId, attributes);\n\n  variation = this.__getStoredVariation(configObj, experiment, userId, experimentBucketMap);\n\n  if (variation) {\n    this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.RETURNING_STORED_VARIATION, MODULE_NAME, variation.key, experimentKey, userId));\n    return variation.key;\n  } // Perform regular targeting and bucketing\n\n\n  if (!this.__checkIfUserIsInAudience(configObj, experimentKey, userId, attributes)) {\n    return null;\n  }\n\n  var bucketerParams = this.__buildBucketerParams(configObj, experimentKey, bucketingId, userId);\n\n  var variationId = bucketer.bucket(bucketerParams);\n  variation = configObj.variationIdMap[variationId];\n\n  if (!variation) {\n    return null;\n  } // persist bucketing\n\n\n  this.__saveUserProfile(experiment, variation, userId, experimentBucketMap);\n\n  return variation.key;\n};\n/**\n * Merges attributes from attributes[STICKY_BUCKETING_KEY] and userProfileService\n * @param  {Object} attributes\n * @return {Object} finalized copy of experiment_bucket_map\n */\n\n\nDecisionService.prototype.__resolveExperimentBucketMap = function (userId, attributes) {\n  attributes = attributes || {};\n  var userProfile = this.__getUserProfile(userId) || {};\n  var attributeExperimentBucketMap = attributes[enums.CONTROL_ATTRIBUTES.STICKY_BUCKETING_KEY];\n  return fns.assignIn({}, userProfile.experiment_bucket_map, attributeExperimentBucketMap);\n};\n/**\n * Checks whether the experiment is running\n * @param  {Object}  configObj     The parsed project configuration object\n * @param  {string}  experimentKey Key of experiment being validated\n * @param  {string}  userId        ID of user\n * @return {boolean} True if experiment is running\n */\n\n\nDecisionService.prototype.__checkIfExperimentIsActive = function (configObj, experimentKey) {\n  if (!projectConfig.isActive(configObj, experimentKey)) {\n    var experimentNotRunningLogMessage = sprintf(LOG_MESSAGES.EXPERIMENT_NOT_RUNNING, MODULE_NAME, experimentKey);\n    this.logger.log(LOG_LEVEL.INFO, experimentNotRunningLogMessage);\n    return false;\n  }\n\n  return true;\n};\n/**\n * Checks if user is whitelisted into any variation and return that variation if so\n * @param  {Object} experiment\n * @param  {string} userId\n * @return {string|null} Forced variation if it exists for user ID, otherwise null\n */\n\n\nDecisionService.prototype.__getWhitelistedVariation = function (experiment, userId) {\n  if (!fns.isEmpty(experiment.forcedVariations) && experiment.forcedVariations.hasOwnProperty(userId)) {\n    var forcedVariationKey = experiment.forcedVariations[userId];\n\n    if (experiment.variationKeyMap.hasOwnProperty(forcedVariationKey)) {\n      var forcedBucketingSucceededMessageLog = sprintf(LOG_MESSAGES.USER_FORCED_IN_VARIATION, MODULE_NAME, userId, forcedVariationKey);\n      this.logger.log(LOG_LEVEL.INFO, forcedBucketingSucceededMessageLog);\n      return experiment.variationKeyMap[forcedVariationKey];\n    } else {\n      var forcedBucketingFailedMessageLog = sprintf(LOG_MESSAGES.FORCED_BUCKETING_FAILED, MODULE_NAME, forcedVariationKey, userId);\n      this.logger.log(LOG_LEVEL.ERROR, forcedBucketingFailedMessageLog);\n      return null;\n    }\n  }\n\n  return null;\n};\n/**\n * Checks whether the user is included in experiment audience\n * @param  {Object}  configObj     The parsed project configuration object\n * @param  {string}  experimentKey Key of experiment being validated\n * @param  {string}  userId        ID of user\n * @param  {Object}  attributes    Optional parameter for user's attributes\n * @return {boolean} True if user meets audience conditions\n */\n\n\nDecisionService.prototype.__checkIfUserIsInAudience = function (configObj, experimentKey, userId, attributes) {\n  var experimentAudienceConditions = projectConfig.getExperimentAudienceConditions(configObj, experimentKey);\n  var audiencesById = projectConfig.getAudiencesById(configObj);\n  this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.EVALUATING_AUDIENCES_COMBINED, MODULE_NAME, experimentKey, JSON.stringify(experimentAudienceConditions)));\n  var result = this.audienceEvaluator.evaluate(experimentAudienceConditions, audiencesById, attributes);\n  this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.AUDIENCE_EVALUATION_RESULT_COMBINED, MODULE_NAME, experimentKey, result.toString().toUpperCase()));\n\n  if (!result) {\n    var userDoesNotMeetConditionsLogMessage = sprintf(LOG_MESSAGES.USER_NOT_IN_EXPERIMENT, MODULE_NAME, userId, experimentKey);\n    this.logger.log(LOG_LEVEL.INFO, userDoesNotMeetConditionsLogMessage);\n    return false;\n  }\n\n  return true;\n};\n/**\n * Given an experiment key and user ID, returns params used in bucketer call\n * @param  configObj     The parsed project configuration object\n * @param  experimentKey Experiment key used for bucketer\n * @param  bucketingId   ID to bucket user into\n * @param  userId        ID of user to be bucketed\n * @return {Object}\n */\n\n\nDecisionService.prototype.__buildBucketerParams = function (configObj, experimentKey, bucketingId, userId) {\n  var bucketerParams = {};\n  bucketerParams.experimentKey = experimentKey;\n  bucketerParams.experimentId = projectConfig.getExperimentId(configObj, experimentKey);\n  bucketerParams.userId = userId;\n  bucketerParams.trafficAllocationConfig = projectConfig.getTrafficAllocation(configObj, experimentKey);\n  bucketerParams.experimentKeyMap = configObj.experimentKeyMap;\n  bucketerParams.groupIdMap = configObj.groupIdMap;\n  bucketerParams.variationIdMap = configObj.variationIdMap;\n  bucketerParams.logger = this.logger;\n  bucketerParams.bucketingId = bucketingId;\n  return bucketerParams;\n};\n/**\n * Pull the stored variation out of the experimentBucketMap for an experiment/userId\n * @param  {Object} configObj           The parsed project configuration object\n * @param  {Object} experiment\n * @param  {String} userId\n * @param  {Object} experimentBucketMap mapping experiment => { variation_id: <variationId> }\n * @return {Object} the stored variation or null if the user profile does not have one for the given experiment\n */\n\n\nDecisionService.prototype.__getStoredVariation = function (configObj, experiment, userId, experimentBucketMap) {\n  if (experimentBucketMap.hasOwnProperty(experiment.id)) {\n    var decision = experimentBucketMap[experiment.id];\n    var variationId = decision.variation_id;\n\n    if (configObj.variationIdMap.hasOwnProperty(variationId)) {\n      return configObj.variationIdMap[decision.variation_id];\n    } else {\n      this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.SAVED_VARIATION_NOT_FOUND, MODULE_NAME, userId, variationId, experiment.key));\n    }\n  }\n\n  return null;\n};\n/**\n * Get the user profile with the given user ID\n * @param  {string} userId\n * @return {Object|undefined} the stored user profile or undefined if one isn't found\n */\n\n\nDecisionService.prototype.__getUserProfile = function (userId) {\n  var userProfile = {\n    user_id: userId,\n    experiment_bucket_map: {}\n  };\n\n  if (!this.userProfileService) {\n    return userProfile;\n  }\n\n  try {\n    return this.userProfileService.lookup(userId);\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.USER_PROFILE_LOOKUP_ERROR, MODULE_NAME, userId, ex.message));\n  }\n};\n/**\n * Saves the bucketing decision to the user profile\n * @param {Object} userProfile\n * @param {Object} experiment\n * @param {Object} variation\n * @param {Object} experimentBucketMap\n */\n\n\nDecisionService.prototype.__saveUserProfile = function (experiment, variation, userId, experimentBucketMap) {\n  if (!this.userProfileService) {\n    return;\n  }\n\n  try {\n    var newBucketMap = fns.cloneDeep(experimentBucketMap);\n    newBucketMap[experiment.id] = {\n      variation_id: variation.id\n    };\n    this.userProfileService.save({\n      user_id: userId,\n      experiment_bucket_map: newBucketMap\n    });\n    this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.SAVED_VARIATION, MODULE_NAME, variation.key, experiment.key, userId));\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.USER_PROFILE_SAVE_ERROR, MODULE_NAME, userId, ex.message));\n  }\n};\n/**\n * Given a feature, user ID, and attributes, returns an object representing a\n * decision. If the user was bucketed into a variation for the given feature\n * and attributes, the returned decision object will have variation and\n * experiment properties (both objects), as well as a decisionSource property.\n * decisionSource indicates whether the decision was due to a rollout or an\n * experiment.\n * @param   {Object} configObj  The parsed project configuration object\n * @param   {Object} feature    A feature flag object from project configuration\n * @param   {String} userId     A string identifying the user, for bucketing\n * @param   {Object} attributes Optional user attributes\n * @return  {Object} An object with experiment, variation, and decisionSource\n * properties. If the user was not bucketed into a variation, the variation\n * property is null.\n */\n\n\nDecisionService.prototype.getVariationForFeature = function (configObj, feature, userId, attributes) {\n  var experimentDecision = this._getVariationForFeatureExperiment(configObj, feature, userId, attributes);\n\n  if (experimentDecision.variation !== null) {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_IN_FEATURE_EXPERIMENT, MODULE_NAME, userId, experimentDecision.variation.key, experimentDecision.experiment.key, feature.key));\n    return experimentDecision;\n  }\n\n  this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_NOT_IN_FEATURE_EXPERIMENT, MODULE_NAME, userId, feature.key));\n\n  var rolloutDecision = this._getVariationForRollout(configObj, feature, userId, attributes);\n\n  if (rolloutDecision.variation !== null) {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_IN_ROLLOUT, MODULE_NAME, userId, feature.key));\n    return rolloutDecision;\n  }\n\n  this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_NOT_IN_ROLLOUT, MODULE_NAME, userId, feature.key));\n  return rolloutDecision;\n};\n\nDecisionService.prototype._getVariationForFeatureExperiment = function (configObj, feature, userId, attributes) {\n  var experiment = null;\n  var variationKey = null;\n\n  if (feature.hasOwnProperty('groupId')) {\n    var group = configObj.groupIdMap[feature.groupId];\n\n    if (group) {\n      experiment = this._getExperimentInGroup(configObj, group, userId);\n\n      if (experiment && feature.experimentIds.indexOf(experiment.id) !== -1) {\n        variationKey = this.getVariation(configObj, experiment.key, userId, attributes);\n      }\n    }\n  } else if (feature.experimentIds.length > 0) {\n    // If the feature does not have a group ID, then it can only be associated\n    // with one experiment, so we look at the first experiment ID only\n    experiment = projectConfig.getExperimentFromId(configObj, feature.experimentIds[0], this.logger);\n\n    if (experiment) {\n      variationKey = this.getVariation(configObj, experiment.key, userId, attributes);\n    }\n  } else {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.FEATURE_HAS_NO_EXPERIMENTS, MODULE_NAME, feature.key));\n  }\n\n  var variation = null;\n\n  if (variationKey !== null && experiment !== null) {\n    variation = experiment.variationKeyMap[variationKey];\n  }\n\n  return {\n    experiment: experiment,\n    variation: variation,\n    decisionSource: DECISION_SOURCES.FEATURE_TEST\n  };\n};\n\nDecisionService.prototype._getExperimentInGroup = function (configObj, group, userId) {\n  var experimentId = bucketer.bucketUserIntoExperiment(group, userId, userId, this.logger);\n\n  if (experimentId) {\n    this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP, MODULE_NAME, userId, experimentId, group.id));\n    var experiment = projectConfig.getExperimentFromId(configObj, experimentId, this.logger);\n\n    if (experiment) {\n      return experiment;\n    }\n  }\n\n  this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.USER_NOT_BUCKETED_INTO_ANY_EXPERIMENT_IN_GROUP, MODULE_NAME, userId, group.id));\n  return null;\n};\n\nDecisionService.prototype._getVariationForRollout = function (configObj, feature, userId, attributes) {\n  if (!feature.rolloutId) {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.NO_ROLLOUT_EXISTS, MODULE_NAME, feature.key));\n    return {\n      experiment: null,\n      variation: null,\n      decisionSource: DECISION_SOURCES.ROLLOUT\n    };\n  }\n\n  var rollout = configObj.rolloutIdMap[feature.rolloutId];\n\n  if (!rollout) {\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.INVALID_ROLLOUT_ID, MODULE_NAME, feature.rolloutId, feature.key));\n    return {\n      experiment: null,\n      variation: null,\n      decisionSource: DECISION_SOURCES.ROLLOUT\n    };\n  }\n\n  if (rollout.experiments.length === 0) {\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.ROLLOUT_HAS_NO_EXPERIMENTS, MODULE_NAME, feature.rolloutId));\n    return {\n      experiment: null,\n      variation: null,\n      decisionSource: DECISION_SOURCES.ROLLOUT\n    };\n  }\n\n  var bucketingId = this._getBucketingId(userId, attributes); // The end index is length - 1 because the last experiment is assumed to be\n  // \"everyone else\", which will be evaluated separately outside this loop\n\n\n  var endIndex = rollout.experiments.length - 1;\n  var index;\n  var experiment;\n  var bucketerParams;\n  var variationId;\n  var variation;\n\n  for (index = 0; index < endIndex; index++) {\n    experiment = configObj.experimentKeyMap[rollout.experiments[index].key];\n\n    if (!this.__checkIfUserIsInAudience(configObj, experiment.key, userId, attributes)) {\n      this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE, MODULE_NAME, userId, index + 1));\n      continue;\n    }\n\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_MEETS_CONDITIONS_FOR_TARGETING_RULE, MODULE_NAME, userId, index + 1));\n    bucketerParams = this.__buildBucketerParams(configObj, experiment.key, bucketingId, userId);\n    variationId = bucketer.bucket(bucketerParams);\n    variation = configObj.variationIdMap[variationId];\n\n    if (variation) {\n      this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_BUCKETED_INTO_TARGETING_RULE, MODULE_NAME, userId, index + 1));\n      return {\n        experiment: experiment,\n        variation: variation,\n        decisionSource: DECISION_SOURCES.ROLLOUT\n      };\n    } else {\n      this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_NOT_BUCKETED_INTO_TARGETING_RULE, MODULE_NAME, userId, index + 1));\n      break;\n    }\n  }\n\n  var everyoneElseExperiment = configObj.experimentKeyMap[rollout.experiments[endIndex].key];\n\n  if (this.__checkIfUserIsInAudience(configObj, everyoneElseExperiment.key, userId, attributes)) {\n    bucketerParams = this.__buildBucketerParams(configObj, everyoneElseExperiment.key, bucketingId, userId);\n    variationId = bucketer.bucket(bucketerParams);\n    variation = configObj.variationIdMap[variationId];\n\n    if (variation) {\n      this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_BUCKETED_INTO_EVERYONE_TARGETING_RULE, MODULE_NAME, userId));\n      return {\n        experiment: everyoneElseExperiment,\n        variation: variation,\n        decisionSource: DECISION_SOURCES.ROLLOUT\n      };\n    } else {\n      this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_NOT_BUCKETED_INTO_EVERYONE_TARGETING_RULE, MODULE_NAME, userId));\n    }\n  }\n\n  return {\n    experiment: null,\n    variation: null,\n    decisionSource: DECISION_SOURCES.ROLLOUT\n  };\n};\n/**\n * Get bucketing Id from user attributes.\n * @param {String} userId\n * @param {Object} attributes\n * @returns {String} Bucketing Id if it is a string type in attributes, user Id otherwise.\n */\n\n\nDecisionService.prototype._getBucketingId = function (userId, attributes) {\n  var bucketingId = userId; // If the bucketing ID key is defined in attributes, than use that in place of the userID for the murmur hash key\n\n  if (attributes != null && typeof attributes === 'object' && attributes.hasOwnProperty(enums.CONTROL_ATTRIBUTES.BUCKETING_ID)) {\n    if (typeof attributes[enums.CONTROL_ATTRIBUTES.BUCKETING_ID] === 'string') {\n      bucketingId = attributes[enums.CONTROL_ATTRIBUTES.BUCKETING_ID];\n      this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.VALID_BUCKETING_ID, MODULE_NAME, bucketingId));\n    } else {\n      this.logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.BUCKETING_ID_NOT_STRING, MODULE_NAME));\n    }\n  }\n\n  return bucketingId;\n};\n/**\n * Removes forced variation for given userId and experimentKey\n * @param  {string} userId         String representing the user id\n * @param  {number} experimentId   Number representing the experiment id\n * @param  {string} experimentKey  Key representing the experiment id\n * @throws If the user id is not valid or not in the forced variation map\n */\n\n\nDecisionService.prototype.removeForcedVariation = function (userId, experimentId, experimentKey) {\n  if (!userId) {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_USER_ID, MODULE_NAME));\n  }\n\n  if (this.forcedVariationMap.hasOwnProperty(userId)) {\n    delete this.forcedVariationMap[userId][experimentId];\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.VARIATION_REMOVED_FOR_USER, MODULE_NAME, experimentKey, userId));\n  } else {\n    throw new Error(sprintf(ERROR_MESSAGES.USER_NOT_IN_FORCED_VARIATION, MODULE_NAME, userId));\n  }\n};\n/**\n * Sets forced variation for given userId and experimentKey\n * @param  {string} userId        String representing the user id\n * @param  {number} experimentId  Number representing the experiment id\n * @param  {number} variationId   Number representing the variation id\n * @throws If the user id is not valid\n */\n\n\nDecisionService.prototype.__setInForcedVariationMap = function (userId, experimentId, variationId) {\n  if (this.forcedVariationMap.hasOwnProperty(userId)) {\n    this.forcedVariationMap[userId][experimentId] = variationId;\n  } else {\n    this.forcedVariationMap[userId] = {};\n    this.forcedVariationMap[userId][experimentId] = variationId;\n  }\n\n  this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_MAPPED_TO_FORCED_VARIATION, MODULE_NAME, variationId, experimentId, userId));\n};\n/**\n * Gets the forced variation key for the given user and experiment.\n * @param  {Object} configObj        Object representing project configuration\n * @param  {string} experimentKey    Key for experiment.\n * @param  {string} userId           The user Id.\n * @return {string|null} Variation   The variation which the given user and experiment should be forced into.\n */\n\n\nDecisionService.prototype.getForcedVariation = function (configObj, experimentKey, userId) {\n  var experimentToVariationMap = this.forcedVariationMap[userId];\n\n  if (!experimentToVariationMap) {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_HAS_NO_FORCED_VARIATION, MODULE_NAME, userId));\n    return null;\n  }\n\n  var experimentId;\n\n  try {\n    var experiment = projectConfig.getExperimentFromKey(configObj, experimentKey);\n\n    if (experiment.hasOwnProperty('id')) {\n      experimentId = experiment['id'];\n    } else {\n      // catching improperly formatted experiments\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.IMPROPERLY_FORMATTED_EXPERIMENT, MODULE_NAME, experimentKey));\n      return null;\n    }\n  } catch (ex) {\n    // catching experiment not in datafile\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    return null;\n  }\n\n  var variationId = experimentToVariationMap[experimentId];\n\n  if (!variationId) {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT, MODULE_NAME, experimentKey, userId));\n    return null;\n  }\n\n  var variationKey = projectConfig.getVariationKeyFromId(configObj, variationId);\n\n  if (variationKey) {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_HAS_FORCED_VARIATION, MODULE_NAME, variationKey, experimentKey, userId));\n  } else {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT, MODULE_NAME, experimentKey, userId));\n  }\n\n  return variationKey;\n};\n/**\n * Sets the forced variation for a user in a given experiment\n * @param  {Object} configObj      Object representing project configuration\n * @param  {string} experimentKey  Key for experiment.\n * @param  {string} userId         The user Id.\n * @param  {string} variationKey   Key for variation. If null, then clear the existing experiment-to-variation mapping\n * @return {boolean}               A boolean value that indicates if the set completed successfully.\n */\n\n\nDecisionService.prototype.setForcedVariation = function (configObj, experimentKey, userId, variationKey) {\n  if (variationKey != null && !stringValidator.validate(variationKey)) {\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.INVALID_VARIATION_KEY, MODULE_NAME));\n    return false;\n  }\n\n  var experimentId;\n\n  try {\n    var experiment = projectConfig.getExperimentFromKey(configObj, experimentKey);\n\n    if (experiment.hasOwnProperty('id')) {\n      experimentId = experiment['id'];\n    } else {\n      // catching improperly formatted experiments\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.IMPROPERLY_FORMATTED_EXPERIMENT, MODULE_NAME, experimentKey));\n      return false;\n    }\n  } catch (ex) {\n    // catching experiment not in datafile\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    return false;\n  }\n\n  if (variationKey == null) {\n    try {\n      this.removeForcedVariation(userId, experimentId, experimentKey, this.logger);\n      return true;\n    } catch (ex) {\n      this.logger.log(LOG_LEVEL.ERROR, ex.message);\n      return false;\n    }\n  }\n\n  var variationId = projectConfig.getVariationIdFromExperimentAndVariationKey(configObj, experimentKey, variationKey);\n\n  if (!variationId) {\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.NO_VARIATION_FOR_EXPERIMENT_KEY, MODULE_NAME, variationKey, experimentKey));\n    return false;\n  }\n\n  try {\n    this.__setInForcedVariationMap(userId, experimentId, variationId);\n\n    return true;\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    return false;\n  }\n};\n\nmodule.exports = {\n  /**\n   * Creates an instance of the DecisionService.\n   * @param  {Object} options               Configuration options\n   * @param  {Object} options.userProfileService\n   * @param  {Object} options.logger\n   * @return {Object} An instance of the DecisionService\n   */\n  createDecisionService: function (options) {\n    return new DecisionService(options);\n  }\n};","map":{"version":3,"sources":["/home/abhishek/Music/contentstack-reactjs-ab-testing/node_modules/@optimizely/optimizely-sdk/lib/core/decision_service/index.js"],"names":["AudienceEvaluator","require","bucketer","enums","fns","projectConfig","stringValidator","sprintf","MODULE_NAME","ERROR_MESSAGES","LOG_LEVEL","LOG_MESSAGES","DECISION_SOURCES","DecisionService","options","audienceEvaluator","UNSTABLE_conditionEvaluators","forcedVariationMap","logger","userProfileService","prototype","getVariation","configObj","experimentKey","userId","attributes","bucketingId","_getBucketingId","__checkIfExperimentIsActive","experiment","experimentKeyMap","forcedVariationKey","getForcedVariation","variation","__getWhitelistedVariation","key","experimentBucketMap","__resolveExperimentBucketMap","__getStoredVariation","log","INFO","RETURNING_STORED_VARIATION","__checkIfUserIsInAudience","bucketerParams","__buildBucketerParams","variationId","bucket","variationIdMap","__saveUserProfile","userProfile","__getUserProfile","attributeExperimentBucketMap","CONTROL_ATTRIBUTES","STICKY_BUCKETING_KEY","assignIn","experiment_bucket_map","isActive","experimentNotRunningLogMessage","EXPERIMENT_NOT_RUNNING","isEmpty","forcedVariations","hasOwnProperty","variationKeyMap","forcedBucketingSucceededMessageLog","USER_FORCED_IN_VARIATION","forcedBucketingFailedMessageLog","FORCED_BUCKETING_FAILED","ERROR","experimentAudienceConditions","getExperimentAudienceConditions","audiencesById","getAudiencesById","DEBUG","EVALUATING_AUDIENCES_COMBINED","JSON","stringify","result","evaluate","AUDIENCE_EVALUATION_RESULT_COMBINED","toString","toUpperCase","userDoesNotMeetConditionsLogMessage","USER_NOT_IN_EXPERIMENT","experimentId","getExperimentId","trafficAllocationConfig","getTrafficAllocation","groupIdMap","id","decision","variation_id","SAVED_VARIATION_NOT_FOUND","user_id","lookup","ex","USER_PROFILE_LOOKUP_ERROR","message","newBucketMap","cloneDeep","save","SAVED_VARIATION","USER_PROFILE_SAVE_ERROR","getVariationForFeature","feature","experimentDecision","_getVariationForFeatureExperiment","USER_IN_FEATURE_EXPERIMENT","USER_NOT_IN_FEATURE_EXPERIMENT","rolloutDecision","_getVariationForRollout","USER_IN_ROLLOUT","USER_NOT_IN_ROLLOUT","variationKey","group","groupId","_getExperimentInGroup","experimentIds","indexOf","length","getExperimentFromId","FEATURE_HAS_NO_EXPERIMENTS","decisionSource","FEATURE_TEST","bucketUserIntoExperiment","USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP","USER_NOT_BUCKETED_INTO_ANY_EXPERIMENT_IN_GROUP","rolloutId","NO_ROLLOUT_EXISTS","ROLLOUT","rollout","rolloutIdMap","INVALID_ROLLOUT_ID","experiments","ROLLOUT_HAS_NO_EXPERIMENTS","endIndex","index","USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE","USER_MEETS_CONDITIONS_FOR_TARGETING_RULE","USER_BUCKETED_INTO_TARGETING_RULE","USER_NOT_BUCKETED_INTO_TARGETING_RULE","everyoneElseExperiment","USER_BUCKETED_INTO_EVERYONE_TARGETING_RULE","USER_NOT_BUCKETED_INTO_EVERYONE_TARGETING_RULE","BUCKETING_ID","VALID_BUCKETING_ID","WARNING","BUCKETING_ID_NOT_STRING","removeForcedVariation","Error","INVALID_USER_ID","VARIATION_REMOVED_FOR_USER","USER_NOT_IN_FORCED_VARIATION","__setInForcedVariationMap","USER_MAPPED_TO_FORCED_VARIATION","experimentToVariationMap","USER_HAS_NO_FORCED_VARIATION","getExperimentFromKey","IMPROPERLY_FORMATTED_EXPERIMENT","USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT","getVariationKeyFromId","USER_HAS_FORCED_VARIATION","setForcedVariation","validate","INVALID_VARIATION_KEY","getVariationIdFromExperimentAndVariationKey","NO_VARIATION_FOR_EXPERIMENT_KEY","module","exports","createDecisionService"],"mappings":"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","sourcesContent":["/****************************************************************************\n * Copyright 2017-2019, Optimizely, Inc. and contributors                   *\n *                                                                          *\n * Licensed under the Apache License, Version 2.0 (the \"License\");          *\n * you may not use this file except in compliance with the License.         *\n * You may obtain a copy of the License at                                  *\n *                                                                          *\n *    http://www.apache.org/licenses/LICENSE-2.0                            *\n *                                                                          *\n * Unless required by applicable law or agreed to in writing, software      *\n * distributed under the License is distributed on an \"AS IS\" BASIS,        *\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n * See the License for the specific language governing permissions and      *\n * limitations under the License.                                           *\n ***************************************************************************/\n\nvar AudienceEvaluator = require('../audience_evaluator');\nvar bucketer = require('../bucketer');\nvar enums = require('../../utils/enums');\nvar fns = require('../../utils/fns');\nvar projectConfig = require('../project_config');\nvar stringValidator = require('../../utils/string_value_validator');\n\nvar sprintf = require('@optimizely/js-sdk-utils').sprintf;\n\nvar MODULE_NAME = 'DECISION_SERVICE';\nvar ERROR_MESSAGES = enums.ERROR_MESSAGES;\nvar LOG_LEVEL = enums.LOG_LEVEL;\nvar LOG_MESSAGES = enums.LOG_MESSAGES;\nvar DECISION_SOURCES = enums.DECISION_SOURCES;\n\n\n\n/**\n * Optimizely's decision service that determines which variation of an experiment the user will be allocated to.\n *\n * The decision service contains all logic around how a user decision is made. This includes all of the following (in order):\n *   1. Checking experiment status\n *   2. Checking forced bucketing\n *   3. Checking whitelisting\n *   4. Checking user profile service for past bucketing decisions (sticky bucketing)\n *   5. Checking audience targeting\n *   6. Using Murmurhash3 to bucket the user.\n *\n * @constructor\n * @param   {Object} options\n * @param   {Object} options.userProfileService An instance of the user profile service for sticky bucketing.\n * @param   {Object} options.logger An instance of a logger to log messages.\n * @returns {Object}\n */\nfunction DecisionService(options) {\n  this.audienceEvaluator = new AudienceEvaluator(options.UNSTABLE_conditionEvaluators);\n  this.forcedVariationMap = {};\n  this.logger = options.logger;\n  this.userProfileService = options.userProfileService || null;\n}\n\n/**\n * Gets variation where visitor will be bucketed.\n * @param  {Object}      configObj      The parsed project configuration object\n * @param  {string}      experimentKey\n * @param  {string}      userId\n * @param  {Object}      attributes\n * @return {string|null} the variation the user is bucketed into.\n */\nDecisionService.prototype.getVariation = function(configObj, experimentKey, userId, attributes) {\n  // by default, the bucketing ID should be the user ID\n  var bucketingId = this._getBucketingId(userId, attributes);\n\n  if (!this.__checkIfExperimentIsActive(configObj, experimentKey)) {\n    return null;\n  }\n  var experiment = configObj.experimentKeyMap[experimentKey];\n  var forcedVariationKey = this.getForcedVariation(configObj, experimentKey, userId);\n  if (forcedVariationKey) {\n    return forcedVariationKey;\n  }\n\n  var variation = this.__getWhitelistedVariation(experiment, userId);\n  if (variation) {\n    return variation.key;\n  }\n\n  // check for sticky bucketing\n  var experimentBucketMap = this.__resolveExperimentBucketMap(userId, attributes);\n  variation = this.__getStoredVariation(configObj, experiment, userId, experimentBucketMap);\n  if (variation) {\n    this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.RETURNING_STORED_VARIATION, MODULE_NAME, variation.key, experimentKey, userId));\n    return variation.key;\n  }\n\n  // Perform regular targeting and bucketing\n  if (!this.__checkIfUserIsInAudience(configObj, experimentKey, userId, attributes)) {\n    return null;\n  }\n\n  var bucketerParams = this.__buildBucketerParams(configObj, experimentKey, bucketingId, userId);\n  var variationId = bucketer.bucket(bucketerParams);\n  variation = configObj.variationIdMap[variationId];\n  if (!variation) {\n    return null;\n  }\n\n  // persist bucketing\n  this.__saveUserProfile(experiment, variation, userId, experimentBucketMap);\n\n  return variation.key;\n};\n\n/**\n * Merges attributes from attributes[STICKY_BUCKETING_KEY] and userProfileService\n * @param  {Object} attributes\n * @return {Object} finalized copy of experiment_bucket_map\n */\nDecisionService.prototype.__resolveExperimentBucketMap = function(userId, attributes) {\n  attributes = attributes || {}\n  var userProfile = this.__getUserProfile(userId) || {};\n  var attributeExperimentBucketMap = attributes[enums.CONTROL_ATTRIBUTES.STICKY_BUCKETING_KEY];\n  return fns.assignIn({}, userProfile.experiment_bucket_map, attributeExperimentBucketMap);\n};\n\n\n/**\n * Checks whether the experiment is running\n * @param  {Object}  configObj     The parsed project configuration object\n * @param  {string}  experimentKey Key of experiment being validated\n * @param  {string}  userId        ID of user\n * @return {boolean} True if experiment is running\n */\nDecisionService.prototype.__checkIfExperimentIsActive = function(configObj, experimentKey) {\n  if (!projectConfig.isActive(configObj, experimentKey)) {\n    var experimentNotRunningLogMessage = sprintf(LOG_MESSAGES.EXPERIMENT_NOT_RUNNING, MODULE_NAME, experimentKey);\n    this.logger.log(LOG_LEVEL.INFO, experimentNotRunningLogMessage);\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Checks if user is whitelisted into any variation and return that variation if so\n * @param  {Object} experiment\n * @param  {string} userId\n * @return {string|null} Forced variation if it exists for user ID, otherwise null\n */\nDecisionService.prototype.__getWhitelistedVariation = function(experiment, userId) {\n  if (!fns.isEmpty(experiment.forcedVariations) && experiment.forcedVariations.hasOwnProperty(userId)) {\n    var forcedVariationKey = experiment.forcedVariations[userId];\n    if (experiment.variationKeyMap.hasOwnProperty(forcedVariationKey)) {\n      var forcedBucketingSucceededMessageLog = sprintf(LOG_MESSAGES.USER_FORCED_IN_VARIATION, MODULE_NAME, userId, forcedVariationKey);\n      this.logger.log(LOG_LEVEL.INFO, forcedBucketingSucceededMessageLog);\n      return experiment.variationKeyMap[forcedVariationKey];\n    } else {\n      var forcedBucketingFailedMessageLog = sprintf(LOG_MESSAGES.FORCED_BUCKETING_FAILED, MODULE_NAME, forcedVariationKey, userId);\n      this.logger.log(LOG_LEVEL.ERROR, forcedBucketingFailedMessageLog);\n      return null;\n    }\n  }\n\n  return null;\n};\n\n/**\n * Checks whether the user is included in experiment audience\n * @param  {Object}  configObj     The parsed project configuration object\n * @param  {string}  experimentKey Key of experiment being validated\n * @param  {string}  userId        ID of user\n * @param  {Object}  attributes    Optional parameter for user's attributes\n * @return {boolean} True if user meets audience conditions\n */\nDecisionService.prototype.__checkIfUserIsInAudience = function(configObj, experimentKey, userId, attributes) {\n  var experimentAudienceConditions = projectConfig.getExperimentAudienceConditions(configObj, experimentKey);\n  var audiencesById = projectConfig.getAudiencesById(configObj);\n  this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.EVALUATING_AUDIENCES_COMBINED, MODULE_NAME, experimentKey, JSON.stringify(experimentAudienceConditions)));\n  var result = this.audienceEvaluator.evaluate(experimentAudienceConditions, audiencesById, attributes);\n  this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.AUDIENCE_EVALUATION_RESULT_COMBINED, MODULE_NAME, experimentKey, result.toString().toUpperCase()));\n\n  if (!result) {\n    var userDoesNotMeetConditionsLogMessage = sprintf(LOG_MESSAGES.USER_NOT_IN_EXPERIMENT, MODULE_NAME, userId, experimentKey);\n    this.logger.log(LOG_LEVEL.INFO, userDoesNotMeetConditionsLogMessage);\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Given an experiment key and user ID, returns params used in bucketer call\n * @param  configObj     The parsed project configuration object\n * @param  experimentKey Experiment key used for bucketer\n * @param  bucketingId   ID to bucket user into\n * @param  userId        ID of user to be bucketed\n * @return {Object}\n */\nDecisionService.prototype.__buildBucketerParams = function(configObj, experimentKey, bucketingId, userId) {\n  var bucketerParams = {};\n  bucketerParams.experimentKey = experimentKey;\n  bucketerParams.experimentId = projectConfig.getExperimentId(configObj, experimentKey);\n  bucketerParams.userId = userId;\n  bucketerParams.trafficAllocationConfig = projectConfig.getTrafficAllocation(configObj, experimentKey);\n  bucketerParams.experimentKeyMap = configObj.experimentKeyMap;\n  bucketerParams.groupIdMap = configObj.groupIdMap;\n  bucketerParams.variationIdMap = configObj.variationIdMap;\n  bucketerParams.logger = this.logger;\n  bucketerParams.bucketingId = bucketingId;\n  return bucketerParams;\n};\n\n/**\n * Pull the stored variation out of the experimentBucketMap for an experiment/userId\n * @param  {Object} configObj           The parsed project configuration object\n * @param  {Object} experiment\n * @param  {String} userId\n * @param  {Object} experimentBucketMap mapping experiment => { variation_id: <variationId> }\n * @return {Object} the stored variation or null if the user profile does not have one for the given experiment\n */\nDecisionService.prototype.__getStoredVariation = function(configObj, experiment, userId, experimentBucketMap) {\n  if (experimentBucketMap.hasOwnProperty(experiment.id)) {\n    var decision = experimentBucketMap[experiment.id];\n    var variationId = decision.variation_id;\n    if (configObj.variationIdMap.hasOwnProperty(variationId)) {\n      return configObj.variationIdMap[decision.variation_id];\n    } else {\n      this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.SAVED_VARIATION_NOT_FOUND, MODULE_NAME, userId, variationId, experiment.key));\n    }\n  }\n\n  return null;\n};\n\n/**\n * Get the user profile with the given user ID\n * @param  {string} userId\n * @return {Object|undefined} the stored user profile or undefined if one isn't found\n */\nDecisionService.prototype.__getUserProfile = function(userId) {\n  var userProfile = {\n    user_id: userId,\n    experiment_bucket_map: {},\n  };\n\n  if (!this.userProfileService) {\n    return userProfile;\n  }\n\n  try {\n    return this.userProfileService.lookup(userId);\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.USER_PROFILE_LOOKUP_ERROR, MODULE_NAME, userId, ex.message));\n  }\n};\n\n/**\n * Saves the bucketing decision to the user profile\n * @param {Object} userProfile\n * @param {Object} experiment\n * @param {Object} variation\n * @param {Object} experimentBucketMap\n */\nDecisionService.prototype.__saveUserProfile = function(experiment, variation, userId, experimentBucketMap) {\n  if (!this.userProfileService) {\n    return;\n  }\n\n  try {\n    var newBucketMap = fns.cloneDeep(experimentBucketMap);\n    newBucketMap[experiment.id] = {\n      variation_id: variation.id\n    };\n\n    this.userProfileService.save({\n      user_id: userId,\n      experiment_bucket_map: newBucketMap,\n    });\n\n    this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.SAVED_VARIATION, MODULE_NAME, variation.key, experiment.key, userId));\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.USER_PROFILE_SAVE_ERROR, MODULE_NAME, userId, ex.message));\n  }\n};\n\n/**\n * Given a feature, user ID, and attributes, returns an object representing a\n * decision. If the user was bucketed into a variation for the given feature\n * and attributes, the returned decision object will have variation and\n * experiment properties (both objects), as well as a decisionSource property.\n * decisionSource indicates whether the decision was due to a rollout or an\n * experiment.\n * @param   {Object} configObj  The parsed project configuration object\n * @param   {Object} feature    A feature flag object from project configuration\n * @param   {String} userId     A string identifying the user, for bucketing\n * @param   {Object} attributes Optional user attributes\n * @return  {Object} An object with experiment, variation, and decisionSource\n * properties. If the user was not bucketed into a variation, the variation\n * property is null.\n */\nDecisionService.prototype.getVariationForFeature = function(configObj, feature, userId, attributes) {\n  var experimentDecision = this._getVariationForFeatureExperiment(configObj, feature, userId, attributes);\n  if (experimentDecision.variation !== null) {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_IN_FEATURE_EXPERIMENT, MODULE_NAME, userId, experimentDecision.variation.key, experimentDecision.experiment.key, feature.key));\n    return experimentDecision;\n  }\n\n  this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_NOT_IN_FEATURE_EXPERIMENT, MODULE_NAME, userId, feature.key));\n\n  var rolloutDecision = this._getVariationForRollout(configObj, feature, userId, attributes);\n  if (rolloutDecision.variation !== null) {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_IN_ROLLOUT, MODULE_NAME, userId, feature.key));\n    return rolloutDecision;\n  }\n\n  this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_NOT_IN_ROLLOUT, MODULE_NAME, userId, feature.key));\n  return rolloutDecision;\n};\n\nDecisionService.prototype._getVariationForFeatureExperiment = function(configObj, feature, userId, attributes) {\n  var experiment = null;\n  var variationKey = null;\n\n  if (feature.hasOwnProperty('groupId')) {\n    var group = configObj.groupIdMap[feature.groupId];\n    if (group) {\n      experiment = this._getExperimentInGroup(configObj, group, userId);\n      if (experiment && feature.experimentIds.indexOf(experiment.id) !== -1) {\n        variationKey = this.getVariation(configObj, experiment.key, userId, attributes);\n      }\n    }\n  } else if (feature.experimentIds.length > 0) {\n    // If the feature does not have a group ID, then it can only be associated\n    // with one experiment, so we look at the first experiment ID only\n    experiment = projectConfig.getExperimentFromId(configObj, feature.experimentIds[0], this.logger);\n    if (experiment) {\n      variationKey = this.getVariation(configObj, experiment.key, userId, attributes);\n    }\n  } else {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.FEATURE_HAS_NO_EXPERIMENTS, MODULE_NAME, feature.key));\n  }\n\n  var variation = null;\n  if (variationKey !== null && experiment !== null) {\n    variation = experiment.variationKeyMap[variationKey];\n  }\n  return {\n    experiment: experiment,\n    variation: variation,\n    decisionSource: DECISION_SOURCES.FEATURE_TEST,\n  };\n};\n\nDecisionService.prototype._getExperimentInGroup = function(configObj, group, userId) {\n  var experimentId = bucketer.bucketUserIntoExperiment(group, userId, userId, this.logger);\n  if (experimentId) {\n    this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP, MODULE_NAME, userId, experimentId, group.id));\n    var experiment = projectConfig.getExperimentFromId(configObj, experimentId, this.logger);\n    if (experiment) {\n      return experiment;\n    }\n  }\n\n  this.logger.log(LOG_LEVEL.INFO, sprintf(LOG_MESSAGES.USER_NOT_BUCKETED_INTO_ANY_EXPERIMENT_IN_GROUP, MODULE_NAME, userId, group.id));\n  return null;\n};\n\nDecisionService.prototype._getVariationForRollout = function(configObj, feature, userId, attributes) {\n  if (!feature.rolloutId) {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.NO_ROLLOUT_EXISTS, MODULE_NAME, feature.key));\n    return {\n      experiment: null,\n      variation: null,\n      decisionSource: DECISION_SOURCES.ROLLOUT,\n    };\n  }\n\n  var rollout = configObj.rolloutIdMap[feature.rolloutId];\n  if (!rollout) {\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.INVALID_ROLLOUT_ID, MODULE_NAME, feature.rolloutId, feature.key));\n    return {\n      experiment: null,\n      variation: null,\n      decisionSource: DECISION_SOURCES.ROLLOUT,\n    };\n  }\n\n  if (rollout.experiments.length === 0) {\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(LOG_MESSAGES.ROLLOUT_HAS_NO_EXPERIMENTS, MODULE_NAME, feature.rolloutId));\n    return {\n      experiment: null,\n      variation: null,\n      decisionSource: DECISION_SOURCES.ROLLOUT,\n    };\n  }\n\n  var bucketingId = this._getBucketingId(userId, attributes);\n\n  // The end index is length - 1 because the last experiment is assumed to be\n  // \"everyone else\", which will be evaluated separately outside this loop\n  var endIndex = rollout.experiments.length - 1;\n  var index;\n  var experiment;\n  var bucketerParams;\n  var variationId;\n  var variation;\n  for (index = 0; index < endIndex; index++) {\n    experiment = configObj.experimentKeyMap[rollout.experiments[index].key];\n\n    if (!this.__checkIfUserIsInAudience(configObj, experiment.key, userId, attributes)) {\n      this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE, MODULE_NAME, userId, index + 1));\n      continue;\n    }\n\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_MEETS_CONDITIONS_FOR_TARGETING_RULE, MODULE_NAME, userId, index + 1));\n    bucketerParams = this.__buildBucketerParams(configObj, experiment.key, bucketingId, userId);\n    variationId = bucketer.bucket(bucketerParams);\n    variation = configObj.variationIdMap[variationId];\n    if (variation) {\n      this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_BUCKETED_INTO_TARGETING_RULE, MODULE_NAME, userId, index + 1));\n      return {\n        experiment: experiment,\n        variation: variation,\n        decisionSource: DECISION_SOURCES.ROLLOUT,\n      };\n    } else {\n      this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_NOT_BUCKETED_INTO_TARGETING_RULE, MODULE_NAME, userId, index + 1));\n      break;\n    }\n  }\n\n  var everyoneElseExperiment = configObj.experimentKeyMap[rollout.experiments[endIndex].key];\n  if (this.__checkIfUserIsInAudience(configObj, everyoneElseExperiment.key, userId, attributes)) {\n    bucketerParams = this.__buildBucketerParams(configObj, everyoneElseExperiment.key, bucketingId, userId);\n    variationId = bucketer.bucket(bucketerParams);\n    variation = configObj.variationIdMap[variationId];\n    if (variation) {\n      this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_BUCKETED_INTO_EVERYONE_TARGETING_RULE, MODULE_NAME, userId));\n      return {\n        experiment: everyoneElseExperiment,\n        variation: variation,\n        decisionSource: DECISION_SOURCES.ROLLOUT,\n      };\n    } else {\n      this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_NOT_BUCKETED_INTO_EVERYONE_TARGETING_RULE, MODULE_NAME, userId));\n    }\n  }\n\n  return {\n    experiment: null,\n    variation: null,\n    decisionSource: DECISION_SOURCES.ROLLOUT,\n  };\n};\n\n/**\n * Get bucketing Id from user attributes.\n * @param {String} userId\n * @param {Object} attributes\n * @returns {String} Bucketing Id if it is a string type in attributes, user Id otherwise.\n */\nDecisionService.prototype._getBucketingId = function(userId, attributes) {\n  var bucketingId = userId;\n\n  // If the bucketing ID key is defined in attributes, than use that in place of the userID for the murmur hash key\n  if ((attributes != null && typeof attributes === 'object') && attributes.hasOwnProperty(enums.CONTROL_ATTRIBUTES.BUCKETING_ID)) {\n    if (typeof attributes[enums.CONTROL_ATTRIBUTES.BUCKETING_ID] === 'string') {\n      bucketingId = attributes[enums.CONTROL_ATTRIBUTES.BUCKETING_ID];\n      this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.VALID_BUCKETING_ID, MODULE_NAME, bucketingId));\n    } else {\n      this.logger.log(LOG_LEVEL.WARNING, sprintf(LOG_MESSAGES.BUCKETING_ID_NOT_STRING, MODULE_NAME));\n    }\n  }\n\n  return bucketingId;\n};\n\n/**\n * Removes forced variation for given userId and experimentKey\n * @param  {string} userId         String representing the user id\n * @param  {number} experimentId   Number representing the experiment id\n * @param  {string} experimentKey  Key representing the experiment id\n * @throws If the user id is not valid or not in the forced variation map\n */\nDecisionService.prototype.removeForcedVariation = function(userId, experimentId, experimentKey) {\n  if (!userId) {\n    throw new Error(sprintf(ERROR_MESSAGES.INVALID_USER_ID, MODULE_NAME));\n  }\n\n  if (this.forcedVariationMap.hasOwnProperty(userId)) {\n    delete this.forcedVariationMap[userId][experimentId];\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.VARIATION_REMOVED_FOR_USER, MODULE_NAME, experimentKey, userId));\n  } else {\n    throw new Error(sprintf(ERROR_MESSAGES.USER_NOT_IN_FORCED_VARIATION, MODULE_NAME, userId));\n  }\n};\n\n/**\n * Sets forced variation for given userId and experimentKey\n * @param  {string} userId        String representing the user id\n * @param  {number} experimentId  Number representing the experiment id\n * @param  {number} variationId   Number representing the variation id\n * @throws If the user id is not valid\n */\nDecisionService.prototype.__setInForcedVariationMap = function(userId, experimentId, variationId) {\n  if (this.forcedVariationMap.hasOwnProperty(userId)) {\n    this.forcedVariationMap[userId][experimentId] = variationId;\n  } else {\n    this.forcedVariationMap[userId] = {};\n    this.forcedVariationMap[userId][experimentId] = variationId;\n  }\n\n  this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_MAPPED_TO_FORCED_VARIATION, MODULE_NAME, variationId, experimentId, userId));\n};\n\n/**\n * Gets the forced variation key for the given user and experiment.\n * @param  {Object} configObj        Object representing project configuration\n * @param  {string} experimentKey    Key for experiment.\n * @param  {string} userId           The user Id.\n * @return {string|null} Variation   The variation which the given user and experiment should be forced into.\n */\nDecisionService.prototype.getForcedVariation = function(configObj, experimentKey, userId) {\n  var experimentToVariationMap = this.forcedVariationMap[userId];\n  if (!experimentToVariationMap) {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_HAS_NO_FORCED_VARIATION, MODULE_NAME, userId));\n    return null;\n  }\n\n  var experimentId;\n  try {\n    var experiment = projectConfig.getExperimentFromKey(configObj, experimentKey);\n    if (experiment.hasOwnProperty('id')) {\n      experimentId = experiment['id'];\n    } else {\n      // catching improperly formatted experiments\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.IMPROPERLY_FORMATTED_EXPERIMENT, MODULE_NAME, experimentKey));\n      return null;\n    }\n  } catch (ex) {\n    // catching experiment not in datafile\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    return null;\n  }\n\n  var variationId = experimentToVariationMap[experimentId];\n  if (!variationId) {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT, MODULE_NAME, experimentKey, userId));\n    return null;\n  }\n\n  var variationKey = projectConfig.getVariationKeyFromId(configObj, variationId);\n  if (variationKey) {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_HAS_FORCED_VARIATION, MODULE_NAME, variationKey, experimentKey, userId));\n  } else {\n    this.logger.log(LOG_LEVEL.DEBUG, sprintf(LOG_MESSAGES.USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT, MODULE_NAME, experimentKey, userId));\n  }\n\n  return variationKey;\n};\n\n/**\n * Sets the forced variation for a user in a given experiment\n * @param  {Object} configObj      Object representing project configuration\n * @param  {string} experimentKey  Key for experiment.\n * @param  {string} userId         The user Id.\n * @param  {string} variationKey   Key for variation. If null, then clear the existing experiment-to-variation mapping\n * @return {boolean}               A boolean value that indicates if the set completed successfully.\n */\nDecisionService.prototype.setForcedVariation = function(configObj, experimentKey, userId, variationKey) {\n  if (variationKey != null && !stringValidator.validate(variationKey)) {\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.INVALID_VARIATION_KEY, MODULE_NAME));\n    return false;\n  }\n\n  var experimentId;\n  try {\n    var experiment = projectConfig.getExperimentFromKey(configObj, experimentKey);\n    if (experiment.hasOwnProperty('id')) {\n      experimentId = experiment['id'];\n    } else {\n      // catching improperly formatted experiments\n      this.logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.IMPROPERLY_FORMATTED_EXPERIMENT, MODULE_NAME, experimentKey));\n      return false;\n    }\n  } catch (ex) {\n    // catching experiment not in datafile\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    return false;\n  }\n\n  if (variationKey == null) {\n    try {\n      this.removeForcedVariation(userId, experimentId, experimentKey, this.logger);\n      return true;\n    } catch (ex) {\n      this.logger.log(LOG_LEVEL.ERROR, ex.message);\n      return false;\n    }\n  }\n\n  var variationId = projectConfig.getVariationIdFromExperimentAndVariationKey(configObj, experimentKey, variationKey);\n\n  if (!variationId) {\n    this.logger.log(LOG_LEVEL.ERROR, sprintf(ERROR_MESSAGES.NO_VARIATION_FOR_EXPERIMENT_KEY, MODULE_NAME, variationKey, experimentKey));\n    return false;\n  }\n\n  try {\n    this.__setInForcedVariationMap(userId, experimentId, variationId);\n    return true;\n  } catch (ex) {\n    this.logger.log(LOG_LEVEL.ERROR, ex.message);\n    return false;\n  }\n};\n\nmodule.exports = {\n  /**\n   * Creates an instance of the DecisionService.\n   * @param  {Object} options               Configuration options\n   * @param  {Object} options.userProfileService\n   * @param  {Object} options.logger\n   * @return {Object} An instance of the DecisionService\n   */\n  createDecisionService: function(options) {\n    return new DecisionService(options);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}