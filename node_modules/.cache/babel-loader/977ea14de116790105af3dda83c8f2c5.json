{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar EventEmitter =\n/** @class */\nfunction () {\n  function EventEmitter() {\n    this.listeners = {};\n    this.listenerId = 1;\n  }\n\n  EventEmitter.prototype.on = function (eventName, listener) {\n    var _this = this;\n\n    if (!this.listeners[eventName]) {\n      this.listeners[eventName] = {};\n    }\n\n    var currentListenerId = String(this.listenerId);\n    this.listenerId++;\n    this.listeners[eventName][currentListenerId] = listener;\n    return function () {\n      if (_this.listeners[eventName]) {\n        delete _this.listeners[eventName][currentListenerId];\n      }\n    };\n  };\n\n  EventEmitter.prototype.emit = function (eventName, arg) {\n    var listeners = this.listeners[eventName];\n\n    if (listeners) {\n      Object.keys(listeners).forEach(function (listenerId) {\n        var listener = listeners[listenerId];\n        listener(arg);\n      });\n    }\n  };\n\n  EventEmitter.prototype.removeAllListeners = function () {\n    this.listeners = {};\n  };\n\n  return EventEmitter;\n}();\n\nexports.default = EventEmitter; // TODO: Create a typed event emitter for use in TS only (not JS)","map":{"version":3,"sources":["/home/abhishek/Music/contentstack-reactjs-ab-testing/node_modules/@optimizely/js-sdk-datafile-manager/lib/eventEmitter.js"],"names":["Object","defineProperty","exports","value","EventEmitter","listeners","listenerId","prototype","on","eventName","listener","_this","currentListenerId","String","emit","arg","keys","forEach","removeAllListeners","default"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;AAeAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,YAAY;AAAG;AAAe,YAAY;AAC1C,WAASA,YAAT,GAAwB;AACpB,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACH;;AACDF,EAAAA,YAAY,CAACG,SAAb,CAAuBC,EAAvB,GAA4B,UAAUC,SAAV,EAAqBC,QAArB,EAA+B;AACvD,QAAIC,KAAK,GAAG,IAAZ;;AACA,QAAI,CAAC,KAAKN,SAAL,CAAeI,SAAf,CAAL,EAAgC;AAC5B,WAAKJ,SAAL,CAAeI,SAAf,IAA4B,EAA5B;AACH;;AACD,QAAIG,iBAAiB,GAAGC,MAAM,CAAC,KAAKP,UAAN,CAA9B;AACA,SAAKA,UAAL;AACA,SAAKD,SAAL,CAAeI,SAAf,EAA0BG,iBAA1B,IAA+CF,QAA/C;AACA,WAAO,YAAY;AACf,UAAIC,KAAK,CAACN,SAAN,CAAgBI,SAAhB,CAAJ,EAAgC;AAC5B,eAAOE,KAAK,CAACN,SAAN,CAAgBI,SAAhB,EAA2BG,iBAA3B,CAAP;AACH;AACJ,KAJD;AAKH,GAbD;;AAcAR,EAAAA,YAAY,CAACG,SAAb,CAAuBO,IAAvB,GAA8B,UAAUL,SAAV,EAAqBM,GAArB,EAA0B;AACpD,QAAIV,SAAS,GAAG,KAAKA,SAAL,CAAeI,SAAf,CAAhB;;AACA,QAAIJ,SAAJ,EAAe;AACXL,MAAAA,MAAM,CAACgB,IAAP,CAAYX,SAAZ,EAAuBY,OAAvB,CAA+B,UAAUX,UAAV,EAAsB;AACjD,YAAII,QAAQ,GAAGL,SAAS,CAACC,UAAD,CAAxB;AACAI,QAAAA,QAAQ,CAACK,GAAD,CAAR;AACH,OAHD;AAIH;AACJ,GARD;;AASAX,EAAAA,YAAY,CAACG,SAAb,CAAuBW,kBAAvB,GAA4C,YAAY;AACpD,SAAKb,SAAL,GAAiB,EAAjB;AACH,GAFD;;AAGA,SAAOD,YAAP;AACH,CAhCiC,EAAlC;;AAiCAF,OAAO,CAACiB,OAAR,GAAkBf,YAAlB,C,CACA","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019, Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EventEmitter = /** @class */ (function () {\n    function EventEmitter() {\n        this.listeners = {};\n        this.listenerId = 1;\n    }\n    EventEmitter.prototype.on = function (eventName, listener) {\n        var _this = this;\n        if (!this.listeners[eventName]) {\n            this.listeners[eventName] = {};\n        }\n        var currentListenerId = String(this.listenerId);\n        this.listenerId++;\n        this.listeners[eventName][currentListenerId] = listener;\n        return function () {\n            if (_this.listeners[eventName]) {\n                delete _this.listeners[eventName][currentListenerId];\n            }\n        };\n    };\n    EventEmitter.prototype.emit = function (eventName, arg) {\n        var listeners = this.listeners[eventName];\n        if (listeners) {\n            Object.keys(listeners).forEach(function (listenerId) {\n                var listener = listeners[listenerId];\n                listener(arg);\n            });\n        }\n    };\n    EventEmitter.prototype.removeAllListeners = function () {\n        this.listeners = {};\n    };\n    return EventEmitter;\n}());\nexports.default = EventEmitter;\n// TODO: Create a typed event emitter for use in TS only (not JS)\n"]},"metadata":{},"sourceType":"script"}