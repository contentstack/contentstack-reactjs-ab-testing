{"ast":null,"code":"/**\n * Copyright 2016, 2018, 2019 Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar sprintf = require('@optimizely/js-sdk-utils').sprintf;\n\nvar ERROR_MESSAGES = require('../enums').ERROR_MESSAGES;\n\nvar MODULE_NAME = 'CONFIG_VALIDATOR';\n\nvar DATAFILE_VERSIONS = require('../enums').DATAFILE_VERSIONS;\n\nvar SUPPORTED_VERSIONS = [DATAFILE_VERSIONS.V2, DATAFILE_VERSIONS.V3, DATAFILE_VERSIONS.V4];\n/**\n * Provides utility methods for validating that the configuration options are valid\n */\n\nmodule.exports = {\n  /**\n   * Validates the given config options\n   * @param  {Object} config\n   * @param  {Object} config.errorHandler\n   * @param  {Object} config.eventDispatcher\n   * @param  {Object} config.logger\n   * @return {Boolean} True if the config options are valid\n   * @throws If any of the config options are not valid\n   */\n  validate: function (config) {\n    if (config.errorHandler && typeof config.errorHandler.handleError !== 'function') {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_ERROR_HANDLER, MODULE_NAME));\n    }\n\n    if (config.eventDispatcher && typeof config.eventDispatcher.dispatchEvent !== 'function') {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_EVENT_DISPATCHER, MODULE_NAME));\n    }\n\n    if (config.logger && typeof config.logger.log !== 'function') {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_LOGGER, MODULE_NAME));\n    }\n\n    return true;\n  },\n\n  /**\n   * Validates the datafile\n   * @param {string}  datafile\n   * @return {Boolean} True if the datafile is valid\n   * @throws If the datafile is not valid for any of the following reasons:\n                - The datafile string is undefined\n                - The datafile string cannot be parsed as a JSON object\n                - The datafile version is not supported\n   */\n  validateDatafile: function (datafile) {\n    if (!datafile) {\n      throw new Error(sprintf(ERROR_MESSAGES.NO_DATAFILE_SPECIFIED, MODULE_NAME));\n    }\n\n    if (typeof datafile === 'string' || datafile instanceof String) {\n      // Attempt to parse the datafile string\n      try {\n        datafile = JSON.parse(datafile);\n      } catch (ex) {\n        throw new Error(sprintf(ERROR_MESSAGES.INVALID_DATAFILE_MALFORMED, MODULE_NAME));\n      }\n    }\n\n    if (SUPPORTED_VERSIONS.indexOf(datafile.version) === -1) {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_DATAFILE_VERSION, MODULE_NAME, datafile.version));\n    }\n\n    return true;\n  }\n};","map":{"version":3,"sources":["/home/abhishek/Music/contentstack-reactjs-ab-testing/node_modules/@optimizely/optimizely-sdk/lib/utils/config_validator/index.js"],"names":["sprintf","require","ERROR_MESSAGES","MODULE_NAME","DATAFILE_VERSIONS","SUPPORTED_VERSIONS","V2","V3","V4","module","exports","validate","config","errorHandler","handleError","Error","INVALID_ERROR_HANDLER","eventDispatcher","dispatchEvent","INVALID_EVENT_DISPATCHER","logger","log","INVALID_LOGGER","validateDatafile","datafile","NO_DATAFILE_SPECIFIED","String","JSON","parse","ex","INVALID_DATAFILE_MALFORMED","indexOf","version","INVALID_DATAFILE_VERSION"],"mappings":"AAAA;;;;;;;;;;;;;;;AAeA,IAAIA,OAAO,GAAGC,OAAO,CAAC,0BAAD,CAAP,CAAoCD,OAAlD;;AAEA,IAAIE,cAAc,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBC,cAAzC;;AACA,IAAIC,WAAW,GAAG,kBAAlB;;AACA,IAAIC,iBAAiB,GAAGH,OAAO,CAAC,UAAD,CAAP,CAAoBG,iBAA5C;;AAEA,IAAIC,kBAAkB,GAAG,CACvBD,iBAAiB,CAACE,EADK,EAEvBF,iBAAiB,CAACG,EAFK,EAGvBH,iBAAiB,CAACI,EAHK,CAAzB;AAMA;;;;AAGAC,MAAM,CAACC,OAAP,GAAiB;AACf;;;;;;;;;AASAC,EAAAA,QAAQ,EAAE,UAASC,MAAT,EAAiB;AACzB,QAAIA,MAAM,CAACC,YAAP,IAAwB,OAAOD,MAAM,CAACC,YAAP,CAAoBC,WAA3B,KAA2C,UAAvE,EAAoF;AAClF,YAAM,IAAIC,KAAJ,CAAUf,OAAO,CAACE,cAAc,CAACc,qBAAhB,EAAuCb,WAAvC,CAAjB,CAAN;AACD;;AAED,QAAIS,MAAM,CAACK,eAAP,IAA2B,OAAOL,MAAM,CAACK,eAAP,CAAuBC,aAA9B,KAAgD,UAA/E,EAA4F;AAC1F,YAAM,IAAIH,KAAJ,CAAUf,OAAO,CAACE,cAAc,CAACiB,wBAAhB,EAA0ChB,WAA1C,CAAjB,CAAN;AACD;;AAED,QAAIS,MAAM,CAACQ,MAAP,IAAkB,OAAOR,MAAM,CAACQ,MAAP,CAAcC,GAArB,KAA6B,UAAnD,EAAgE;AAC9D,YAAM,IAAIN,KAAJ,CAAUf,OAAO,CAACE,cAAc,CAACoB,cAAhB,EAAgCnB,WAAhC,CAAjB,CAAN;AACD;;AAED,WAAO,IAAP;AACD,GAxBc;;AA0Bf;;;;;;;;;AASAoB,EAAAA,gBAAgB,EAAE,UAASC,QAAT,EAAmB;AACnC,QAAI,CAACA,QAAL,EAAe;AACb,YAAM,IAAIT,KAAJ,CAAUf,OAAO,CAACE,cAAc,CAACuB,qBAAhB,EAAuCtB,WAAvC,CAAjB,CAAN;AACD;;AAED,QAAI,OAAOqB,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,YAAYE,MAAxD,EAAgE;AAC9D;AACA,UAAI;AACFF,QAAAA,QAAQ,GAAGG,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAX;AACD,OAFD,CAEE,OAAOK,EAAP,EAAW;AACX,cAAM,IAAId,KAAJ,CAAUf,OAAO,CAACE,cAAc,CAAC4B,0BAAhB,EAA4C3B,WAA5C,CAAjB,CAAN;AACD;AACF;;AAED,QAAIE,kBAAkB,CAAC0B,OAAnB,CAA2BP,QAAQ,CAACQ,OAApC,MAAiD,CAAC,CAAtD,EAAyD;AACvD,YAAM,IAAIjB,KAAJ,CAAUf,OAAO,CAACE,cAAc,CAAC+B,wBAAhB,EAA0C9B,WAA1C,EAAuDqB,QAAQ,CAACQ,OAAhE,CAAjB,CAAN;AACD;;AAED,WAAO,IAAP;AACD;AAtDc,CAAjB","sourcesContent":["/**\n * Copyright 2016, 2018, 2019 Optimizely\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar sprintf = require('@optimizely/js-sdk-utils').sprintf;\n\nvar ERROR_MESSAGES = require('../enums').ERROR_MESSAGES;\nvar MODULE_NAME = 'CONFIG_VALIDATOR';\nvar DATAFILE_VERSIONS = require('../enums').DATAFILE_VERSIONS;\n\nvar SUPPORTED_VERSIONS = [\n  DATAFILE_VERSIONS.V2,\n  DATAFILE_VERSIONS.V3,\n  DATAFILE_VERSIONS.V4\n];\n\n/**\n * Provides utility methods for validating that the configuration options are valid\n */\nmodule.exports = {\n  /**\n   * Validates the given config options\n   * @param  {Object} config\n   * @param  {Object} config.errorHandler\n   * @param  {Object} config.eventDispatcher\n   * @param  {Object} config.logger\n   * @return {Boolean} True if the config options are valid\n   * @throws If any of the config options are not valid\n   */\n  validate: function(config) {\n    if (config.errorHandler && (typeof config.errorHandler.handleError !== 'function')) {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_ERROR_HANDLER, MODULE_NAME));\n    }\n\n    if (config.eventDispatcher && (typeof config.eventDispatcher.dispatchEvent !== 'function')) {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_EVENT_DISPATCHER, MODULE_NAME));\n    }\n\n    if (config.logger && (typeof config.logger.log !== 'function')) {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_LOGGER, MODULE_NAME));\n    }\n\n    return true;\n  },\n\n  /**\n   * Validates the datafile\n   * @param {string}  datafile\n   * @return {Boolean} True if the datafile is valid\n   * @throws If the datafile is not valid for any of the following reasons:\n                - The datafile string is undefined\n                - The datafile string cannot be parsed as a JSON object\n                - The datafile version is not supported\n   */\n  validateDatafile: function(datafile) {\n    if (!datafile) {\n      throw new Error(sprintf(ERROR_MESSAGES.NO_DATAFILE_SPECIFIED, MODULE_NAME));\n    }\n\n    if (typeof datafile === 'string' || datafile instanceof String) {\n      // Attempt to parse the datafile string\n      try {\n        datafile = JSON.parse(datafile);\n      } catch (ex) {\n        throw new Error(sprintf(ERROR_MESSAGES.INVALID_DATAFILE_MALFORMED, MODULE_NAME));\n      }\n    }\n\n    if (SUPPORTED_VERSIONS.indexOf(datafile.version) === -1) {\n      throw new Error(sprintf(ERROR_MESSAGES.INVALID_DATAFILE_VERSION, MODULE_NAME, datafile.version));\n    }\n\n    return true;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}